   2 	.stk 1024
   3 	.cod 512
   4 STATIC_LINK .equ +5
   5 RETURN_VALUE .equ -3
   6 HIGH_RETURN_VALUE .equ -1
   7 _start
   8 	tsx.w		; Preserve original stack pointer
   9 	lds.w #_stk_top	; Initialize program stack pointer
  10 	stz _bss_start
  11 	ldx.w #_bss_start
  12 	ldy.w #_bss_start+1
  13 	lda.w #_stk_top
  14 	sec
  15 	sbc.w #_bss_start
  16 	mov #10
  17 	jmp _pc65_main
  44 n_004 .equ +7
  45 partbefore_005 .equ -1
  46 partafter_006 .equ -3
  60 part_008 .equ +7
  61 hundredsdigit_009 .equ -1
  62 tenspart_010 .equ -3
  63 tensdigit_011 .equ -5
  64 onesdigit_012 .equ -7
  70 digit_014 .equ +7
  71 doones_013 .sub
  72 	phx.w
  73 	tsx.w
  75 	lda.w digit_014,X
  77 	cmp.w #1
  78 	bne L_017
  79 L_016
  80 	psh.w #S_018
  81 	psh.w #0
  82 	psh.w #4
  83 	jsr _swrite
  84 	adj #6
  85 	jmp L_015
  86 L_017
  88 	cmp.w #2
  89 	bne L_020
  90 L_019
  91 	psh.w #S_021
  92 	psh.w #0
  93 	psh.w #4
  94 	jsr _swrite
  95 	adj #6
  96 	jmp L_015
  97 L_020
  99 	cmp.w #3
 100 	bne L_023
 101 L_022
 102 	psh.w #S_024
 103 	psh.w #0
 104 	psh.w #6
 105 	jsr _swrite
 106 	adj #6
 107 	jmp L_015
 108 L_023
 110 	cmp.w #4
 111 	bne L_026
 112 L_025
 113 	psh.w #S_027
 114 	psh.w #0
 115 	psh.w #5
 116 	jsr _swrite
 117 	adj #6
 118 	jmp L_015
 119 L_026
 121 	cmp.w #5
 122 	bne L_029
 123 L_028
 124 	psh.w #S_030
 125 	psh.w #0
 126 	psh.w #5
 127 	jsr _swrite
 128 	adj #6
 129 	jmp L_015
 130 L_029
 132 	cmp.w #6
 133 	bne L_032
 134 L_031
 135 	psh.w #S_033
 136 	psh.w #0
 137 	psh.w #4
 138 	jsr _swrite
 139 	adj #6
 140 	jmp L_015
 141 L_032
 143 	cmp.w #7
 144 	bne L_035
 145 L_034
 146 	psh.w #S_036
 147 	psh.w #0
 148 	psh.w #6
 149 	jsr _swrite
 150 	adj #6
 151 	jmp L_015
 152 L_035
 154 	cmp.w #8
 155 	bne L_038
 156 L_037
 157 	psh.w #S_039
 158 	psh.w #0
 159 	psh.w #6
 160 	jsr _swrite
 161 	adj #6
 162 	jmp L_015
 163 L_038
 165 	cmp.w #9
 166 	bne L_041
 167 L_040
 168 	psh.w #S_042
 169 	psh.w #0
 170 	psh.w #5
 171 	jsr _swrite
 172 	adj #6
 173 	jmp L_015
 174 L_041
 176 L_015
 178 	txs.w
 179 	plx.w
 180 	rts
 181 	.end doones_013
 190 teens_044 .equ +7
 191 doteens_043 .sub
 192 	phx.w
 193 	tsx.w
 195 	lda.w teens_044,X
 197 	cmp.w #10
 198 	bne L_047
 199 L_046
 200 	psh.w #S_048
 201 	psh.w #0
 202 	psh.w #4
 203 	jsr _swrite
 204 	adj #6
 205 	jmp L_045
 206 L_047
 208 	cmp.w #11
 209 	bne L_050
 210 L_049
 211 	psh.w #S_051
 212 	psh.w #0
 213 	psh.w #7
 214 	jsr _swrite
 215 	adj #6
 216 	jmp L_045
 217 L_050
 219 	cmp.w #12
 220 	bne L_053
 221 L_052
 222 	psh.w #S_054
 223 	psh.w #0
 224 	psh.w #7
 225 	jsr _swrite
 226 	adj #6
 227 	jmp L_045
 228 L_053
 230 	cmp.w #13
 231 	bne L_056
 232 L_055
 233 	psh.w #S_057
 234 	psh.w #0
 235 	psh.w #9
 236 	jsr _swrite
 237 	adj #6
 238 	jmp L_045
 239 L_056
 241 	cmp.w #14
 242 	bne L_059
 243 L_058
 244 	psh.w #S_060
 245 	psh.w #0
 246 	psh.w #9
 247 	jsr _swrite
 248 	adj #6
 249 	jmp L_045
 250 L_059
 252 	cmp.w #15
 253 	bne L_062
 254 L_061
 255 	psh.w #S_063
 256 	psh.w #0
 257 	psh.w #8
 258 	jsr _swrite
 259 	adj #6
 260 	jmp L_045
 261 L_062
 263 	cmp.w #16
 264 	bne L_065
 265 L_064
 266 	psh.w #S_066
 267 	psh.w #0
 268 	psh.w #8
 269 	jsr _swrite
 270 	adj #6
 271 	jmp L_045
 272 L_065
 274 	cmp.w #17
 275 	bne L_068
 276 L_067
 277 	psh.w #S_069
 278 	psh.w #0
 279 	psh.w #10
 280 	jsr _swrite
 281 	adj #6
 282 	jmp L_045
 283 L_068
 285 	cmp.w #18
 286 	bne L_071
 287 L_070
 288 	psh.w #S_072
 289 	psh.w #0
 290 	psh.w #9
 291 	jsr _swrite
 292 	adj #6
 293 	jmp L_045
 294 L_071
 296 	cmp.w #19
 297 	bne L_074
 298 L_073
 299 	psh.w #S_075
 300 	psh.w #0
 301 	psh.w #9
 302 	jsr _swrite
 303 	adj #6
 304 	jmp L_045
 305 L_074
 307 L_045
 309 	txs.w
 310 	plx.w
 311 	rts
 312 	.end doteens_043
 321 digit_077 .equ +7
 322 dotens_076 .sub
 323 	phx.w
 324 	tsx.w
 326 	lda.w digit_077,X
 328 	cmp.w #2
 329 	bne L_080
 330 L_079
 331 	psh.w #S_081
 332 	psh.w #0
 333 	psh.w #7
 334 	jsr _swrite
 335 	adj #6
 336 	jmp L_078
 337 L_080
 339 	cmp.w #3
 340 	bne L_083
 341 L_082
 342 	psh.w #S_084
 343 	psh.w #0
 344 	psh.w #7
 345 	jsr _swrite
 346 	adj #6
 347 	jmp L_078
 348 L_083
 350 	cmp.w #4
 351 	bne L_086
 352 L_085
 353 	psh.w #S_087
 354 	psh.w #0
 355 	psh.w #6
 356 	jsr _swrite
 357 	adj #6
 358 	jmp L_078
 359 L_086
 361 	cmp.w #5
 362 	bne L_089
 363 L_088
 364 	psh.w #S_090
 365 	psh.w #0
 366 	psh.w #6
 367 	jsr _swrite
 368 	adj #6
 369 	jmp L_078
 370 L_089
 372 	cmp.w #6
 373 	bne L_092
 374 L_091
 375 	psh.w #S_093
 376 	psh.w #0
 377 	psh.w #6
 378 	jsr _swrite
 379 	adj #6
 380 	jmp L_078
 381 L_092
 383 	cmp.w #7
 384 	bne L_095
 385 L_094
 386 	psh.w #S_096
 387 	psh.w #0
 388 	psh.w #8
 389 	jsr _swrite
 390 	adj #6
 391 	jmp L_078
 392 L_095
 394 	cmp.w #8
 395 	bne L_098
 396 L_097
 397 	psh.w #S_099
 398 	psh.w #0
 399 	psh.w #7
 400 	jsr _swrite
 401 	adj #6
 402 	jmp L_078
 403 L_098
 405 	cmp.w #9
 406 	bne L_101
 407 L_100
 408 	psh.w #S_102
 409 	psh.w #0
 410 	psh.w #7
 411 	jsr _swrite
 412 	adj #6
 413 	jmp L_078
 414 L_101
 416 L_078
 418 	txs.w
 419 	plx.w
 420 	rts
 421 	.end dotens_076
 424 dopart_007 .sub
 425 	phx.w
 426 	tsx.w
 427 	adj #-8
 431 	lda.w part_008,X
 432 	pha.w
 433 	lda #100
 434 	pha.w
 435 	jsr _idiv
 436 	adj #4
 437 	sta.w hundredsdigit_009,X
 439 	lda.w part_008,X
 440 	pha.w
 441 	lda #100
 442 	pha.w
 443 	jsr _idiv
 444 	adj #4
 445 	swp a
 446 	sta.w tenspart_010,X
 450 	lda.w hundredsdigit_009,X
 451 	pha.w
 452 	lda #0
 453 	xma.w 1,S
 454 	cmp.w 1,S
 455 	adj #2
 456 	php
 457 	lda #1
 458 	plp
 459 	bgt L_105
 460 	lda #0
 461 L_105
 462 	cmp.w #1
 463 	beq L_103
 464 	jmp L_104
 465 L_103
 467 	lda.w hundredsdigit_009,X
 468 	pha.w
 469 	phx.w
 470 	jsr doones_013
 471 	adj #4
 473 	psh.w #S_106
 474 	psh.w #0
 475 	psh.w #8
 476 	jsr _swrite
 477 	adj #6
 479 L_104
 483 	lda.w tenspart_010,X
 484 	pha.w
 485 	lda #10
 486 	xma.w 1,S
 487 	cmp.w 1,S
 488 	adj #2
 489 	php
 490 	lda #1
 491 	plp
 492 	bge L_109
 493 	lda #0
 494 L_109
 495 	pha.w
 496 	lda.w tenspart_010,X
 497 	pha.w
 498 	lda #19
 499 	xma.w 1,S
 500 	cmp.w 1,S
 501 	adj #2
 502 	php
 503 	lda #1
 504 	plp
 505 	ble L_110
 506 	lda #0
 507 L_110
 508 	and.w 1,S
 509 	adj #2
 510 	cmp.w #1
 511 	beq L_107
 512 	jmp L_108
 513 L_107
 515 	lda.w tenspart_010,X
 516 	pha.w
 517 	phx.w
 518 	jsr doteens_043
 519 	adj #4
 522 	jmp L_111
 523 L_108
 525 	lda.w tenspart_010,X
 526 	pha.w
 527 	lda #10
 528 	pha.w
 529 	jsr _idiv
 530 	adj #4
 531 	sta.w tensdigit_011,X
 533 	lda.w tenspart_010,X
 534 	pha.w
 535 	lda #10
 536 	pha.w
 537 	jsr _idiv
 538 	adj #4
 539 	swp a
 540 	sta.w onesdigit_012,X
 543 	lda.w tensdigit_011,X
 544 	pha.w
 545 	lda #0
 546 	xma.w 1,S
 547 	cmp.w 1,S
 548 	adj #2
 549 	php
 550 	lda #1
 551 	plp
 552 	bgt L_114
 553 	lda #0
 554 L_114
 555 	cmp.w #1
 556 	beq L_112
 557 	jmp L_113
 558 L_112
 559 	lda.w tensdigit_011,X
 560 	pha.w
 561 	phx.w
 562 	jsr dotens_076
 563 	adj #4
 564 L_113
 566 	lda.w onesdigit_012,X
 567 	pha.w
 568 	lda #0
 569 	xma.w 1,S
 570 	cmp.w 1,S
 571 	adj #2
 572 	php
 573 	lda #1
 574 	plp
 575 	bgt L_117
 576 	lda #0
 577 L_117
 578 	cmp.w #1
 579 	beq L_115
 580 	jmp L_116
 581 L_115
 582 	lda.w onesdigit_012,X
 583 	pha.w
 584 	phx.w
 585 	jsr doones_013
 586 	adj #4
 587 L_116
 589 L_111
 591 	txs.w
 592 	plx.w
 593 	rts
 594 	.end dopart_007
 597 translate_003 .sub
 598 	phx.w
 599 	tsx.w
 600 	adj #-4
 604 	lda.w n_004,X
 605 	pha.w
 606 	lda.w #1000
 607 	pha.w
 608 	jsr _idiv
 609 	adj #4
 610 	sta.w partbefore_005,X
 612 	lda.w n_004,X
 613 	pha.w
 614 	lda.w #1000
 615 	pha.w
 616 	jsr _idiv
 617 	adj #4
 618 	swp a
 619 	sta.w partafter_006,X
 622 	lda.w partbefore_005,X
 623 	pha.w
 624 	lda #0
 625 	xma.w 1,S
 626 	cmp.w 1,S
 627 	adj #2
 628 	php
 629 	lda #1
 630 	plp
 631 	bgt L_120
 632 	lda #0
 633 L_120
 634 	cmp.w #1
 635 	beq L_118
 636 	jmp L_119
 637 L_118
 639 	lda.w partbefore_005,X
 640 	pha.w
 641 	phx.w
 642 	jsr dopart_007
 643 	adj #4
 645 	psh.w #S_121
 646 	psh.w #0
 647 	psh.w #9
 648 	jsr _swrite
 649 	adj #6
 651 L_119
 654 	lda.w partafter_006,X
 655 	pha.w
 656 	lda #0
 657 	xma.w 1,S
 658 	cmp.w 1,S
 659 	adj #2
 660 	php
 661 	lda #1
 662 	plp
 663 	bgt L_124
 664 	lda #0
 665 L_124
 666 	cmp.w #1
 667 	beq L_122
 668 	jmp L_123
 669 L_122
 670 	lda.w partafter_006,X
 671 	pha.w
 672 	phx.w
 673 	jsr dopart_007
 674 	adj #4
 675 L_123
 677 	txs.w
 678 	plx.w
 679 	rts
 680 	.end translate_003
 684 _pc65_main .sub
 685 	phx.w
 686 	tsx.w
 690 L_125
 692 	psh.w #number_002
 693 	jsr _iread
 694 	pli.s
 695 	sta.w 0,I++
 697 	lda.w number_002
 698 	pha.w
 699 	lda #6
 700 	pha.w
 701 	jsr _iwrite
 702 	adj #4
 703 	psh.w #S_127
 704 	psh.w #0
 705 	psh.w #2
 706 	jsr _swrite
 707 	adj #6
 710 	lda.w number_002
 711 	pha.w
 712 	lda #0
 713 	xma.w 1,S
 714 	cmp.w 1,S
 715 	adj #2
 716 	php
 717 	lda #1
 718 	plp
 719 	blt L_130
 720 	lda #0
 721 L_130
 722 	cmp.w #1
 723 	beq L_128
 724 	jmp L_129
 725 L_128
 727 	psh.w #S_131
 728 	psh.w #0
 729 	psh.w #26
 730 	jsr _swrite
 731 	adj #6
 734 	jmp L_132
 735 L_129
 736 	lda.w number_002
 737 	pha.w
 738 	lda.w #30000
 739 	xma.w 1,S
 740 	cmp.w 1,S
 741 	adj #2
 742 	php
 743 	lda #1
 744 	plp
 745 	bgt L_135
 746 	lda #0
 747 L_135
 748 	cmp.w #1
 749 	beq L_133
 750 	jmp L_134
 751 L_133
 753 	psh.w #S_136
 754 	psh.w #0
 755 	psh.w #25
 756 	jsr _swrite
 757 	adj #6
 758 	lda.w #30000
 759 	pha.w
 760 	lda #1
 761 	pha.w
 762 	jsr _iwrite
 763 	adj #4
 766 	jmp L_137
 767 L_134
 768 	lda.w number_002
 769 	pha.w
 770 	lda #0
 771 	xma.w 1,S
 772 	cmp.w 1,S
 773 	adj #2
 774 	php
 775 	lda #1
 776 	plp
 777 	beq L_140
 778 	lda #0
 779 L_140
 780 	cmp.w #1
 781 	beq L_138
 782 	jmp L_139
 783 L_138
 785 	psh.w #S_141
 786 	psh.w #0
 787 	psh.w #5
 788 	jsr _swrite
 789 	adj #6
 792 	jmp L_142
 793 L_139
 795 	lda.w number_002
 796 	pha.w
 797 	phx.w
 798 	jsr translate_003
 799 	adj #4
 801 L_142
 802 L_137
 803 L_132
 806 	jsr _writeln
 808 	lda.w number_002
 809 	pha.w
 810 	lda #0
 811 	xma.w 1,S
 812 	cmp.w 1,S
 813 	adj #2
 814 	php
 815 	lda #1
 816 	plp
 817 	beq L_143
 818 	lda #0
 819 L_143
 820 	cmp.w #1
 821 	beq L_126
 822 	jmp L_125
 823 L_126
 825 	plx.w
 826 	rts
 827 	.end _pc65_main
 832             .cod
 834 _Q          .equ    5
 835 _D          .equ    3
 837 _idiv       .proc
 838             lda #0          ; clear remainder (A)
 839             dup a           ; push
 840             lda.w _Q,S      ; load dividend (Q)
 841             ldy #16         ; bit counter
 843 _idiv_Lp
 844             clc
 845             asl.w a         ; shift AQ left
 846             swp a
 847             rol.w a
 849             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
 851 _idiv_Minus
 852             sec
 853             sbc.w _D,S      ; subtract divisor (D)
 855             bra _idiv_Next
 857 _idiv_Plus
 858             clc
 859             adc.w _D,S      ; add divisor (D)
 861 _idiv_Next
 862             swp a           ; restore order of Acc stack {Q, A, -}
 863             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
 864             inc.w a
 866 _idiv_Dec
 867             dey             ; loop until loop counter == 0
 868             bne _idiv_Lp
 870 _idiv_Exit
 871             swp a           ; Test remainder
 872             ora.w #0
 873             bpl _idiv_Finish
 874             clc
 875             adc.w 3,S
 876 _idiv_Finish
 877             swp a
 879             rts
 881             .endp _idiv
 886             .cod
 888 _M          .equ    5
 889 _R          .equ    3
 891 _imul       .proc
 892             ldy #16             ; y = bit count
 893             lda #0              ; A = { 0,  x,  x} - clear product
 894             dup a               ; A = { 0,  0,  x}
 895             dup a               ; A = { 0,  0,  0}
 896             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
 897             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
 898             ora.w #0            ; set N flag if msb ATOS == 1
 899             clc                 ; initialize Booth recoding bit
 900             rot a               ; A = {PH, PL, `R}
 902             bra _imul_TstB
 904 _imul_Lp
 905             asl.w a             ; A = {`R << 1, PH, PL}
 906             rot a               ; A = {PH, PL, `R}
 907 _imul_TstB
 908             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
 910 _imul_AddShft
 911             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
 912 _imul_AddM
 913             clc
 914             adc.w _M,S          ; PH += M
 915             bra _imul_ShftP
 917 _imul_SubShft
 918             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
 919 _imul_SubM
 920             sec
 921             sbc.w _M,S          ; PH -= M
 923 _imul_ShftP
 924             asr.w a             ; A = {PH >> 1, PL, `R}
 925             rot a               ; A = {PL, `R, PH}
 926             ror.w a             ; A = {PL >> 2, `R, PH}
 927             rot a               ; A = {`R, PH, PL}
 929 _imul_Dec
 930             dey
 931             bne _imul_Lp
 933 _imul_Exit
 934             rot a               ; A = {PH, PL, `R}
 935             swp a               ; A = {PL, PH, `R}
 937             rts
 939             .endp _imul
 944             .cod
 946 _newLine    .equ    0x0A
 947 _putChar    .equ    0xF001
 949 _writeln    .proc
 950             lda #_newLine
 951             sta _putChar
 953             rts
 955             .endp _writeln
 959             .cod
 961 _sPtrOff    .equ    7
 962 _sLenOff    .equ    3
 964 _swrite     .proc
 965             ldy.w _sLenOff,S        ; load string length
 966             lda.w _sPtrOff,S        ; load string pointer
 967             tai                     ; transfer sptr to IP
 969 _swrite_Lp
 970             lda 0,I++               ; load char from strig
 971             sta _putChar            ; write char to output
 973             dey.w                   ; loop while string length <> 0
 974             bne _swrite_Lp
 976             rts
 978             .endp _swrite
 982             .cod
 984 _iValOff    .equ    7
 985 _fLenOff    .equ    5
 986 _iCntOff    .equ    -1
 988 _iwrite     .proc
 989             phx.w                   ; save current base pointer
 990             tsx.w                   ; assign new base pointer
 992             lda _fLenOff,X          ; load field width specifier
 993             cmp #5                  ; compare against max integer digit count
 994             ble _iwrite_SetCnt
 995             lda #5
 997 _iwrite_SetCnt
 998             pha.w                   ; set iteration count to fld width
 999             lda.w _iValOff,X        ; load a with integer value
1001 _iwrite_Lp
1002             pha.w                   ; push dividend argument to _idiv
1003             psh.w #10               ; push divisor argument to _idiv
1004             csr _idiv               ; determine the remainder,
1005             adj #4                  ; remove arguments passed to _idiv from stk
1006             swp a                   ; put the remainder into ATOS
1008             clc                     ; convert remainder into ASCII character
1009             adc #48
1010             pha                     ; push LS digit of integer onto stack
1012             rot a                   ; rotate quotient into ATOS position
1014             dec.w _iCntOff,X        ; decrement digit iteration count
1015             bne _iwrite_Lp
1017             dup a                   ; save integer part of the conversion
1019 _iwrite_Fill
1020             lda _fLenOff,X          ; load field width specifier
1021             cmp #5                  ; compare against max integer digit count
1022             ble _iwrite_GenPtr
1023             sec                     ; subtract max integer length from fld len
1024             sbc #5
1025             tay                     ; set difference as loop counter
1026             lda #48                 ; fill remaining field with '0'
1028 _iwrite_Fill_Lp                     ; increase string on stack with fill data
1029             pha
1030             dey
1031             bne _iwrite_Fill_Lp
1033 _iwrite_GenPtr
1034             tsa.w                   ; transfer current stk pointer to A
1035             inc.w a                 ; remove stack pointer write bias
1036             pha.w                   ; push string pointer to stack
1038             rot a                   ; restore integer part of the conversion
1040             cmp.w #0                ; test for 0. If not 0, int > 10^fld
1041             beq _iwrite_Sup0
1042             ldy #0
1043 _iwrite_ErrLp
1044             lda #0x2A               ; fill integer field with '*'
1045             sta (1,S),Y
1046             iny
1047             cmp.y _fLenOff,X
1048             bne _iwrite_ErrLp
1049             bra _iwrite_Exit
1051 _iwrite_Sup0
1052             ldy #0                  ; initialize string index
1053 _iwrite_Sup0_Lp
1054             lda (1,S),Y
1055             cmp #48                 ; if leading position == 0, replace with ' '
1056             bne _iwrite_Exit        ; exit loop on first non-0 digit
1057             lda #32                 ; replace leading 0 with ' '
1058             sta (1,S),Y
1059             iny                     ; increment string index and compare to fLen
1060             cmp.y _fLenOff,X
1061             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
1063 _iwrite_Exit
1064             psh.w #0                ; NULL argument
1065             lda _fLenOff,X          ; push field width specifier
1066             pha.w
1067             csr _swrite             ; write integer value string using _swrite()
1068             adj #6                  ; remove parameters to _swrite() from stack
1070             txs.w                   ; deallocate stack variables
1071             plx.w                   ; restore previous base pointer
1072             rts
1074             .endp _iwrite
1075 	.dat
1077 S_141 .str " zero"
1078 S_136 .str " ***** Error -- number > "
1079 S_131 .str " ***** Error -- number < 0"
1080 S_127 .str " :"
1081 S_121 .str " thousand"
1082 S_106 .str " hundred"
1083 S_102 .str " ninety"
1084 S_099 .str " eighty"
1085 S_096 .str " seventy"
1086 S_093 .str " sixty"
1087 S_090 .str " fifty"
1088 S_087 .str " forty"
1089 S_084 .str " thirty"
1090 S_081 .str " twenty"
1091 S_075 .str " nineteen"
1092 S_072 .str " eighteen"
1093 S_069 .str " seventeen"
1094 S_066 .str " sixteen"
1095 S_063 .str " fifteen"
1096 S_060 .str " fourteen"
1097 S_057 .str " thirteen"
1098 S_054 .str " twelve"
1099 S_051 .str " eleven"
1100 S_048 .str " ten"
1101 S_042 .str " nine"
1102 S_039 .str " eight"
1103 S_036 .str " seven"
1104 S_033 .str " six"
1105 S_030 .str " five"
1106 S_027 .str " four"
1107 S_024 .str " three"
1108 S_021 .str " two"
1109 S_018 .str " one"
1110 _bss_start .byt 0
1111 number_002 .wrd 0
1112 _bss_end .byt 0
1113 _stk .byt 0[1023]
1114 _stk_top .byt -1
1116 	.end
