(   1)                  ; ;    1: PROGRAM NumberTranslator (input, output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA2850D    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9C8209      ; 	stz _bss_start
(  11) 0209 ABA28209    ; 	ldx.w #_bss_start
(  12) 020D ABA08309    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9850D    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE98209    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4C9A06      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: {   Translate a list of integers from numeric form into
(  20)                  ; ;    4:     words.  The integers must not be negative nor be
(  21)                  ; ;    5:     greater than the value of maxnumber.  The last
(  22)                  ; ;    6:     integer in the list has the value of terminator.
(  23)                  ; ;    7: }
(  24)                  ; ;    8: 
(  25)                  ; ;    9: CONST
(  26)                  ; ;   10:     maxnumber  = 30000; {maximum allowable number}
(  27)                  ; ;   11:     terminator = 0;     {last number in list}
(  28)                  ; ;   12: 
(  29)                  ; ;   13: VAR
(  30)                  ; ;   14:     number : integer;   {number to be translated}
(  31)                  ; ;   15: 
(  32)                  ; ;   16: 
(  33)                  ; ;   17:     PROCEDURE Translate (n : integer);
(  34)                  ; ;   18: 
(  35)                  ; ;   19:         {Translate number n into words.}
(  36)                  ; ;   20: 
(  37)                  ; ;   21:         VAR
(  38)                  ; ;   22:             partbefore,     {part before the comma}
(  39)                  ; ;   23:             partafter       {part after the comma}
(  40)                  ; ;   24:              : integer;
(  41)                  ; ;   25: 
(  42)                  ; ;   26: 
(  43)                  ; ;   27:         PROCEDURE DoPart (part : integer);
(  44)                  ; n_004 .equ +7
(  45)                  ; partbefore_005 .equ -1
(  46)                  ; partafter_006 .equ -3
(  47)                  ; ;   28: 
(  48)                  ; ;   29:         {Translate a part of a number into words,
(  49)                  ; ;   30:          where 1 <= part <= 999.}
(  50)                  ; ;   31: 
(  51)                  ; ;   32:         VAR
(  52)                  ; ;   33:             hundredsdigit,  {hundreds digit 0..9}
(  53)                  ; ;   34:             tenspart,           {tens part 0..99}
(  54)                  ; ;   35:             tensdigit,          {tens digit 0..9}
(  55)                  ; ;   36:             onesdigit           {ones digit 0..9}
(  56)                  ; ;   37:             : integer;
(  57)                  ; ;   38: 
(  58)                  ; ;   39: 
(  59)                  ; ;   40:             PROCEDURE DoOnes (digit : integer);
(  60)                  ; part_008 .equ +7
(  61)                  ; hundredsdigit_009 .equ -1
(  62)                  ; tenspart_010 .equ -3
(  63)                  ; tensdigit_011 .equ -5
(  64)                  ; onesdigit_012 .equ -7
(  65)                  ; ;   41: 
(  66)                  ; ;   42:             {Translate a single ones digit into a word,
(  67)                  ; ;   43:              where 1 <= digit <= 9.}
(  68)                  ; ;   44: 
(  69)                  ; ;   45:             BEGIN
(  70)                  ; digit_014 .equ +7
(  71)                  ; doones_013 .sub
(  72) 021F ABDA        ; 	phx.w
(  73) 0221 ABBA        ; 	tsx.w
(  74)                  ; ;   46:                 CASE digit OF
(  75) 0223 ABB507      ; 	lda.w digit_014,X
(  76)                  ; ;   47:                     1:  write (' one');
(  77) 0226 ABC90100    ; 	cmp.w #1
(  78) 022A D014        ; 	bne L_017
(  79)                  ; L_016
(  80) 022C ABE27E09    ; 	psh.w #S_018
(  81) 0230 ABE20000    ; 	psh.w #0
(  82) 0234 ABE20400    ; 	psh.w #4
(  83) 0238 20F307      ; 	jsr _swrite
(  84) 023B C206        ; 	adj #6
(  85) 023D 4C1003      ; 	jmp L_015
(  86)                  ; L_017
(  87)                  ; ;   48:                     2:  write (' two');
(  88) 0240 ABC90200    ; 	cmp.w #2
(  89) 0244 D014        ; 	bne L_020
(  90)                  ; L_019
(  91) 0246 ABE27A09    ; 	psh.w #S_021
(  92) 024A ABE20000    ; 	psh.w #0
(  93) 024E ABE20400    ; 	psh.w #4
(  94) 0252 20F307      ; 	jsr _swrite
(  95) 0255 C206        ; 	adj #6
(  96) 0257 4C1003      ; 	jmp L_015
(  97)                  ; L_020
(  98)                  ; ;   49:                     3:  write (' three');
(  99) 025A ABC90300    ; 	cmp.w #3
( 100) 025E D014        ; 	bne L_023
( 101)                  ; L_022
( 102) 0260 ABE27409    ; 	psh.w #S_024
( 103) 0264 ABE20000    ; 	psh.w #0
( 104) 0268 ABE20600    ; 	psh.w #6
( 105) 026C 20F307      ; 	jsr _swrite
( 106) 026F C206        ; 	adj #6
( 107) 0271 4C1003      ; 	jmp L_015
( 108)                  ; L_023
( 109)                  ; ;   50:                     4:  write (' four');
( 110) 0274 ABC90400    ; 	cmp.w #4
( 111) 0278 D014        ; 	bne L_026
( 112)                  ; L_025
( 113) 027A ABE26F09    ; 	psh.w #S_027
( 114) 027E ABE20000    ; 	psh.w #0
( 115) 0282 ABE20500    ; 	psh.w #5
( 116) 0286 20F307      ; 	jsr _swrite
( 117) 0289 C206        ; 	adj #6
( 118) 028B 4C1003      ; 	jmp L_015
( 119)                  ; L_026
( 120)                  ; ;   51:                     5:  write (' five');
( 121) 028E ABC90500    ; 	cmp.w #5
( 122) 0292 D014        ; 	bne L_029
( 123)                  ; L_028
( 124) 0294 ABE26A09    ; 	psh.w #S_030
( 125) 0298 ABE20000    ; 	psh.w #0
( 126) 029C ABE20500    ; 	psh.w #5
( 127) 02A0 20F307      ; 	jsr _swrite
( 128) 02A3 C206        ; 	adj #6
( 129) 02A5 4C1003      ; 	jmp L_015
( 130)                  ; L_029
( 131)                  ; ;   52:                     6:  write (' six');
( 132) 02A8 ABC90600    ; 	cmp.w #6
( 133) 02AC D014        ; 	bne L_032
( 134)                  ; L_031
( 135) 02AE ABE26609    ; 	psh.w #S_033
( 136) 02B2 ABE20000    ; 	psh.w #0
( 137) 02B6 ABE20400    ; 	psh.w #4
( 138) 02BA 20F307      ; 	jsr _swrite
( 139) 02BD C206        ; 	adj #6
( 140) 02BF 4C1003      ; 	jmp L_015
( 141)                  ; L_032
( 142)                  ; ;   53:                     7:  write (' seven');
( 143) 02C2 ABC90700    ; 	cmp.w #7
( 144) 02C6 D014        ; 	bne L_035
( 145)                  ; L_034
( 146) 02C8 ABE26009    ; 	psh.w #S_036
( 147) 02CC ABE20000    ; 	psh.w #0
( 148) 02D0 ABE20600    ; 	psh.w #6
( 149) 02D4 20F307      ; 	jsr _swrite
( 150) 02D7 C206        ; 	adj #6
( 151) 02D9 4C1003      ; 	jmp L_015
( 152)                  ; L_035
( 153)                  ; ;   54:                     8:  write (' eight');
( 154) 02DC ABC90800    ; 	cmp.w #8
( 155) 02E0 D014        ; 	bne L_038
( 156)                  ; L_037
( 157) 02E2 ABE25A09    ; 	psh.w #S_039
( 158) 02E6 ABE20000    ; 	psh.w #0
( 159) 02EA ABE20600    ; 	psh.w #6
( 160) 02EE 20F307      ; 	jsr _swrite
( 161) 02F1 C206        ; 	adj #6
( 162) 02F3 4C1003      ; 	jmp L_015
( 163)                  ; L_038
( 164)                  ; ;   55:                     9:  write (' nine');
( 165) 02F6 ABC90900    ; 	cmp.w #9
( 166) 02FA D014        ; 	bne L_041
( 167)                  ; L_040
( 168) 02FC ABE25509    ; 	psh.w #S_042
( 169) 0300 ABE20000    ; 	psh.w #0
( 170) 0304 ABE20500    ; 	psh.w #5
( 171) 0308 20F307      ; 	jsr _swrite
( 172) 030B C206        ; 	adj #6
( 173) 030D 4C1003      ; 	jmp L_015
( 174)                  ; L_041
( 175)                  ; ;   56:                 END;
( 176)                  ; L_015
( 177)                  ; ;   57:             END {DoOnes};
( 178) 0310 AB9A        ; 	txs.w
( 179) 0312 ABFA        ; 	plx.w
( 180) 0314 60          ; 	rts
( 181)                  ; 	.end doones_013
( 182)                  ; ;   58: 
( 183)                  ; ;   59: 
( 184)                  ; ;   60:             PROCEDURE DoTeens (teens : integer);
( 185)                  ; ;   61: 
( 186)                  ; ;   62:             {Translate the teens into a word,
( 187)                  ; ;   63:              where 10 <= teens <= 19.}
( 188)                  ; ;   64: 
( 189)                  ; ;   65:             BEGIN
( 190)                  ; teens_044 .equ +7
( 191)                  ; doteens_043 .sub
( 192) 0315 ABDA        ; 	phx.w
( 193) 0317 ABBA        ; 	tsx.w
( 194)                  ; ;   66:                 CASE teens OF
( 195) 0319 ABB507      ; 	lda.w teens_044,X
( 196)                  ; ;   67:                     10:  write (' ten');
( 197) 031C ABC90A00    ; 	cmp.w #10
( 198) 0320 D014        ; 	bne L_047
( 199)                  ; L_046
( 200) 0322 ABE25109    ; 	psh.w #S_048
( 201) 0326 ABE20000    ; 	psh.w #0
( 202) 032A ABE20400    ; 	psh.w #4
( 203) 032E 20F307      ; 	jsr _swrite
( 204) 0331 C206        ; 	adj #6
( 205) 0333 4C2004      ; 	jmp L_045
( 206)                  ; L_047
( 207)                  ; ;   68:                     11:  write (' eleven');
( 208) 0336 ABC90B00    ; 	cmp.w #11
( 209) 033A D014        ; 	bne L_050
( 210)                  ; L_049
( 211) 033C ABE24A09    ; 	psh.w #S_051
( 212) 0340 ABE20000    ; 	psh.w #0
( 213) 0344 ABE20700    ; 	psh.w #7
( 214) 0348 20F307      ; 	jsr _swrite
( 215) 034B C206        ; 	adj #6
( 216) 034D 4C2004      ; 	jmp L_045
( 217)                  ; L_050
( 218)                  ; ;   69:                     12:  write (' twelve');
( 219) 0350 ABC90C00    ; 	cmp.w #12
( 220) 0354 D014        ; 	bne L_053
( 221)                  ; L_052
( 222) 0356 ABE24309    ; 	psh.w #S_054
( 223) 035A ABE20000    ; 	psh.w #0
( 224) 035E ABE20700    ; 	psh.w #7
( 225) 0362 20F307      ; 	jsr _swrite
( 226) 0365 C206        ; 	adj #6
( 227) 0367 4C2004      ; 	jmp L_045
( 228)                  ; L_053
( 229)                  ; ;   70:                     13:  write (' thirteen');
( 230) 036A ABC90D00    ; 	cmp.w #13
( 231) 036E D014        ; 	bne L_056
( 232)                  ; L_055
( 233) 0370 ABE23A09    ; 	psh.w #S_057
( 234) 0374 ABE20000    ; 	psh.w #0
( 235) 0378 ABE20900    ; 	psh.w #9
( 236) 037C 20F307      ; 	jsr _swrite
( 237) 037F C206        ; 	adj #6
( 238) 0381 4C2004      ; 	jmp L_045
( 239)                  ; L_056
( 240)                  ; ;   71:                     14:  write (' fourteen');
( 241) 0384 ABC90E00    ; 	cmp.w #14
( 242) 0388 D014        ; 	bne L_059
( 243)                  ; L_058
( 244) 038A ABE23109    ; 	psh.w #S_060
( 245) 038E ABE20000    ; 	psh.w #0
( 246) 0392 ABE20900    ; 	psh.w #9
( 247) 0396 20F307      ; 	jsr _swrite
( 248) 0399 C206        ; 	adj #6
( 249) 039B 4C2004      ; 	jmp L_045
( 250)                  ; L_059
( 251)                  ; ;   72:                     15:  write (' fifteen');
( 252) 039E ABC90F00    ; 	cmp.w #15
( 253) 03A2 D014        ; 	bne L_062
( 254)                  ; L_061
( 255) 03A4 ABE22909    ; 	psh.w #S_063
( 256) 03A8 ABE20000    ; 	psh.w #0
( 257) 03AC ABE20800    ; 	psh.w #8
( 258) 03B0 20F307      ; 	jsr _swrite
( 259) 03B3 C206        ; 	adj #6
( 260) 03B5 4C2004      ; 	jmp L_045
( 261)                  ; L_062
( 262)                  ; ;   73:                     16:  write (' sixteen');
( 263) 03B8 ABC91000    ; 	cmp.w #16
( 264) 03BC D014        ; 	bne L_065
( 265)                  ; L_064
( 266) 03BE ABE22109    ; 	psh.w #S_066
( 267) 03C2 ABE20000    ; 	psh.w #0
( 268) 03C6 ABE20800    ; 	psh.w #8
( 269) 03CA 20F307      ; 	jsr _swrite
( 270) 03CD C206        ; 	adj #6
( 271) 03CF 4C2004      ; 	jmp L_045
( 272)                  ; L_065
( 273)                  ; ;   74:                     17:  write (' seventeen');
( 274) 03D2 ABC91100    ; 	cmp.w #17
( 275) 03D6 D014        ; 	bne L_068
( 276)                  ; L_067
( 277) 03D8 ABE21709    ; 	psh.w #S_069
( 278) 03DC ABE20000    ; 	psh.w #0
( 279) 03E0 ABE20A00    ; 	psh.w #10
( 280) 03E4 20F307      ; 	jsr _swrite
( 281) 03E7 C206        ; 	adj #6
( 282) 03E9 4C2004      ; 	jmp L_045
( 283)                  ; L_068
( 284)                  ; ;   75:                     18:  write (' eighteen');
( 285) 03EC ABC91200    ; 	cmp.w #18
( 286) 03F0 D014        ; 	bne L_071
( 287)                  ; L_070
( 288) 03F2 ABE20E09    ; 	psh.w #S_072
( 289) 03F6 ABE20000    ; 	psh.w #0
( 290) 03FA ABE20900    ; 	psh.w #9
( 291) 03FE 20F307      ; 	jsr _swrite
( 292) 0401 C206        ; 	adj #6
( 293) 0403 4C2004      ; 	jmp L_045
( 294)                  ; L_071
( 295)                  ; ;   76:                     19:  write (' nineteen');
( 296) 0406 ABC91300    ; 	cmp.w #19
( 297) 040A D014        ; 	bne L_074
( 298)                  ; L_073
( 299) 040C ABE20509    ; 	psh.w #S_075
( 300) 0410 ABE20000    ; 	psh.w #0
( 301) 0414 ABE20900    ; 	psh.w #9
( 302) 0418 20F307      ; 	jsr _swrite
( 303) 041B C206        ; 	adj #6
( 304) 041D 4C2004      ; 	jmp L_045
( 305)                  ; L_074
( 306)                  ; ;   77:                 END;
( 307)                  ; L_045
( 308)                  ; ;   78:             END {DoTeens};
( 309) 0420 AB9A        ; 	txs.w
( 310) 0422 ABFA        ; 	plx.w
( 311) 0424 60          ; 	rts
( 312)                  ; 	.end doteens_043
( 313)                  ; ;   79: 
( 314)                  ; ;   80: 
( 315)                  ; ;   81:             PROCEDURE DoTens (digit : integer);
( 316)                  ; ;   82: 
( 317)                  ; ;   83:                 {Translate a single tens digit into a word,
( 318)                  ; ;   84:                  where 2 <= digit <= 9.}
( 319)                  ; ;   85: 
( 320)                  ; ;   86:             BEGIN
( 321)                  ; digit_077 .equ +7
( 322)                  ; dotens_076 .sub
( 323) 0425 ABDA        ; 	phx.w
( 324) 0427 ABBA        ; 	tsx.w
( 325)                  ; ;   87:                 CASE digit OF
( 326) 0429 ABB507      ; 	lda.w digit_077,X
( 327)                  ; ;   88:                     2:  write (' twenty');
( 328) 042C ABC90200    ; 	cmp.w #2
( 329) 0430 D014        ; 	bne L_080
( 330)                  ; L_079
( 331) 0432 ABE2FE08    ; 	psh.w #S_081
( 332) 0436 ABE20000    ; 	psh.w #0
( 333) 043A ABE20700    ; 	psh.w #7
( 334) 043E 20F307      ; 	jsr _swrite
( 335) 0441 C206        ; 	adj #6
( 336) 0443 4CFC04      ; 	jmp L_078
( 337)                  ; L_080
( 338)                  ; ;   89:                     3:  write (' thirty');
( 339) 0446 ABC90300    ; 	cmp.w #3
( 340) 044A D014        ; 	bne L_083
( 341)                  ; L_082
( 342) 044C ABE2F708    ; 	psh.w #S_084
( 343) 0450 ABE20000    ; 	psh.w #0
( 344) 0454 ABE20700    ; 	psh.w #7
( 345) 0458 20F307      ; 	jsr _swrite
( 346) 045B C206        ; 	adj #6
( 347) 045D 4CFC04      ; 	jmp L_078
( 348)                  ; L_083
( 349)                  ; ;   90:                     4:  write (' forty');
( 350) 0460 ABC90400    ; 	cmp.w #4
( 351) 0464 D014        ; 	bne L_086
( 352)                  ; L_085
( 353) 0466 ABE2F108    ; 	psh.w #S_087
( 354) 046A ABE20000    ; 	psh.w #0
( 355) 046E ABE20600    ; 	psh.w #6
( 356) 0472 20F307      ; 	jsr _swrite
( 357) 0475 C206        ; 	adj #6
( 358) 0477 4CFC04      ; 	jmp L_078
( 359)                  ; L_086
( 360)                  ; ;   91:                     5:  write (' fifty');
( 361) 047A ABC90500    ; 	cmp.w #5
( 362) 047E D014        ; 	bne L_089
( 363)                  ; L_088
( 364) 0480 ABE2EB08    ; 	psh.w #S_090
( 365) 0484 ABE20000    ; 	psh.w #0
( 366) 0488 ABE20600    ; 	psh.w #6
( 367) 048C 20F307      ; 	jsr _swrite
( 368) 048F C206        ; 	adj #6
( 369) 0491 4CFC04      ; 	jmp L_078
( 370)                  ; L_089
( 371)                  ; ;   92:                     6:  write (' sixty');
( 372) 0494 ABC90600    ; 	cmp.w #6
( 373) 0498 D014        ; 	bne L_092
( 374)                  ; L_091
( 375) 049A ABE2E508    ; 	psh.w #S_093
( 376) 049E ABE20000    ; 	psh.w #0
( 377) 04A2 ABE20600    ; 	psh.w #6
( 378) 04A6 20F307      ; 	jsr _swrite
( 379) 04A9 C206        ; 	adj #6
( 380) 04AB 4CFC04      ; 	jmp L_078
( 381)                  ; L_092
( 382)                  ; ;   93:                     7:  write (' seventy');
( 383) 04AE ABC90700    ; 	cmp.w #7
( 384) 04B2 D014        ; 	bne L_095
( 385)                  ; L_094
( 386) 04B4 ABE2DD08    ; 	psh.w #S_096
( 387) 04B8 ABE20000    ; 	psh.w #0
( 388) 04BC ABE20800    ; 	psh.w #8
( 389) 04C0 20F307      ; 	jsr _swrite
( 390) 04C3 C206        ; 	adj #6
( 391) 04C5 4CFC04      ; 	jmp L_078
( 392)                  ; L_095
( 393)                  ; ;   94:                     8:  write (' eighty');
( 394) 04C8 ABC90800    ; 	cmp.w #8
( 395) 04CC D014        ; 	bne L_098
( 396)                  ; L_097
( 397) 04CE ABE2D608    ; 	psh.w #S_099
( 398) 04D2 ABE20000    ; 	psh.w #0
( 399) 04D6 ABE20700    ; 	psh.w #7
( 400) 04DA 20F307      ; 	jsr _swrite
( 401) 04DD C206        ; 	adj #6
( 402) 04DF 4CFC04      ; 	jmp L_078
( 403)                  ; L_098
( 404)                  ; ;   95:                     9:  write (' ninety');
( 405) 04E2 ABC90900    ; 	cmp.w #9
( 406) 04E6 D014        ; 	bne L_101
( 407)                  ; L_100
( 408) 04E8 ABE2CF08    ; 	psh.w #S_102
( 409) 04EC ABE20000    ; 	psh.w #0
( 410) 04F0 ABE20700    ; 	psh.w #7
( 411) 04F4 20F307      ; 	jsr _swrite
( 412) 04F7 C206        ; 	adj #6
( 413) 04F9 4CFC04      ; 	jmp L_078
( 414)                  ; L_101
( 415)                  ; ;   96:                 END;
( 416)                  ; L_078
( 417)                  ; ;   97:             END {DoTens};
( 418) 04FC AB9A        ; 	txs.w
( 419) 04FE ABFA        ; 	plx.w
( 420) 0500 60          ; 	rts
( 421)                  ; 	.end dotens_076
( 422)                  ; ;   98: 
( 423)                  ; ;   99:         BEGIN {DoPart}
( 424)                  ; dopart_007 .sub
( 425) 0501 ABDA        ; 	phx.w
( 426) 0503 ABBA        ; 	tsx.w
( 427) 0505 C2F8        ; 	adj #-8
( 428)                  ; ;  100: 
( 429)                  ; ;  101:             {Break up the number part.}
( 430)                  ; ;  102:             hundredsdigit := part DIV 100;
( 431) 0507 ABB507      ; 	lda.w part_008,X
( 432) 050A AB48        ; 	pha.w
( 433)                  ; 	lda #100
( 434) 050C ABE26400    ; 	psh.w #100
( 435) 0510 208C07      ; 	jsr _idiv
( 436) 0513 C204        ; 	adj #4
( 437) 0515 AB95FF      ; 	sta.w hundredsdigit_009,X
( 438)                  ; ;  103:             tenspart      := part MOD 100;
( 439) 0518 ABB507      ; 	lda.w part_008,X
( 440) 051B AB48        ; 	pha.w
( 441)                  ; 	lda #100
( 442) 051D ABE26400    ; 	psh.w #100
( 443) 0521 208C07      ; 	jsr _idiv
( 444) 0524 C204        ; 	adj #4
( 445) 0526 1B          ; 	swp a
( 446) 0527 AB95FD      ; 	sta.w tenspart_010,X
( 447)                  ; ;  104: 
( 448)                  ; ;  105:             {Translate the hundreds digit.}
( 449)                  ; ;  106:             IF hundredsdigit > 0 THEN BEGIN
( 450) 052A ABB5FF      ; 	lda.w hundredsdigit_009,X
( 451)                  ; 	pha.w
( 452)                  ; 	lda #0
( 453)                  ; 	xma.w 1,S
( 454) 052D ABC90000    ; 	cmp.w #0
( 455)                  ; 	adj #2
( 456) 0531 AB1004      ; 	bgt L_105T
( 457) 0534 A900        ; 	lda #0
( 458) 0536 8002        ; 	bra L_105
( 459) 0538 A901        ; L_105T lda #1
( 460)                  ; 	lda #0
( 461)                  ; L_105
( 462) 053A ABC90100    ; 	cmp.w #1
( 463) 053E F003        ; 	beq L_103
( 464) 0540 4C6005      ; 	jmp L_104
( 465)                  ; L_103
( 466)                  ; ;  107:                 DoOnes (hundredsdigit);
( 467) 0543 ABB5FF      ; 	lda.w hundredsdigit_009,X
( 468) 0546 AB48        ; 	pha.w
( 469) 0548 ABDA        ; 	phx.w
( 470) 054A 201F02      ; 	jsr doones_013
( 471) 054D C204        ; 	adj #4
( 472)                  ; ;  108:                 write (' hundred');
( 473) 054F ABE2C708    ; 	psh.w #S_106
( 474) 0553 ABE20000    ; 	psh.w #0
( 475) 0557 ABE20800    ; 	psh.w #8
( 476) 055B 20F307      ; 	jsr _swrite
( 477) 055E C206        ; 	adj #6
( 478)                  ; ;  109:             END;
( 479)                  ; L_104
( 480)                  ; ;  110: 
( 481)                  ; ;  111:             {Translate the tens part.}
( 482)                  ; ;  112:             IF  (tenspart >= 10) AND (tenspart <= 19) THEN BEGIN
( 483) 0560 ABB5FD      ; 	lda.w tenspart_010,X
( 484)                  ; 	pha.w
( 485)                  ; 	lda #10
( 486)                  ; 	xma.w 1,S
( 487) 0563 ABC90A00    ; 	cmp.w #10
( 488)                  ; 	adj #2
( 489) 0567 AB5004      ; 	bge L_109T
( 490) 056A A900        ; 	lda #0
( 491) 056C 8002        ; 	bra L_109
( 492) 056E A901        ; L_109T lda #1
( 493)                  ; 	lda #0
( 494)                  ; L_109
( 495) 0570 AB48        ; 	pha.w
( 496) 0572 ABB5FD      ; 	lda.w tenspart_010,X
( 497)                  ; 	pha.w
( 498)                  ; 	lda #19
( 499)                  ; 	xma.w 1,S
( 500) 0575 ABC91300    ; 	cmp.w #19
( 501)                  ; 	adj #2
( 502) 0579 AB3004      ; 	ble L_110T
( 503) 057C A900        ; 	lda #0
( 504) 057E 8002        ; 	bra L_110
( 505) 0580 A901        ; L_110T lda #1
( 506)                  ; 	lda #0
( 507)                  ; L_110
( 508) 0582 CB3501      ; 	and.w 1,S
( 509) 0585 C202        ; 	adj #2
( 510) 0587 ABC90100    ; 	cmp.w #1
( 511) 058B F003        ; 	beq L_107
( 512) 058D 4C9F05      ; 	jmp L_108
( 513)                  ; L_107
( 514)                  ; ;  113:                 DoTeens (tenspart);
( 515) 0590 ABB5FD      ; 	lda.w tenspart_010,X
( 516) 0593 AB48        ; 	pha.w
( 517) 0595 ABDA        ; 	phx.w
( 518) 0597 201503      ; 	jsr doteens_043
( 519) 059A C204        ; 	adj #4
( 520)                  ; ;  114:             END
( 521)                  ; ;  115:             ELSE BEGIN
( 522) 059C 4C0C06      ; 	jmp L_111
( 523)                  ; L_108
( 524)                  ; ;  116:                 tensdigit := tenspart DIV 10;
( 525) 059F ABB5FD      ; 	lda.w tenspart_010,X
( 526) 05A2 AB48        ; 	pha.w
( 527)                  ; 	lda #10
( 528) 05A4 ABE20A00    ; 	psh.w #10
( 529) 05A8 208C07      ; 	jsr _idiv
( 530) 05AB C204        ; 	adj #4
( 531) 05AD AB95FB      ; 	sta.w tensdigit_011,X
( 532)                  ; ;  117:                 onesdigit := tenspart MOD 10;
( 533) 05B0 ABB5FD      ; 	lda.w tenspart_010,X
( 534) 05B3 AB48        ; 	pha.w
( 535)                  ; 	lda #10
( 536) 05B5 ABE20A00    ; 	psh.w #10
( 537) 05B9 208C07      ; 	jsr _idiv
( 538) 05BC C204        ; 	adj #4
( 539) 05BE 1B          ; 	swp a
( 540) 05BF AB95F9      ; 	sta.w onesdigit_012,X
( 541)                  ; ;  118: 
( 542)                  ; ;  119:                 IF tensdigit > 0 THEN DoTens (tensdigit);
( 543) 05C2 ABB5FB      ; 	lda.w tensdigit_011,X
( 544)                  ; 	pha.w
( 545)                  ; 	lda #0
( 546)                  ; 	xma.w 1,S
( 547) 05C5 ABC90000    ; 	cmp.w #0
( 548)                  ; 	adj #2
( 549) 05C9 AB1004      ; 	bgt L_114T
( 550) 05CC A900        ; 	lda #0
( 551) 05CE 8002        ; 	bra L_114
( 552) 05D0 A901        ; L_114T lda #1
( 553)                  ; 	lda #0
( 554)                  ; L_114
( 555) 05D2 ABC90100    ; 	cmp.w #1
( 556) 05D6 F003        ; 	beq L_112
( 557) 05D8 4CE705      ; 	jmp L_113
( 558)                  ; L_112
( 559) 05DB ABB5FB      ; 	lda.w tensdigit_011,X
( 560) 05DE AB48        ; 	pha.w
( 561) 05E0 ABDA        ; 	phx.w
( 562) 05E2 202504      ; 	jsr dotens_076
( 563) 05E5 C204        ; 	adj #4
( 564)                  ; L_113
( 565)                  ; ;  120:                 IF onesdigit > 0 THEN DoOnes (onesdigit);
( 566) 05E7 ABB5F9      ; 	lda.w onesdigit_012,X
( 567)                  ; 	pha.w
( 568)                  ; 	lda #0
( 569)                  ; 	xma.w 1,S
( 570) 05EA ABC90000    ; 	cmp.w #0
( 571)                  ; 	adj #2
( 572) 05EE AB1004      ; 	bgt L_117T
( 573) 05F1 A900        ; 	lda #0
( 574) 05F3 8002        ; 	bra L_117
( 575) 05F5 A901        ; L_117T lda #1
( 576)                  ; 	lda #0
( 577)                  ; L_117
( 578) 05F7 ABC90100    ; 	cmp.w #1
( 579) 05FB F003        ; 	beq L_115
( 580) 05FD 4C0C06      ; 	jmp L_116
( 581)                  ; L_115
( 582) 0600 ABB5F9      ; 	lda.w onesdigit_012,X
( 583) 0603 AB48        ; 	pha.w
( 584) 0605 ABDA        ; 	phx.w
( 585) 0607 201F02      ; 	jsr doones_013
( 586) 060A C204        ; 	adj #4
( 587)                  ; L_116
( 588)                  ; ;  121:             END;
( 589)                  ; L_111
( 590)                  ; ;  122:         END {DoPart};
( 591) 060C AB9A        ; 	txs.w
( 592) 060E ABFA        ; 	plx.w
( 593) 0610 60          ; 	rts
( 594)                  ; 	.end dopart_007
( 595)                  ; ;  123: 
( 596)                  ; ;  124:     BEGIN {Translate}
( 597)                  ; translate_003 .sub
( 598) 0611 ABDA        ; 	phx.w
( 599) 0613 ABBA        ; 	tsx.w
( 600) 0615 C2FC        ; 	adj #-4
( 601)                  ; ;  125: 
( 602)                  ; ;  126:         {Break up the number.}
( 603)                  ; ;  127:         partbefore := n DIV 1000;
( 604) 0617 ABB507      ; 	lda.w n_004,X
( 605) 061A AB48        ; 	pha.w
( 606)                  ; 	lda.w #1000
( 607) 061C ABE2E803    ; 	psh.w #1000
( 608) 0620 208C07      ; 	jsr _idiv
( 609) 0623 C204        ; 	adj #4
( 610) 0625 AB95FF      ; 	sta.w partbefore_005,X
( 611)                  ; ;  128:         partafter  := n MOD 1000;
( 612) 0628 ABB507      ; 	lda.w n_004,X
( 613) 062B AB48        ; 	pha.w
( 614)                  ; 	lda.w #1000
( 615) 062D ABE2E803    ; 	psh.w #1000
( 616) 0631 208C07      ; 	jsr _idiv
( 617) 0634 C204        ; 	adj #4
( 618) 0636 1B          ; 	swp a
( 619) 0637 AB95FD      ; 	sta.w partafter_006,X
( 620)                  ; ;  129: 
( 621)                  ; ;  130:         IF partbefore > 0 THEN BEGIN
( 622) 063A ABB5FF      ; 	lda.w partbefore_005,X
( 623)                  ; 	pha.w
( 624)                  ; 	lda #0
( 625)                  ; 	xma.w 1,S
( 626) 063D ABC90000    ; 	cmp.w #0
( 627)                  ; 	adj #2
( 628) 0641 AB1004      ; 	bgt L_120T
( 629) 0644 A900        ; 	lda #0
( 630) 0646 8002        ; 	bra L_120
( 631) 0648 A901        ; L_120T lda #1
( 632)                  ; 	lda #0
( 633)                  ; L_120
( 634) 064A ABC90100    ; 	cmp.w #1
( 635) 064E F003        ; 	beq L_118
( 636) 0650 4C7006      ; 	jmp L_119
( 637)                  ; L_118
( 638)                  ; ;  131:             DoPart (partbefore);
( 639) 0653 ABB5FF      ; 	lda.w partbefore_005,X
( 640) 0656 AB48        ; 	pha.w
( 641) 0658 ABDA        ; 	phx.w
( 642) 065A 200105      ; 	jsr dopart_007
( 643) 065D C204        ; 	adj #4
( 644)                  ; ;  132:             write (' thousand');
( 645) 065F ABE2BE08    ; 	psh.w #S_121
( 646) 0663 ABE20000    ; 	psh.w #0
( 647) 0667 ABE20900    ; 	psh.w #9
( 648) 066B 20F307      ; 	jsr _swrite
( 649) 066E C206        ; 	adj #6
( 650)                  ; ;  133:         END;
( 651)                  ; L_119
( 652)                  ; ;  134: 
( 653)                  ; ;  135:         IF partafter > 0 THEN DoPart (partafter);
( 654) 0670 ABB5FD      ; 	lda.w partafter_006,X
( 655)                  ; 	pha.w
( 656)                  ; 	lda #0
( 657)                  ; 	xma.w 1,S
( 658) 0673 ABC90000    ; 	cmp.w #0
( 659)                  ; 	adj #2
( 660) 0677 AB1004      ; 	bgt L_124T
( 661) 067A A900        ; 	lda #0
( 662) 067C 8002        ; 	bra L_124
( 663) 067E A901        ; L_124T lda #1
( 664)                  ; 	lda #0
( 665)                  ; L_124
( 666) 0680 ABC90100    ; 	cmp.w #1
( 667) 0684 F003        ; 	beq L_122
( 668) 0686 4C9506      ; 	jmp L_123
( 669)                  ; L_122
( 670) 0689 ABB5FD      ; 	lda.w partafter_006,X
( 671) 068C AB48        ; 	pha.w
( 672) 068E ABDA        ; 	phx.w
( 673) 0690 200105      ; 	jsr dopart_007
( 674) 0693 C204        ; 	adj #4
( 675)                  ; L_123
( 676)                  ; ;  136:     END {Translate};
( 677) 0695 AB9A        ; 	txs.w
( 678) 0697 ABFA        ; 	plx.w
( 679) 0699 60          ; 	rts
( 680)                  ; 	.end translate_003
( 681)                  ; ;  137: 
( 682)                  ; ;  138: 
( 683)                  ; ;  139: BEGIN {NumberTranslator}
( 684)                  ; _pc65_main .sub
( 685) 069A ABDA        ; 	phx.w
( 686) 069C ABBA        ; 	tsx.w
( 687)                  ; ;  140: 
( 688)                  ; ;  141:     {Loop to read, write, check, and translate the numbers.}
( 689)                  ; ;  142:     REPEAT
( 690)                  ; L_125
( 691)                  ; ;  143:         read (number);
( 692) 069E ABE28309    ; 	psh.w #number_002
( 693) 06A2 20FFFF      ; 	jsr _iread
( 694) 06A5 8B6B        ; 	pli.s
( 695) 06A7 AB8300      ; 	sta.w 0,I++
( 696)                  ; ;  144:         write (number:6, ' :');
( 697) 06AA ABAD8309    ; 	lda.w number_002
( 698) 06AE AB48        ; 	pha.w
( 699)                  ; 	lda #6
( 700) 06B0 ABE20600    ; 	psh.w #6
( 701) 06B4 200508      ; 	jsr _iwrite
( 702) 06B7 C204        ; 	adj #4
( 703) 06B9 ABE2BC08    ; 	psh.w #S_127
( 704) 06BD ABE20000    ; 	psh.w #0
( 705) 06C1 ABE20200    ; 	psh.w #2
( 706) 06C5 20F307      ; 	jsr _swrite
( 707) 06C8 C206        ; 	adj #6
( 708)                  ; ;  145: 
( 709)                  ; ;  146:         IF number < 0 THEN BEGIN
( 710) 06CA ABAD8309    ; 	lda.w number_002
( 711)                  ; 	pha.w
( 712)                  ; 	lda #0
( 713)                  ; 	xma.w 1,S
( 714) 06CE ABC90000    ; 	cmp.w #0
( 715)                  ; 	adj #2
( 716) 06D2 AB7004      ; 	blt L_130T
( 717) 06D5 A900        ; 	lda #0
( 718) 06D7 8002        ; 	bra L_130
( 719) 06D9 A901        ; L_130T lda #1
( 720)                  ; 	lda #0
( 721)                  ; L_130
( 722) 06DB ABC90100    ; 	cmp.w #1
( 723) 06DF F003        ; 	beq L_128
( 724) 06E1 4CF806      ; 	jmp L_129
( 725)                  ; L_128
( 726)                  ; ;  147:             write (' ***** Error -- number < 0');
( 727) 06E4 ABE2A208    ; 	psh.w #S_131
( 728) 06E8 ABE20000    ; 	psh.w #0
( 729) 06EC ABE21A00    ; 	psh.w #26
( 730) 06F0 20F307      ; 	jsr _swrite
( 731) 06F3 C206        ; 	adj #6
( 732)                  ; ;  148:         END
( 733)                  ; ;  149:         ELSE IF number > maxnumber THEN BEGIN
( 734) 06F5 4C6D07      ; 	jmp L_132
( 735)                  ; L_129
( 736) 06F8 ABAD8309    ; 	lda.w number_002
( 737)                  ; 	pha.w
( 738)                  ; 	lda.w #30000
( 739)                  ; 	xma.w 1,S
( 740) 06FC ABC93075    ; 	cmp.w #30000
( 741)                  ; 	adj #2
( 742) 0700 AB1004      ; 	bgt L_135T
( 743) 0703 A900        ; 	lda #0
( 744) 0705 8002        ; 	bra L_135
( 745) 0707 A901        ; L_135T lda #1
( 746)                  ; 	lda #0
( 747)                  ; L_135
( 748) 0709 ABC90100    ; 	cmp.w #1
( 749) 070D F003        ; 	beq L_133
( 750) 070F 4C3307      ; 	jmp L_134
( 751)                  ; L_133
( 752)                  ; ;  150:             write (' ***** Error -- number > ', maxnumber:1);
( 753) 0712 ABE28908    ; 	psh.w #S_136
( 754) 0716 ABE20000    ; 	psh.w #0
( 755) 071A ABE21900    ; 	psh.w #25
( 756) 071E 20F307      ; 	jsr _swrite
( 757) 0721 C206        ; 	adj #6
( 758)                  ; 	lda.w #30000
( 759) 0723 ABE23075    ; 	psh.w #30000
( 760)                  ; 	lda #1
( 761) 0727 ABE20100    ; 	psh.w #1
( 762) 072B 200508      ; 	jsr _iwrite
( 763) 072E C204        ; 	adj #4
( 764)                  ; ;  151:         END
( 765)                  ; ;  152:         ELSE IF number = 0 THEN BEGIN
( 766) 0730 4C6D07      ; 	jmp L_137
( 767)                  ; L_134
( 768) 0733 ABAD8309    ; 	lda.w number_002
( 769)                  ; 	pha.w
( 770)                  ; 	lda #0
( 771)                  ; 	xma.w 1,S
( 772) 0737 ABC90000    ; 	cmp.w #0
( 773)                  ; 	adj #2
( 774) 073B F004        ; 	beq L_140T
( 775) 073D A900        ; 	lda #0
( 776) 073F 8002        ; 	bra L_140
( 777) 0741 A901        ; L_140T lda #1
( 778)                  ; 	lda #0
( 779)                  ; L_140
( 780) 0743 ABC90100    ; 	cmp.w #1
( 781) 0747 F003        ; 	beq L_138
( 782) 0749 4C6007      ; 	jmp L_139
( 783)                  ; L_138
( 784)                  ; ;  153:             write (' zero');
( 785) 074C ABE28408    ; 	psh.w #S_141
( 786) 0750 ABE20000    ; 	psh.w #0
( 787) 0754 ABE20500    ; 	psh.w #5
( 788) 0758 20F307      ; 	jsr _swrite
( 789) 075B C206        ; 	adj #6
( 790)                  ; ;  154:         END
( 791)                  ; ;  155:         ELSE BEGIN
( 792) 075D 4C6D07      ; 	jmp L_142
( 793)                  ; L_139
( 794)                  ; ;  156:             Translate (number);
( 795) 0760 ABAD8309    ; 	lda.w number_002
( 796) 0764 AB48        ; 	pha.w
( 797) 0766 ABDA        ; 	phx.w
( 798) 0768 201106      ; 	jsr translate_003
( 799) 076B C204        ; 	adj #4
( 800)                  ; ;  157:         END;
( 801)                  ; L_142
( 802)                  ; L_137
( 803)                  ; L_132
( 804)                  ; ;  158: 
( 805)                  ; ;  159:         writeln;  {complete output line}
( 806) 076D 20ED07      ; 	jsr _writeln
( 807)                  ; ;  160:     UNTIL number = terminator;
( 808) 0770 ABAD8309    ; 	lda.w number_002
( 809)                  ; 	pha.w
( 810)                  ; 	lda #0
( 811)                  ; 	xma.w 1,S
( 812) 0774 ABC90000    ; 	cmp.w #0
( 813)                  ; 	adj #2
( 814) 0778 F004        ; 	beq L_143T
( 815) 077A A900        ; 	lda #0
( 816) 077C 8002        ; 	bra L_143
( 817) 077E A901        ; L_143T lda #1
( 818)                  ; 	lda #0
( 819)                  ; L_143
( 820) 0780 ABC90100    ; 	cmp.w #1
( 821) 0784 F003        ; 	beq L_126
( 822) 0786 4C9E06      ; 	jmp L_125
( 823)                  ; L_126
( 824)                  ; ;  161: END {NumberTranslator}.
( 825) 0789 ABFA        ; 	plx.w
( 826) 078B 60          ; 	rts
( 827)                  ; 	.end _pc65_main
( 828)                  ; 
( 829)                  ; ;
( 830)                  ; ;   unsigned division 16 x 16
( 831)                  ; ;
( 832)                  ;             .cod
( 833)                  ; ;
( 834)                  ; _Q          .equ    5
( 835)                  ; _D          .equ    3
( 836)                  ; ;
( 837)                  ; _idiv       .proc
( 838) 078C A900        ;             lda #0          ; clear remainder (A)
( 839) 078E 0B          ;             dup a           ; push
( 840) 078F CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 841) 0792 A010        ;             ldy #16         ; bit counter
( 842)                  ; ;
( 843)                  ; _idiv_Lp    
( 844) 0794 18          ;             clc
( 845) 0795 AB0A        ;             asl.w a         ; shift AQ left
( 846) 0797 1B          ;             swp a
( 847) 0798 AB2A        ;             rol.w a
( 848)                  ; ;
( 849) 079A B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 850)                  ; ;
( 851)                  ; _idiv_Minus
( 852) 079C 38          ;             sec
( 853) 079D CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 854)                  ; ;
( 855) 07A0 8004        ;             bra _idiv_Next
( 856)                  ; ;
( 857)                  ; _idiv_Plus
( 858) 07A2 18          ;             clc
( 859) 07A3 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 860)                  ; ;
( 861)                  ; _idiv_Next    
( 862) 07A6 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 863) 07A7 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 864) 07A9 AB1A        ;             inc.w a
( 865)                  ; ;
( 866)                  ; _idiv_Dec
( 867) 07AB 88          ;             dey             ; loop until loop counter == 0
( 868) 07AC D0E6        ;             bne _idiv_Lp
( 869)                  ; ;
( 870)                  ; _idiv_Exit
( 871) 07AE 1B          ;             swp a           ; Test remainder
( 872) 07AF AB090000    ;             ora.w #0
( 873) 07B3 1004        ;             bpl _idiv_Finish
( 874) 07B5 18          ;             clc
( 875) 07B6 CB7503      ;             adc.w 3,S
( 876)                  ; _idiv_Finish
( 877) 07B9 1B          ;             swp a
( 878)                  ; ;
( 879) 07BA 60          ;             rts
( 880)                  ; ;
( 881)                  ;             .endp _idiv
( 882)                  ; 
( 883)                  ; ;
( 884)                  ; ; signed multiplication: 16 x 16 => 32
( 885)                  ; ;
( 886)                  ;             .cod
( 887)                  ; ;
( 888)                  ; _M          .equ    5
( 889)                  ; _R          .equ    3
( 890)                  ; ;
( 891)                  ; _imul       .proc
( 892) 07BB A010        ;             ldy #16             ; y = bit count
( 893) 07BD A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 894) 07BF 0B          ;             dup a               ; A = { 0,  0,  x}
( 895) 07C0 0B          ;             dup a               ; A = { 0,  0,  0}
( 896) 07C1 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 897) 07C4 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 898) 07C6 AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 899) 07CA 18          ;             clc                 ; initialize Booth recoding bit
( 900) 07CB 2B          ;             rot a               ; A = {PH, PL, `R}
( 901)                  ; ;
( 902) 07CC 8003        ;             bra _imul_TstB
( 903)                  ; ;
( 904)                  ; _imul_Lp
( 905) 07CE AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 906) 07D0 2B          ;             rot a               ; A = {PH, PL, `R}
( 907)                  ; _imul_TstB
( 908) 07D1 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 909)                  ; ;
( 910)                  ; _imul_AddShft
( 911) 07D3 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 912)                  ; _imul_AddM
( 913) 07D5 18          ;             clc
( 914) 07D6 CB7505      ;             adc.w _M,S          ; PH += M
( 915) 07D9 8006        ;             bra _imul_ShftP
( 916)                  ; ;
( 917)                  ; _imul_SubShft
( 918) 07DB 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 919)                  ; _imul_SubM
( 920) 07DD 38          ;             sec
( 921) 07DE CBF505      ;             sbc.w _M,S          ; PH -= M
( 922)                  ; ;
( 923)                  ; _imul_ShftP
( 924) 07E1 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 925) 07E3 2B          ;             rot a               ; A = {PL, `R, PH}
( 926) 07E4 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 927) 07E6 2B          ;             rot a               ; A = {`R, PH, PL}
( 928)                  ; ;
( 929)                  ; _imul_Dec
( 930) 07E7 88          ;             dey
( 931) 07E8 D0E4        ;             bne _imul_Lp
( 932)                  ; ;
( 933)                  ; _imul_Exit
( 934) 07EA 2B          ;             rot a               ; A = {PH, PL, `R}
( 935) 07EB 1B          ;             swp a               ; A = {PL, PH, `R}
( 936)                  ; ;
( 937) 07EC 60          ;             rts
( 938)                  ; ;
( 939)                  ;             .endp _imul
( 940)                  ; 
( 941)                  ; ;
( 942)                  ; ; put <newLine> to output
( 943)                  ; ;
( 944)                  ;             .cod
( 945)                  ; ;
( 946)                  ; _newLine    .equ    0x0A
( 947)                  ; _putChar    .equ    0xF001
( 948)                  ; ;
( 949)                  ; _writeln    .proc
( 950) 07ED A90A        ;             lda #_newLine
( 951) 07EF 8D01F0      ;             sta _putChar
( 952)                  ; ;
( 953) 07F2 60          ;             rts
( 954)                  ; ;
( 955)                  ;             .endp _writeln
( 956)                  ; ;
( 957)                  ; ; put string to output
( 958)                  ; ;
( 959)                  ;             .cod
( 960)                  ; ;
( 961)                  ; _sPtrOff    .equ    7
( 962)                  ; _sLenOff    .equ    3
( 963)                  ; ;
( 964)                  ; _swrite     .proc
( 965) 07F3 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 966) 07F6 CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 967) 07F9 9B0B        ;             tai                     ; transfer sptr to IP
( 968)                  ; ;
( 969)                  ; _swrite_Lp
( 970) 07FB A300        ;             lda 0,I++               ; load char from strig
( 971) 07FD 8D01F0      ;             sta _putChar            ; write char to output
( 972)                  ; ;
( 973) 0800 AB88        ;             dey.w                   ; loop while string length <> 0
( 974) 0802 D0F7        ;             bne _swrite_Lp
( 975)                  ; ;
( 976) 0804 60          ;             rts
( 977)                  ; ;
( 978)                  ;             .endp _swrite
( 979)                  ; ;
( 980)                  ; ; put integer to output
( 981)                  ; ;
( 982)                  ;             .cod
( 983)                  ; ;
( 984)                  ; _iValOff    .equ    7
( 985)                  ; _fLenOff    .equ    5
( 986)                  ; _iCntOff    .equ    -1
( 987)                  ; ;
( 988)                  ; _iwrite     .proc
( 989) 0805 ABDA        ;             phx.w                   ; save current base pointer
( 990) 0807 ABBA        ;             tsx.w                   ; assign new base pointer
( 991)                  ; ;
( 992) 0809 B505        ;             lda _fLenOff,X          ; load field width specifier
( 993) 080B C905        ;             cmp #5                  ; compare against max integer digit count
( 994) 080D AB3002      ;             ble _iwrite_SetCnt
( 995) 0810 A905        ;             lda #5
( 996)                  ; ;
( 997)                  ; _iwrite_SetCnt
( 998) 0812 AB48        ;             pha.w                   ; set iteration count to fld width
( 999) 0814 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
(1000)                  ; ;
(1001)                  ; _iwrite_Lp
(1002) 0817 AB48        ;             pha.w                   ; push dividend argument to _idiv
(1003) 0819 ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
(1004) 081D 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
(1005) 0821 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
(1006) 0823 1B          ;             swp a                   ; put the remainder into ATOS
(1007)                  ; ;
(1008) 0824 18          ;             clc                     ; convert remainder into ASCII character
(1009) 0825 6930        ;             adc #48
(1010) 0827 48          ;             pha                     ; push LS digit of integer onto stack
(1011)                  ; ;
(1012) 0828 2B          ;             rot a                   ; rotate quotient into ATOS position
(1013)                  ; ;
(1014) 0829 ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
(1015) 082C D0E9        ;             bne _iwrite_Lp
(1016)                  ; ;-------------------------------------------------------------------------------
(1017) 082E 0B          ;             dup a                   ; save integer part of the conversion
(1018)                  ; ;-------------------------------------------------------------------------------
(1019)                  ; _iwrite_Fill
(1020) 082F B505        ;             lda _fLenOff,X          ; load field width specifier
(1021) 0831 C905        ;             cmp #5                  ; compare against max integer digit count
(1022) 0833 AB300A      ;             ble _iwrite_GenPtr
(1023) 0836 38          ;             sec                     ; subtract max integer length from fld len
(1024) 0837 E905        ;             sbc #5
(1025) 0839 A8          ;             tay                     ; set difference as loop counter
(1026) 083A A930        ;             lda #48                 ; fill remaining field with '0'
(1027)                  ; ;
(1028)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
(1029) 083C 48          ;             pha
(1030) 083D 88          ;             dey
(1031) 083E D0FC        ;             bne _iwrite_Fill_Lp
(1032)                  ; ;-------------------------------------------------------------------------------
(1033)                  ; _iwrite_GenPtr
(1034) 0840 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
(1035) 0843 AB1A        ;             inc.w a                 ; remove stack pointer write bias
(1036) 0845 AB48        ;             pha.w                   ; push string pointer to stack
(1037)                  ; ;-------------------------------------------------------------------------------
(1038) 0847 2B          ;             rot a                   ; restore integer part of the conversion
(1039)                  ; ;-------------------------------------------------------------------------------
(1040) 0848 ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
(1041) 084C F00F        ;             beq _iwrite_Sup0
(1042) 084E A000        ;             ldy #0
(1043)                  ; _iwrite_ErrLp
(1044) 0850 A92A        ;             lda #0x2A               ; fill integer field with '*'
(1045) 0852 8B9101      ;             sta (1,S),Y
(1046) 0855 C8          ;             iny
(1047) 0856 FBD505      ;             cmp.y _fLenOff,X
(1048) 0859 D0F5        ;             bne _iwrite_ErrLp
(1049) 085B 8014        ;             bra _iwrite_Exit
(1050)                  ; ;-------------------------------------------------------------------------------
(1051)                  ; _iwrite_Sup0
(1052) 085D A000        ;             ldy #0                  ; initialize string index
(1053)                  ; _iwrite_Sup0_Lp
(1054) 085F 8BB101      ;             lda (1,S),Y
(1055) 0862 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
(1056) 0864 D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
(1057) 0866 A920        ;             lda #32                 ; replace leading 0 with ' '
(1058) 0868 8B9101      ;             sta (1,S),Y
(1059) 086B C8          ;             iny                     ; increment string index and compare to fLen
(1060) 086C FBD505      ;             cmp.y _fLenOff,X
(1061) 086F D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
(1062)                  ; ;-------------------------------------------------------------------------------
(1063)                  ; _iwrite_Exit
(1064) 0871 ABE20000    ;             psh.w #0                ; NULL argument
(1065) 0875 B505        ;             lda _fLenOff,X          ; push field width specifier
(1066) 0877 AB48        ;             pha.w
(1067) 0879 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
(1068) 087D C206        ;             adj #6                  ; remove parameters to _swrite() from stack
(1069)                  ; ;
(1070) 087F AB9A        ;             txs.w                   ; deallocate stack variables
(1071) 0881 ABFA        ;             plx.w                   ; restore previous base pointer
(1072) 0883 60          ;             rts
(1073)                  ; ;
(1074)                  ;             .endp _iwrite
(1075)                  ; 	.dat
(1076)                  ; 
(1077) 0884 207A6572    ; S_141 .str " zero"
       0888 6F
(1078) 0889 202A2A2A    ; S_136 .str " ***** Error -- number > "
       088D 2A2A204572726F72202D2D206E756D626572203E20
(1079) 08A2 202A2A2A    ; S_131 .str " ***** Error -- number < 0"
       08A6 2A2A204572726F72202D2D206E756D626572203C2030
(1080) 08BC 203A        ; S_127 .str " :"
(1081) 08BE 2074686F    ; S_121 .str " thousand"
       08C2 7573616E64
(1082) 08C7 2068756E    ; S_106 .str " hundred"
       08CB 64726564
(1083) 08CF 206E696E    ; S_102 .str " ninety"
       08D3 657479
(1084) 08D6 20656967    ; S_099 .str " eighty"
       08DA 687479
(1085) 08DD 20736576    ; S_096 .str " seventy"
       08E1 656E7479
(1086) 08E5 20736978    ; S_093 .str " sixty"
       08E9 7479
(1087) 08EB 20666966    ; S_090 .str " fifty"
       08EF 7479
(1088) 08F1 20666F72    ; S_087 .str " forty"
       08F5 7479
(1089) 08F7 20746869    ; S_084 .str " thirty"
       08FB 727479
(1090) 08FE 20747765    ; S_081 .str " twenty"
       0902 6E7479
(1091) 0905 206E696E    ; S_075 .str " nineteen"
       0909 657465656E
(1092) 090E 20656967    ; S_072 .str " eighteen"
       0912 687465656E
(1093) 0917 20736576    ; S_069 .str " seventeen"
       091B 656E7465656E
(1094) 0921 20736978    ; S_066 .str " sixteen"
       0925 7465656E
(1095) 0929 20666966    ; S_063 .str " fifteen"
       092D 7465656E
(1096) 0931 20666F75    ; S_060 .str " fourteen"
       0935 727465656E
(1097) 093A 20746869    ; S_057 .str " thirteen"
       093E 727465656E
(1098) 0943 20747765    ; S_054 .str " twelve"
       0947 6C7665
(1099) 094A 20656C65    ; S_051 .str " eleven"
       094E 76656E
(1100) 0951 2074656E    ; S_048 .str " ten"
(1101) 0955 206E696E    ; S_042 .str " nine"
       0959 65
(1102) 095A 20656967    ; S_039 .str " eight"
       095E 6874
(1103) 0960 20736576    ; S_036 .str " seven"
       0964 656E
(1104) 0966 20736978    ; S_033 .str " six"
(1105) 096A 20666976    ; S_030 .str " five"
       096E 65
(1106) 096F 20666F75    ; S_027 .str " four"
       0973 72
(1107) 0974 20746872    ; S_024 .str " three"
       0978 6565
(1108) 097A 2074776F    ; S_021 .str " two"
(1109) 097E 206F6E65    ; S_018 .str " one"
(1110) 0982 00          ; _bss_start .byt 0
(1111) 0983 0000        ; number_002 .wrd 0
(1112) 0985 00          ; _bss_end .byt 0
(1113) 0986 00000000    ; _stk .byt 0[1023]
       098A 0000000000000000000000000000000000000000000000000000000000000000
       09AA 0000000000000000000000000000000000000000000000000000000000000000
       09CA 0000000000000000000000000000000000000000000000000000000000000000
       09EA 0000000000000000000000000000000000000000000000000000000000000000
       0A0A 0000000000000000000000000000000000000000000000000000000000000000
       0A2A 0000000000000000000000000000000000000000000000000000000000000000
       0A4A 0000000000000000000000000000000000000000000000000000000000000000
       0A6A 0000000000000000000000000000000000000000000000000000000000000000
       0A8A 0000000000000000000000000000000000000000000000000000000000000000
       0AAA 0000000000000000000000000000000000000000000000000000000000000000
       0ACA 0000000000000000000000000000000000000000000000000000000000000000
       0AEA 0000000000000000000000000000000000000000000000000000000000000000
       0B0A 0000000000000000000000000000000000000000000000000000000000000000
       0B2A 0000000000000000000000000000000000000000000000000000000000000000
       0B4A 0000000000000000000000000000000000000000000000000000000000000000
       0B6A 0000000000000000000000000000000000000000000000000000000000000000
       0B8A 0000000000000000000000000000000000000000000000000000000000000000
       0BAA 0000000000000000000000000000000000000000000000000000000000000000
       0BCA 0000000000000000000000000000000000000000000000000000000000000000
       0BEA 0000000000000000000000000000000000000000000000000000000000000000
       0C0A 0000000000000000000000000000000000000000000000000000000000000000
       0C2A 0000000000000000000000000000000000000000000000000000000000000000
       0C4A 0000000000000000000000000000000000000000000000000000000000000000
       0C6A 0000000000000000000000000000000000000000000000000000000000000000
       0C8A 0000000000000000000000000000000000000000000000000000000000000000
       0CAA 0000000000000000000000000000000000000000000000000000000000000000
       0CCA 0000000000000000000000000000000000000000000000000000000000000000
       0CEA 0000000000000000000000000000000000000000000000000000000000000000
       0D0A 0000000000000000000000000000000000000000000000000000000000000000
       0D2A 0000000000000000000000000000000000000000000000000000000000000000
       0D4A 0000000000000000000000000000000000000000000000000000000000000000
       0D6A 000000000000000000000000000000000000000000000000000000
(1114) 0D85 FF          ; _stk_top .byt -1
(1115)                  ; 
(1116)                  ; 	.end
