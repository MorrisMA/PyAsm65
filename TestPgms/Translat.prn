(   1)                  ; ;    1: PROGRAM NumberTranslator (input, output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w
(   9) 0202 CBA2E60C    ; 	lds.w #_stk_top
(  10) 0206 9CE308      ; 	stz _bss_start
(  11) 0209 ABA2E308    ; 	ldx.w #_bss_start
(  12) 020D ABA0E408    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9E60C    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE9E308    ; 	sbc.w #_bss_start
(  16) 021A 540F        ; 	mov #15
(  17) 021C 4CD206      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: {   Translate a list of integers from numeric form into
(  20)                  ; ;    4:     words.  The integers must not be negative nor be
(  21)                  ; ;    5:     greater than the value of maxnumber.  The last
(  22)                  ; ;    6:     integer in the list has the value of terminator.
(  23)                  ; ;    7: }
(  24)                  ; ;    8: 
(  25)                  ; ;    9: CONST
(  26)                  ; ;   10:     maxnumber  = 30000; {maximum allowable number}
(  27)                  ; ;   11:     terminator = 0;     {last number in list}
(  28)                  ; ;   12: 
(  29)                  ; ;   13: VAR
(  30)                  ; ;   14:     number : integer;   {number to be translated}
(  31)                  ; ;   15: 
(  32)                  ; ;   16: 
(  33)                  ; ;   17:     PROCEDURE Translate (n : integer);
(  34)                  ; ;   18: 
(  35)                  ; ;   19:         {Translate number n into words.}
(  36)                  ; ;   20: 
(  37)                  ; ;   21:         VAR
(  38)                  ; ;   22:             partbefore,     {part before the comma}
(  39)                  ; ;   23:             partafter       {part after the comma}
(  40)                  ; ;   24:              : integer;
(  41)                  ; ;   25: 
(  42)                  ; ;   26: 
(  43)                  ; ;   27:         PROCEDURE DoPart (part : integer);
(  44)                  ; n_004 .equ +7
(  45)                  ; partbefore_005 .equ -1
(  46)                  ; partafter_006 .equ -3
(  47)                  ; ;   28: 
(  48)                  ; ;   29:         {Translate a part of a number into words,
(  49)                  ; ;   30:          where 1 <= part <= 999.}
(  50)                  ; ;   31: 
(  51)                  ; ;   32:         VAR
(  52)                  ; ;   33:             hundredsdigit,  {hundreds digit 0..9}
(  53)                  ; ;   34:             tenspart,           {tens part 0..99}
(  54)                  ; ;   35:             tensdigit,          {tens digit 0..9}
(  55)                  ; ;   36:             onesdigit           {ones digit 0..9}
(  56)                  ; ;   37:             : integer;
(  57)                  ; ;   38: 
(  58)                  ; ;   39: 
(  59)                  ; ;   40:             PROCEDURE DoOnes (digit : integer);
(  60)                  ; part_008 .equ +7
(  61)                  ; hundredsdigit_009 .equ -1
(  62)                  ; tenspart_010 .equ -3
(  63)                  ; tensdigit_011 .equ -5
(  64)                  ; onesdigit_012 .equ -7
(  65)                  ; ;   41: 
(  66)                  ; ;   42:             {Translate a single ones digit into a word,
(  67)                  ; ;   43:              where 1 <= digit <= 9.}
(  68)                  ; ;   44: 
(  69)                  ; ;   45:             BEGIN
(  70)                  ; digit_014 .equ +7
(  71)                  ; doones_013 .sub
(  72) 021F ABDA        ; 	phx.w
(  73) 0221 ABBA        ; 	tsx.w
(  74)                  ; ;   46:                 CASE digit OF
(  75) 0223 ABB507      ; 	lda.w digit_014,X
(  76)                  ; ;   47:                     1:  write (' one');
(  77) 0226 ABC90100    ; 	cmp.w #1
(  78) 022A D014        ; 	bne L_017
(  79)                  ; L_016
(  80) 022C ABE2DF08    ; 	psh.w #S_018
(  81) 0230 ABE20000    ; 	psh.w #0
(  82) 0234 ABE20400    ; 	psh.w #4
(  83) 0238 20FFFF      ; 	jsr _swrite
(  84) 023B C206        ; 	adj #6
(  85) 023D 4C1003      ; 	jmp L_015
(  86)                  ; L_017
(  87)                  ; ;   48:                     2:  write (' two');
(  88) 0240 ABC90200    ; 	cmp.w #2
(  89) 0244 D014        ; 	bne L_020
(  90)                  ; L_019
(  91) 0246 ABE2DB08    ; 	psh.w #S_021
(  92) 024A ABE20000    ; 	psh.w #0
(  93) 024E ABE20400    ; 	psh.w #4
(  94) 0252 20FFFF      ; 	jsr _swrite
(  95) 0255 C206        ; 	adj #6
(  96) 0257 4C1003      ; 	jmp L_015
(  97)                  ; L_020
(  98)                  ; ;   49:                     3:  write (' three');
(  99) 025A ABC90300    ; 	cmp.w #3
( 100) 025E D014        ; 	bne L_023
( 101)                  ; L_022
( 102) 0260 ABE2D508    ; 	psh.w #S_024
( 103) 0264 ABE20000    ; 	psh.w #0
( 104) 0268 ABE20600    ; 	psh.w #6
( 105) 026C 20FFFF      ; 	jsr _swrite
( 106) 026F C206        ; 	adj #6
( 107) 0271 4C1003      ; 	jmp L_015
( 108)                  ; L_023
( 109)                  ; ;   50:                     4:  write (' four');
( 110) 0274 ABC90400    ; 	cmp.w #4
( 111) 0278 D014        ; 	bne L_026
( 112)                  ; L_025
( 113) 027A ABE2D008    ; 	psh.w #S_027
( 114) 027E ABE20000    ; 	psh.w #0
( 115) 0282 ABE20500    ; 	psh.w #5
( 116) 0286 20FFFF      ; 	jsr _swrite
( 117) 0289 C206        ; 	adj #6
( 118) 028B 4C1003      ; 	jmp L_015
( 119)                  ; L_026
( 120)                  ; ;   51:                     5:  write (' five');
( 121) 028E ABC90500    ; 	cmp.w #5
( 122) 0292 D014        ; 	bne L_029
( 123)                  ; L_028
( 124) 0294 ABE2CB08    ; 	psh.w #S_030
( 125) 0298 ABE20000    ; 	psh.w #0
( 126) 029C ABE20500    ; 	psh.w #5
( 127) 02A0 20FFFF      ; 	jsr _swrite
( 128) 02A3 C206        ; 	adj #6
( 129) 02A5 4C1003      ; 	jmp L_015
( 130)                  ; L_029
( 131)                  ; ;   52:                     6:  write (' six');
( 132) 02A8 ABC90600    ; 	cmp.w #6
( 133) 02AC D014        ; 	bne L_032
( 134)                  ; L_031
( 135) 02AE ABE2C708    ; 	psh.w #S_033
( 136) 02B2 ABE20000    ; 	psh.w #0
( 137) 02B6 ABE20400    ; 	psh.w #4
( 138) 02BA 20FFFF      ; 	jsr _swrite
( 139) 02BD C206        ; 	adj #6
( 140) 02BF 4C1003      ; 	jmp L_015
( 141)                  ; L_032
( 142)                  ; ;   53:                     7:  write (' seven');
( 143) 02C2 ABC90700    ; 	cmp.w #7
( 144) 02C6 D014        ; 	bne L_035
( 145)                  ; L_034
( 146) 02C8 ABE2C108    ; 	psh.w #S_036
( 147) 02CC ABE20000    ; 	psh.w #0
( 148) 02D0 ABE20600    ; 	psh.w #6
( 149) 02D4 20FFFF      ; 	jsr _swrite
( 150) 02D7 C206        ; 	adj #6
( 151) 02D9 4C1003      ; 	jmp L_015
( 152)                  ; L_035
( 153)                  ; ;   54:                     8:  write (' eight');
( 154) 02DC ABC90800    ; 	cmp.w #8
( 155) 02E0 D014        ; 	bne L_038
( 156)                  ; L_037
( 157) 02E2 ABE2BB08    ; 	psh.w #S_039
( 158) 02E6 ABE20000    ; 	psh.w #0
( 159) 02EA ABE20600    ; 	psh.w #6
( 160) 02EE 20FFFF      ; 	jsr _swrite
( 161) 02F1 C206        ; 	adj #6
( 162) 02F3 4C1003      ; 	jmp L_015
( 163)                  ; L_038
( 164)                  ; ;   55:                     9:  write (' nine');
( 165) 02F6 ABC90900    ; 	cmp.w #9
( 166) 02FA D014        ; 	bne L_041
( 167)                  ; L_040
( 168) 02FC ABE2B608    ; 	psh.w #S_042
( 169) 0300 ABE20000    ; 	psh.w #0
( 170) 0304 ABE20500    ; 	psh.w #5
( 171) 0308 20FFFF      ; 	jsr _swrite
( 172) 030B C206        ; 	adj #6
( 173) 030D 4C1003      ; 	jmp L_015
( 174)                  ; L_041
( 175)                  ; ;   56:                 END;
( 176)                  ; L_015
( 177)                  ; ;   57:             END {DoOnes};
( 178) 0310 AB9A        ; 	txs.w
( 179) 0312 ABFA        ; 	plx.w
( 180) 0314 60          ; 	rts
( 181)                  ; 	.end doones_013
( 182)                  ; ;   58: 
( 183)                  ; ;   59: 
( 184)                  ; ;   60:             PROCEDURE DoTeens (teens : integer);
( 185)                  ; ;   61: 
( 186)                  ; ;   62:             {Translate the teens into a word,
( 187)                  ; ;   63:              where 10 <= teens <= 19.}
( 188)                  ; ;   64: 
( 189)                  ; ;   65:             BEGIN
( 190)                  ; teens_044 .equ +7
( 191)                  ; doteens_043 .sub
( 192) 0315 ABDA        ; 	phx.w
( 193) 0317 ABBA        ; 	tsx.w
( 194)                  ; ;   66:                 CASE teens OF
( 195) 0319 ABB507      ; 	lda.w teens_044,X
( 196)                  ; ;   67:                     10:  write (' ten');
( 197) 031C ABC90A00    ; 	cmp.w #10
( 198) 0320 D014        ; 	bne L_047
( 199)                  ; L_046
( 200) 0322 ABE2B208    ; 	psh.w #S_048
( 201) 0326 ABE20000    ; 	psh.w #0
( 202) 032A ABE20400    ; 	psh.w #4
( 203) 032E 20FFFF      ; 	jsr _swrite
( 204) 0331 C206        ; 	adj #6
( 205) 0333 4C2004      ; 	jmp L_045
( 206)                  ; L_047
( 207)                  ; ;   68:                     11:  write (' eleven');
( 208) 0336 ABC90B00    ; 	cmp.w #11
( 209) 033A D014        ; 	bne L_050
( 210)                  ; L_049
( 211) 033C ABE2AB08    ; 	psh.w #S_051
( 212) 0340 ABE20000    ; 	psh.w #0
( 213) 0344 ABE20700    ; 	psh.w #7
( 214) 0348 20FFFF      ; 	jsr _swrite
( 215) 034B C206        ; 	adj #6
( 216) 034D 4C2004      ; 	jmp L_045
( 217)                  ; L_050
( 218)                  ; ;   69:                     12:  write (' twelve');
( 219) 0350 ABC90C00    ; 	cmp.w #12
( 220) 0354 D014        ; 	bne L_053
( 221)                  ; L_052
( 222) 0356 ABE2A408    ; 	psh.w #S_054
( 223) 035A ABE20000    ; 	psh.w #0
( 224) 035E ABE20700    ; 	psh.w #7
( 225) 0362 20FFFF      ; 	jsr _swrite
( 226) 0365 C206        ; 	adj #6
( 227) 0367 4C2004      ; 	jmp L_045
( 228)                  ; L_053
( 229)                  ; ;   70:                     13:  write (' thirteen');
( 230) 036A ABC90D00    ; 	cmp.w #13
( 231) 036E D014        ; 	bne L_056
( 232)                  ; L_055
( 233) 0370 ABE29B08    ; 	psh.w #S_057
( 234) 0374 ABE20000    ; 	psh.w #0
( 235) 0378 ABE20900    ; 	psh.w #9
( 236) 037C 20FFFF      ; 	jsr _swrite
( 237) 037F C206        ; 	adj #6
( 238) 0381 4C2004      ; 	jmp L_045
( 239)                  ; L_056
( 240)                  ; ;   71:                     14:  write (' fourteen');
( 241) 0384 ABC90E00    ; 	cmp.w #14
( 242) 0388 D014        ; 	bne L_059
( 243)                  ; L_058
( 244) 038A ABE29208    ; 	psh.w #S_060
( 245) 038E ABE20000    ; 	psh.w #0
( 246) 0392 ABE20900    ; 	psh.w #9
( 247) 0396 20FFFF      ; 	jsr _swrite
( 248) 0399 C206        ; 	adj #6
( 249) 039B 4C2004      ; 	jmp L_045
( 250)                  ; L_059
( 251)                  ; ;   72:                     15:  write (' fifteen');
( 252) 039E ABC90F00    ; 	cmp.w #15
( 253) 03A2 D014        ; 	bne L_062
( 254)                  ; L_061
( 255) 03A4 ABE28A08    ; 	psh.w #S_063
( 256) 03A8 ABE20000    ; 	psh.w #0
( 257) 03AC ABE20800    ; 	psh.w #8
( 258) 03B0 20FFFF      ; 	jsr _swrite
( 259) 03B3 C206        ; 	adj #6
( 260) 03B5 4C2004      ; 	jmp L_045
( 261)                  ; L_062
( 262)                  ; ;   73:                     16:  write (' sixteen');
( 263) 03B8 ABC91000    ; 	cmp.w #16
( 264) 03BC D014        ; 	bne L_065
( 265)                  ; L_064
( 266) 03BE ABE28208    ; 	psh.w #S_066
( 267) 03C2 ABE20000    ; 	psh.w #0
( 268) 03C6 ABE20800    ; 	psh.w #8
( 269) 03CA 20FFFF      ; 	jsr _swrite
( 270) 03CD C206        ; 	adj #6
( 271) 03CF 4C2004      ; 	jmp L_045
( 272)                  ; L_065
( 273)                  ; ;   74:                     17:  write (' seventeen');
( 274) 03D2 ABC91100    ; 	cmp.w #17
( 275) 03D6 D014        ; 	bne L_068
( 276)                  ; L_067
( 277) 03D8 ABE27808    ; 	psh.w #S_069
( 278) 03DC ABE20000    ; 	psh.w #0
( 279) 03E0 ABE20A00    ; 	psh.w #10
( 280) 03E4 20FFFF      ; 	jsr _swrite
( 281) 03E7 C206        ; 	adj #6
( 282) 03E9 4C2004      ; 	jmp L_045
( 283)                  ; L_068
( 284)                  ; ;   75:                     18:  write (' eighteen');
( 285) 03EC ABC91200    ; 	cmp.w #18
( 286) 03F0 D014        ; 	bne L_071
( 287)                  ; L_070
( 288) 03F2 ABE26F08    ; 	psh.w #S_072
( 289) 03F6 ABE20000    ; 	psh.w #0
( 290) 03FA ABE20900    ; 	psh.w #9
( 291) 03FE 20FFFF      ; 	jsr _swrite
( 292) 0401 C206        ; 	adj #6
( 293) 0403 4C2004      ; 	jmp L_045
( 294)                  ; L_071
( 295)                  ; ;   76:                     19:  write (' nineteen');
( 296) 0406 ABC91300    ; 	cmp.w #19
( 297) 040A D014        ; 	bne L_074
( 298)                  ; L_073
( 299) 040C ABE26608    ; 	psh.w #S_075
( 300) 0410 ABE20000    ; 	psh.w #0
( 301) 0414 ABE20900    ; 	psh.w #9
( 302) 0418 20FFFF      ; 	jsr _swrite
( 303) 041B C206        ; 	adj #6
( 304) 041D 4C2004      ; 	jmp L_045
( 305)                  ; L_074
( 306)                  ; ;   77:                 END;
( 307)                  ; L_045
( 308)                  ; ;   78:             END {DoTeens};
( 309) 0420 AB9A        ; 	txs.w
( 310) 0422 ABFA        ; 	plx.w
( 311) 0424 60          ; 	rts
( 312)                  ; 	.end doteens_043
( 313)                  ; ;   79: 
( 314)                  ; ;   80: 
( 315)                  ; ;   81:             PROCEDURE DoTens (digit : integer);
( 316)                  ; ;   82: 
( 317)                  ; ;   83:                 {Translate a single tens digit into a word,
( 318)                  ; ;   84:                  where 2 <= digit <= 9.}
( 319)                  ; ;   85: 
( 320)                  ; ;   86:             BEGIN
( 321)                  ; digit_077 .equ +7
( 322)                  ; dotens_076 .sub
( 323) 0425 ABDA        ; 	phx.w
( 324) 0427 ABBA        ; 	tsx.w
( 325)                  ; ;   87:                 CASE digit OF
( 326) 0429 ABB507      ; 	lda.w digit_077,X
( 327)                  ; ;   88:                     2:  write (' twenty');
( 328) 042C ABC90200    ; 	cmp.w #2
( 329) 0430 D014        ; 	bne L_080
( 330)                  ; L_079
( 331) 0432 ABE25F08    ; 	psh.w #S_081
( 332) 0436 ABE20000    ; 	psh.w #0
( 333) 043A ABE20700    ; 	psh.w #7
( 334) 043E 20FFFF      ; 	jsr _swrite
( 335) 0441 C206        ; 	adj #6
( 336) 0443 4CFC04      ; 	jmp L_078
( 337)                  ; L_080
( 338)                  ; ;   89:                     3:  write (' thirty');
( 339) 0446 ABC90300    ; 	cmp.w #3
( 340) 044A D014        ; 	bne L_083
( 341)                  ; L_082
( 342) 044C ABE25808    ; 	psh.w #S_084
( 343) 0450 ABE20000    ; 	psh.w #0
( 344) 0454 ABE20700    ; 	psh.w #7
( 345) 0458 20FFFF      ; 	jsr _swrite
( 346) 045B C206        ; 	adj #6
( 347) 045D 4CFC04      ; 	jmp L_078
( 348)                  ; L_083
( 349)                  ; ;   90:                     4:  write (' forty');
( 350) 0460 ABC90400    ; 	cmp.w #4
( 351) 0464 D014        ; 	bne L_086
( 352)                  ; L_085
( 353) 0466 ABE25208    ; 	psh.w #S_087
( 354) 046A ABE20000    ; 	psh.w #0
( 355) 046E ABE20600    ; 	psh.w #6
( 356) 0472 20FFFF      ; 	jsr _swrite
( 357) 0475 C206        ; 	adj #6
( 358) 0477 4CFC04      ; 	jmp L_078
( 359)                  ; L_086
( 360)                  ; ;   91:                     5:  write (' fifty');
( 361) 047A ABC90500    ; 	cmp.w #5
( 362) 047E D014        ; 	bne L_089
( 363)                  ; L_088
( 364) 0480 ABE24C08    ; 	psh.w #S_090
( 365) 0484 ABE20000    ; 	psh.w #0
( 366) 0488 ABE20600    ; 	psh.w #6
( 367) 048C 20FFFF      ; 	jsr _swrite
( 368) 048F C206        ; 	adj #6
( 369) 0491 4CFC04      ; 	jmp L_078
( 370)                  ; L_089
( 371)                  ; ;   92:                     6:  write (' sixty');
( 372) 0494 ABC90600    ; 	cmp.w #6
( 373) 0498 D014        ; 	bne L_092
( 374)                  ; L_091
( 375) 049A ABE24608    ; 	psh.w #S_093
( 376) 049E ABE20000    ; 	psh.w #0
( 377) 04A2 ABE20600    ; 	psh.w #6
( 378) 04A6 20FFFF      ; 	jsr _swrite
( 379) 04A9 C206        ; 	adj #6
( 380) 04AB 4CFC04      ; 	jmp L_078
( 381)                  ; L_092
( 382)                  ; ;   93:                     7:  write (' seventy');
( 383) 04AE ABC90700    ; 	cmp.w #7
( 384) 04B2 D014        ; 	bne L_095
( 385)                  ; L_094
( 386) 04B4 ABE23E08    ; 	psh.w #S_096
( 387) 04B8 ABE20000    ; 	psh.w #0
( 388) 04BC ABE20800    ; 	psh.w #8
( 389) 04C0 20FFFF      ; 	jsr _swrite
( 390) 04C3 C206        ; 	adj #6
( 391) 04C5 4CFC04      ; 	jmp L_078
( 392)                  ; L_095
( 393)                  ; ;   94:                     8:  write (' eighty');
( 394) 04C8 ABC90800    ; 	cmp.w #8
( 395) 04CC D014        ; 	bne L_098
( 396)                  ; L_097
( 397) 04CE ABE23708    ; 	psh.w #S_099
( 398) 04D2 ABE20000    ; 	psh.w #0
( 399) 04D6 ABE20700    ; 	psh.w #7
( 400) 04DA 20FFFF      ; 	jsr _swrite
( 401) 04DD C206        ; 	adj #6
( 402) 04DF 4CFC04      ; 	jmp L_078
( 403)                  ; L_098
( 404)                  ; ;   95:                     9:  write (' ninety');
( 405) 04E2 ABC90900    ; 	cmp.w #9
( 406) 04E6 D014        ; 	bne L_101
( 407)                  ; L_100
( 408) 04E8 ABE23008    ; 	psh.w #S_102
( 409) 04EC ABE20000    ; 	psh.w #0
( 410) 04F0 ABE20700    ; 	psh.w #7
( 411) 04F4 20FFFF      ; 	jsr _swrite
( 412) 04F7 C206        ; 	adj #6
( 413) 04F9 4CFC04      ; 	jmp L_078
( 414)                  ; L_101
( 415)                  ; ;   96:                 END;
( 416)                  ; L_078
( 417)                  ; ;   97:             END {DoTens};
( 418) 04FC AB9A        ; 	txs.w
( 419) 04FE ABFA        ; 	plx.w
( 420) 0500 60          ; 	rts
( 421)                  ; 	.end dotens_076
( 422)                  ; ;   98: 
( 423)                  ; ;   99:         BEGIN {DoPart}
( 424)                  ; dopart_007 .sub
( 425) 0501 ABDA        ; 	phx.w
( 426) 0503 ABBA        ; 	tsx.w
( 427) 0505 C2F8        ; 	adj #-8
( 428)                  ; ;  100: 
( 429)                  ; ;  101:             {Break up the number part.}
( 430)                  ; ;  102:             hundredsdigit := part DIV 100;
( 431) 0507 ABB507      ; 	lda.w part_008,X
( 432) 050A AB48        ; 	pha.w
( 433) 050C ABE26400    ; 	psh.w #100
( 434)                  ; 	pha.w
( 435) 0510 20FFFF      ; 	jsr _idiv
( 436) 0513 C204        ; 	adj #4
( 437) 0515 AB95FF      ; 	sta.w hundredsdigit_009,X
( 438)                  ; ;  103:             tenspart      := part MOD 100;
( 439) 0518 ABB507      ; 	lda.w part_008,X
( 440) 051B AB48        ; 	pha.w
( 441) 051D ABE26400    ; 	psh.w #100
( 442)                  ; 	pha.w
( 443) 0521 20FFFF      ; 	jsr _idiv
( 444) 0524 C204        ; 	adj #4
( 445) 0526 1B          ; 	swp a
( 446) 0527 AB95FD      ; 	sta.w tenspart_010,X
( 447)                  ; ;  104: 
( 448)                  ; ;  105:             {Translate the hundreds digit.}
( 449)                  ; ;  106:             IF hundredsdigit > 0 THEN BEGIN
( 450) 052A ABB5FF      ; 	lda.w hundredsdigit_009,X
( 451) 052D AB48        ; 	pha.w
( 452) 052F A900        ; 	lda #0
( 453) 0531 CB4401      ; 	xma.w 1,S
( 454) 0534 CBD501      ; 	cmp.w 1,S
( 455) 0537 C202        ; 	adj #2
( 456) 0539 08          ; 	php
( 457) 053A A901        ; 	lda #1
( 458) 053C 28          ; 	plp
( 459) 053D AB1002      ; 	bgt L_105
( 460) 0540 A900        ; 	lda #0
( 461)                  ; L_105
( 462) 0542 ABC90100    ; 	cmp.w #1
( 463) 0546 F003        ; 	beq L_103
( 464) 0548 4C6805      ; 	jmp L_104
( 465)                  ; L_103
( 466)                  ; ;  107:                 DoOnes (hundredsdigit);
( 467) 054B ABB5FF      ; 	lda.w hundredsdigit_009,X
( 468) 054E AB48        ; 	pha.w
( 469) 0550 ABDA        ; 	phx.w
( 470) 0552 201F02      ; 	jsr doones_013
( 471) 0555 C204        ; 	adj #4
( 472)                  ; ;  108:                 write (' hundred');
( 473) 0557 ABE22808    ; 	psh.w #S_106
( 474) 055B ABE20000    ; 	psh.w #0
( 475) 055F ABE20800    ; 	psh.w #8
( 476) 0563 20FFFF      ; 	jsr _swrite
( 477) 0566 C206        ; 	adj #6
( 478)                  ; ;  109:             END;
( 479)                  ; L_104
( 480)                  ; ;  110: 
( 481)                  ; ;  111:             {Translate the tens part.}
( 482)                  ; ;  112:             IF  (tenspart >= 10) AND (tenspart <= 19) THEN BEGIN
( 483) 0568 ABB5FD      ; 	lda.w tenspart_010,X
( 484) 056B AB48        ; 	pha.w
( 485) 056D A90A        ; 	lda #10
( 486) 056F CB4401      ; 	xma.w 1,S
( 487) 0572 CBD501      ; 	cmp.w 1,S
( 488) 0575 C202        ; 	adj #2
( 489) 0577 08          ; 	php
( 490) 0578 A901        ; 	lda #1
( 491) 057A 28          ; 	plp
( 492) 057B AB5002      ; 	bge L_109
( 493) 057E A900        ; 	lda #0
( 494)                  ; L_109
( 495) 0580 AB48        ; 	pha.w
( 496) 0582 ABB5FD      ; 	lda.w tenspart_010,X
( 497) 0585 AB48        ; 	pha.w
( 498) 0587 A913        ; 	lda #19
( 499) 0589 CB4401      ; 	xma.w 1,S
( 500) 058C CBD501      ; 	cmp.w 1,S
( 501) 058F C202        ; 	adj #2
( 502) 0591 08          ; 	php
( 503) 0592 A901        ; 	lda #1
( 504) 0594 28          ; 	plp
( 505) 0595 AB3002      ; 	ble L_110
( 506) 0598 A900        ; 	lda #0
( 507)                  ; L_110
( 508) 059A CB3501      ; 	and.w 1,S
( 509) 059D C202        ; 	adj #2
( 510) 059F ABC90100    ; 	cmp.w #1
( 511) 05A3 F003        ; 	beq L_107
( 512) 05A5 4CB705      ; 	jmp L_108
( 513)                  ; L_107
( 514)                  ; ;  113:                 DoTeens (tenspart);
( 515) 05A8 ABB5FD      ; 	lda.w tenspart_010,X
( 516) 05AB AB48        ; 	pha.w
( 517) 05AD ABDA        ; 	phx.w
( 518) 05AF 201503      ; 	jsr doteens_043
( 519) 05B2 C204        ; 	adj #4
( 520)                  ; ;  114:             END
( 521)                  ; ;  115:             ELSE BEGIN
( 522) 05B4 4C3406      ; 	jmp L_111
( 523)                  ; L_108
( 524)                  ; ;  116:                 tensdigit := tenspart DIV 10;
( 525) 05B7 ABB5FD      ; 	lda.w tenspart_010,X
( 526) 05BA AB48        ; 	pha.w
( 527) 05BC ABE20A00    ; 	psh.w #10
( 528)                  ; 	pha.w
( 529) 05C0 20FFFF      ; 	jsr _idiv
( 530) 05C3 C204        ; 	adj #4
( 531) 05C5 AB95FB      ; 	sta.w tensdigit_011,X
( 532)                  ; ;  117:                 onesdigit := tenspart MOD 10;
( 533) 05C8 ABB5FD      ; 	lda.w tenspart_010,X
( 534) 05CB AB48        ; 	pha.w
( 535) 05CD ABE20A00    ; 	psh.w #10
( 536)                  ; 	pha.w
( 537) 05D1 20FFFF      ; 	jsr _idiv
( 538) 05D4 C204        ; 	adj #4
( 539) 05D6 1B          ; 	swp a
( 540) 05D7 AB95F9      ; 	sta.w onesdigit_012,X
( 541)                  ; ;  118: 
( 542)                  ; ;  119:                 IF tensdigit > 0 THEN DoTens (tensdigit);
( 543) 05DA ABB5FB      ; 	lda.w tensdigit_011,X
( 544) 05DD AB48        ; 	pha.w
( 545) 05DF A900        ; 	lda #0
( 546) 05E1 CB4401      ; 	xma.w 1,S
( 547) 05E4 CBD501      ; 	cmp.w 1,S
( 548) 05E7 C202        ; 	adj #2
( 549) 05E9 08          ; 	php
( 550) 05EA A901        ; 	lda #1
( 551) 05EC 28          ; 	plp
( 552) 05ED AB1002      ; 	bgt L_114
( 553) 05F0 A900        ; 	lda #0
( 554)                  ; L_114
( 555) 05F2 ABC90100    ; 	cmp.w #1
( 556) 05F6 F003        ; 	beq L_112
( 557) 05F8 4C0706      ; 	jmp L_113
( 558)                  ; L_112
( 559) 05FB ABB5FB      ; 	lda.w tensdigit_011,X
( 560) 05FE AB48        ; 	pha.w
( 561) 0600 ABDA        ; 	phx.w
( 562) 0602 202504      ; 	jsr dotens_076
( 563) 0605 C204        ; 	adj #4
( 564)                  ; L_113
( 565)                  ; ;  120:                 IF onesdigit > 0 THEN DoOnes (onesdigit);
( 566) 0607 ABB5F9      ; 	lda.w onesdigit_012,X
( 567) 060A AB48        ; 	pha.w
( 568) 060C A900        ; 	lda #0
( 569) 060E CB4401      ; 	xma.w 1,S
( 570) 0611 CBD501      ; 	cmp.w 1,S
( 571) 0614 C202        ; 	adj #2
( 572) 0616 08          ; 	php
( 573) 0617 A901        ; 	lda #1
( 574) 0619 28          ; 	plp
( 575) 061A AB1002      ; 	bgt L_117
( 576) 061D A900        ; 	lda #0
( 577)                  ; L_117
( 578) 061F ABC90100    ; 	cmp.w #1
( 579) 0623 F003        ; 	beq L_115
( 580) 0625 4C3406      ; 	jmp L_116
( 581)                  ; L_115
( 582) 0628 ABB5F9      ; 	lda.w onesdigit_012,X
( 583) 062B AB48        ; 	pha.w
( 584) 062D ABDA        ; 	phx.w
( 585) 062F 201F02      ; 	jsr doones_013
( 586) 0632 C204        ; 	adj #4
( 587)                  ; L_116
( 588)                  ; ;  121:             END;
( 589)                  ; L_111
( 590)                  ; ;  122:         END {DoPart};
( 591) 0634 AB9A        ; 	txs.w
( 592) 0636 ABFA        ; 	plx.w
( 593) 0638 60          ; 	rts
( 594)                  ; 	.end dopart_007
( 595)                  ; ;  123: 
( 596)                  ; ;  124:     BEGIN {Translate}
( 597)                  ; translate_003 .sub
( 598) 0639 ABDA        ; 	phx.w
( 599) 063B ABBA        ; 	tsx.w
( 600) 063D C2FC        ; 	adj #-4
( 601)                  ; ;  125: 
( 602)                  ; ;  126:         {Break up the number.}
( 603)                  ; ;  127:         partbefore := n DIV 1000;
( 604) 063F ABB507      ; 	lda.w n_004,X
( 605) 0642 AB48        ; 	pha.w
( 606) 0644 ABE2E803    ; 	psh.w #1000
( 607)                  ; 	pha.w
( 608) 0648 20FFFF      ; 	jsr _idiv
( 609) 064B C204        ; 	adj #4
( 610) 064D AB95FF      ; 	sta.w partbefore_005,X
( 611)                  ; ;  128:         partafter  := n MOD 1000;
( 612) 0650 ABB507      ; 	lda.w n_004,X
( 613) 0653 AB48        ; 	pha.w
( 614) 0655 ABE2E803    ; 	psh.w #1000
( 615)                  ; 	pha.w
( 616) 0659 20FFFF      ; 	jsr _idiv
( 617) 065C C204        ; 	adj #4
( 618) 065E 1B          ; 	swp a
( 619) 065F AB95FD      ; 	sta.w partafter_006,X
( 620)                  ; ;  129: 
( 621)                  ; ;  130:         IF partbefore > 0 THEN BEGIN
( 622) 0662 ABB5FF      ; 	lda.w partbefore_005,X
( 623) 0665 AB48        ; 	pha.w
( 624) 0667 A900        ; 	lda #0
( 625) 0669 CB4401      ; 	xma.w 1,S
( 626) 066C CBD501      ; 	cmp.w 1,S
( 627) 066F C202        ; 	adj #2
( 628) 0671 08          ; 	php
( 629) 0672 A901        ; 	lda #1
( 630) 0674 28          ; 	plp
( 631) 0675 AB1002      ; 	bgt L_120
( 632) 0678 A900        ; 	lda #0
( 633)                  ; L_120
( 634) 067A ABC90100    ; 	cmp.w #1
( 635) 067E F003        ; 	beq L_118
( 636) 0680 4CA006      ; 	jmp L_119
( 637)                  ; L_118
( 638)                  ; ;  131:             DoPart (partbefore);
( 639) 0683 ABB5FF      ; 	lda.w partbefore_005,X
( 640) 0686 AB48        ; 	pha.w
( 641) 0688 ABDA        ; 	phx.w
( 642) 068A 200105      ; 	jsr dopart_007
( 643) 068D C204        ; 	adj #4
( 644)                  ; ;  132:             write (' thousand');
( 645) 068F ABE21F08    ; 	psh.w #S_121
( 646) 0693 ABE20000    ; 	psh.w #0
( 647) 0697 ABE20900    ; 	psh.w #9
( 648) 069B 20FFFF      ; 	jsr _swrite
( 649) 069E C206        ; 	adj #6
( 650)                  ; ;  133:         END;
( 651)                  ; L_119
( 652)                  ; ;  134: 
( 653)                  ; ;  135:         IF partafter > 0 THEN DoPart (partafter);
( 654) 06A0 ABB5FD      ; 	lda.w partafter_006,X
( 655) 06A3 AB48        ; 	pha.w
( 656) 06A5 A900        ; 	lda #0
( 657) 06A7 CB4401      ; 	xma.w 1,S
( 658) 06AA CBD501      ; 	cmp.w 1,S
( 659) 06AD C202        ; 	adj #2
( 660) 06AF 08          ; 	php
( 661) 06B0 A901        ; 	lda #1
( 662) 06B2 28          ; 	plp
( 663) 06B3 AB1002      ; 	bgt L_124
( 664) 06B6 A900        ; 	lda #0
( 665)                  ; L_124
( 666) 06B8 ABC90100    ; 	cmp.w #1
( 667) 06BC F003        ; 	beq L_122
( 668) 06BE 4CCD06      ; 	jmp L_123
( 669)                  ; L_122
( 670) 06C1 ABB5FD      ; 	lda.w partafter_006,X
( 671) 06C4 AB48        ; 	pha.w
( 672) 06C6 ABDA        ; 	phx.w
( 673) 06C8 200105      ; 	jsr dopart_007
( 674) 06CB C204        ; 	adj #4
( 675)                  ; L_123
( 676)                  ; ;  136:     END {Translate};
( 677) 06CD AB9A        ; 	txs.w
( 678) 06CF ABFA        ; 	plx.w
( 679) 06D1 60          ; 	rts
( 680)                  ; 	.end translate_003
( 681)                  ; ;  137: 
( 682)                  ; ;  138: 
( 683)                  ; ;  139: BEGIN {NumberTranslator}
( 684)                  ; _pc65_main .sub
( 685) 06D2 ABDA        ; 	phx.w
( 686) 06D4 ABBA        ; 	tsx.w
( 687)                  ; ;  140: 
( 688)                  ; ;  141:     {Loop to read, write, check, and translate the numbers.}
( 689)                  ; ;  142:     REPEAT
( 690)                  ; L_125
( 691)                  ; ;  143:         read (number);
( 692) 06D6 ABE2E408    ; 	psh.w #number_002
( 693) 06DA 20FFFF      ; 	jsr _iread
( 694) 06DD 6B          ; 	pli
( 695) 06DE AB8300      ; 	sta.w 0,I++
( 696)                  ; ;  144:         write (number:6, ' :');
( 697) 06E1 ABADE408    ; 	lda.w number_002
( 698) 06E5 AB48        ; 	pha.w
( 699) 06E7 ABE20600    ; 	psh.w #6
( 700)                  ; 	pha.w
( 701) 06EB 20FFFF      ; 	jsr _iwrite
( 702) 06EE C204        ; 	adj #4
( 703) 06F0 ABE21D08    ; 	psh.w #S_127
( 704) 06F4 ABE20000    ; 	psh.w #0
( 705) 06F8 ABE20200    ; 	psh.w #2
( 706) 06FC 20FFFF      ; 	jsr _swrite
( 707) 06FF C206        ; 	adj #6
( 708)                  ; ;  145: 
( 709)                  ; ;  146:         IF number < 0 THEN BEGIN
( 710) 0701 ABADE408    ; 	lda.w number_002
( 711) 0705 AB48        ; 	pha.w
( 712) 0707 A900        ; 	lda #0
( 713) 0709 CB4401      ; 	xma.w 1,S
( 714) 070C CBD501      ; 	cmp.w 1,S
( 715) 070F C202        ; 	adj #2
( 716) 0711 08          ; 	php
( 717) 0712 A901        ; 	lda #1
( 718) 0714 28          ; 	plp
( 719) 0715 AB7002      ; 	blt L_130
( 720) 0718 A900        ; 	lda #0
( 721)                  ; L_130
( 722) 071A ABC90100    ; 	cmp.w #1
( 723) 071E F003        ; 	beq L_128
( 724) 0720 4C3707      ; 	jmp L_129
( 725)                  ; L_128
( 726)                  ; ;  147:             write (' ***** Error -- number < 0');
( 727) 0723 ABE20308    ; 	psh.w #S_131
( 728) 0727 ABE20000    ; 	psh.w #0
( 729) 072B ABE21A00    ; 	psh.w #26
( 730) 072F 20FFFF      ; 	jsr _swrite
( 731) 0732 C206        ; 	adj #6
( 732)                  ; ;  148:         END
( 733)                  ; ;  149:         ELSE IF number > maxnumber THEN BEGIN
( 734) 0734 4CBE07      ; 	jmp L_132
( 735)                  ; L_129
( 736) 0737 ABADE408    ; 	lda.w number_002
( 737) 073B AB48        ; 	pha.w
( 738) 073D ABA93075    ; 	lda.w #30000
( 739) 0741 CB4401      ; 	xma.w 1,S
( 740) 0744 CBD501      ; 	cmp.w 1,S
( 741) 0747 C202        ; 	adj #2
( 742) 0749 08          ; 	php
( 743) 074A A901        ; 	lda #1
( 744) 074C 28          ; 	plp
( 745) 074D AB1002      ; 	bgt L_135
( 746) 0750 A900        ; 	lda #0
( 747)                  ; L_135
( 748) 0752 ABC90100    ; 	cmp.w #1
( 749) 0756 F003        ; 	beq L_133
( 750) 0758 4C7C07      ; 	jmp L_134
( 751)                  ; L_133
( 752)                  ; ;  150:             write (' ***** Error -- number > ', maxnumber:1);
( 753) 075B ABE2EA07    ; 	psh.w #S_136
( 754) 075F ABE20000    ; 	psh.w #0
( 755) 0763 ABE21900    ; 	psh.w #25
( 756) 0767 20FFFF      ; 	jsr _swrite
( 757) 076A C206        ; 	adj #6
( 758) 076C ABE23075    ; 	psh.w #30000
( 759)                  ; 	pha.w
( 760) 0770 ABE20100    ; 	psh.w #1
( 761)                  ; 	pha.w
( 762) 0774 20FFFF      ; 	jsr _iwrite
( 763) 0777 C204        ; 	adj #4
( 764)                  ; ;  151:         END
( 765)                  ; ;  152:         ELSE IF number = 0 THEN BEGIN
( 766) 0779 4CBE07      ; 	jmp L_137
( 767)                  ; L_134
( 768) 077C ABADE408    ; 	lda.w number_002
( 769) 0780 AB48        ; 	pha.w
( 770) 0782 A900        ; 	lda #0
( 771) 0784 CB4401      ; 	xma.w 1,S
( 772) 0787 CBD501      ; 	cmp.w 1,S
( 773) 078A C202        ; 	adj #2
( 774) 078C 08          ; 	php
( 775) 078D A901        ; 	lda #1
( 776) 078F 28          ; 	plp
( 777) 0790 F002        ; 	beq L_140
( 778) 0792 A900        ; 	lda #0
( 779)                  ; L_140
( 780) 0794 ABC90100    ; 	cmp.w #1
( 781) 0798 F003        ; 	beq L_138
( 782) 079A 4CB107      ; 	jmp L_139
( 783)                  ; L_138
( 784)                  ; ;  153:             write (' zero');
( 785) 079D ABE2E507    ; 	psh.w #S_141
( 786) 07A1 ABE20000    ; 	psh.w #0
( 787) 07A5 ABE20500    ; 	psh.w #5
( 788) 07A9 20FFFF      ; 	jsr _swrite
( 789) 07AC C206        ; 	adj #6
( 790)                  ; ;  154:         END
( 791)                  ; ;  155:         ELSE BEGIN
( 792) 07AE 4CBE07      ; 	jmp L_142
( 793)                  ; L_139
( 794)                  ; ;  156:             Translate (number);
( 795) 07B1 ABADE408    ; 	lda.w number_002
( 796) 07B5 AB48        ; 	pha.w
( 797) 07B7 ABDA        ; 	phx.w
( 798) 07B9 203906      ; 	jsr translate_003
( 799) 07BC C204        ; 	adj #4
( 800)                  ; ;  157:         END;
( 801)                  ; L_142
( 802)                  ; L_137
( 803)                  ; L_132
( 804)                  ; ;  158: 
( 805)                  ; ;  159:         writeln;  {complete output line}
( 806) 07BE 20FFFF      ; 	jsr _writeln
( 807)                  ; ;  160:     UNTIL number = terminator;
( 808) 07C1 ABADE408    ; 	lda.w number_002
( 809) 07C5 AB48        ; 	pha.w
( 810) 07C7 A900        ; 	lda #0
( 811) 07C9 CB4401      ; 	xma.w 1,S
( 812) 07CC CBD501      ; 	cmp.w 1,S
( 813) 07CF C202        ; 	adj #2
( 814) 07D1 08          ; 	php
( 815) 07D2 A901        ; 	lda #1
( 816) 07D4 28          ; 	plp
( 817) 07D5 F002        ; 	beq L_143
( 818) 07D7 A900        ; 	lda #0
( 819)                  ; L_143
( 820) 07D9 ABC90100    ; 	cmp.w #1
( 821) 07DD F003        ; 	beq L_126
( 822) 07DF 4CD606      ; 	jmp L_125
( 823)                  ; L_126
( 824)                  ; ;  161: END {NumberTranslator}.
( 825) 07E2 ABFA        ; 	plx.w
( 826) 07E4 60          ; 	rts
( 827)                  ; 	.end _pc65_main
( 828)                  ; 
( 829)                  ; 	.dat
( 830)                  ; 
( 831) 07E5 207A6572    ; S_141 .str " zero"
       07E9 6F
( 832) 07EA 202A2A2A    ; S_136 .str " ***** Error -- number > "
       07EE 2A2A204572726F72202D2D206E756D626572203E20
( 833) 0803 202A2A2A    ; S_131 .str " ***** Error -- number < 0"
       0807 2A2A204572726F72202D2D206E756D626572203C2030
( 834) 081D 203A        ; S_127 .str " :"
( 835) 081F 2074686F    ; S_121 .str " thousand"
       0823 7573616E64
( 836) 0828 2068756E    ; S_106 .str " hundred"
       082C 64726564
( 837) 0830 206E696E    ; S_102 .str " ninety"
       0834 657479
( 838) 0837 20656967    ; S_099 .str " eighty"
       083B 687479
( 839) 083E 20736576    ; S_096 .str " seventy"
       0842 656E7479
( 840) 0846 20736978    ; S_093 .str " sixty"
       084A 7479
( 841) 084C 20666966    ; S_090 .str " fifty"
       0850 7479
( 842) 0852 20666F72    ; S_087 .str " forty"
       0856 7479
( 843) 0858 20746869    ; S_084 .str " thirty"
       085C 727479
( 844) 085F 20747765    ; S_081 .str " twenty"
       0863 6E7479
( 845) 0866 206E696E    ; S_075 .str " nineteen"
       086A 657465656E
( 846) 086F 20656967    ; S_072 .str " eighteen"
       0873 687465656E
( 847) 0878 20736576    ; S_069 .str " seventeen"
       087C 656E7465656E
( 848) 0882 20736978    ; S_066 .str " sixteen"
       0886 7465656E
( 849) 088A 20666966    ; S_063 .str " fifteen"
       088E 7465656E
( 850) 0892 20666F75    ; S_060 .str " fourteen"
       0896 727465656E
( 851) 089B 20746869    ; S_057 .str " thirteen"
       089F 727465656E
( 852) 08A4 20747765    ; S_054 .str " twelve"
       08A8 6C7665
( 853) 08AB 20656C65    ; S_051 .str " eleven"
       08AF 76656E
( 854) 08B2 2074656E    ; S_048 .str " ten"
( 855) 08B6 206E696E    ; S_042 .str " nine"
       08BA 65
( 856) 08BB 20656967    ; S_039 .str " eight"
       08BF 6874
( 857) 08C1 20736576    ; S_036 .str " seven"
       08C5 656E
( 858) 08C7 20736978    ; S_033 .str " six"
( 859) 08CB 20666976    ; S_030 .str " five"
       08CF 65
( 860) 08D0 20666F75    ; S_027 .str " four"
       08D4 72
( 861) 08D5 20746872    ; S_024 .str " three"
       08D9 6565
( 862) 08DB 2074776F    ; S_021 .str " two"
( 863) 08DF 206F6E65    ; S_018 .str " one"
( 864) 08E3 00          ; _bss_start .byt 1
( 865) 08E4 0000        ; number_002 .wrd 1
( 866) 08E6 00          ; _bss_end .byt 1
( 867) 08E7 00000000    ; _stk .byt 1023
       08EB 0000000000000000000000000000000000000000000000000000000000000000
       090B 0000000000000000000000000000000000000000000000000000000000000000
       092B 0000000000000000000000000000000000000000000000000000000000000000
       094B 0000000000000000000000000000000000000000000000000000000000000000
       096B 0000000000000000000000000000000000000000000000000000000000000000
       098B 0000000000000000000000000000000000000000000000000000000000000000
       09AB 0000000000000000000000000000000000000000000000000000000000000000
       09CB 0000000000000000000000000000000000000000000000000000000000000000
       09EB 0000000000000000000000000000000000000000000000000000000000000000
       0A0B 0000000000000000000000000000000000000000000000000000000000000000
       0A2B 0000000000000000000000000000000000000000000000000000000000000000
       0A4B 0000000000000000000000000000000000000000000000000000000000000000
       0A6B 0000000000000000000000000000000000000000000000000000000000000000
       0A8B 0000000000000000000000000000000000000000000000000000000000000000
       0AAB 0000000000000000000000000000000000000000000000000000000000000000
       0ACB 0000000000000000000000000000000000000000000000000000000000000000
       0AEB 0000000000000000000000000000000000000000000000000000000000000000
       0B0B 0000000000000000000000000000000000000000000000000000000000000000
       0B2B 0000000000000000000000000000000000000000000000000000000000000000
       0B4B 0000000000000000000000000000000000000000000000000000000000000000
       0B6B 0000000000000000000000000000000000000000000000000000000000000000
       0B8B 0000000000000000000000000000000000000000000000000000000000000000
       0BAB 0000000000000000000000000000000000000000000000000000000000000000
       0BCB 0000000000000000000000000000000000000000000000000000000000000000
       0BEB 0000000000000000000000000000000000000000000000000000000000000000
       0C0B 0000000000000000000000000000000000000000000000000000000000000000
       0C2B 0000000000000000000000000000000000000000000000000000000000000000
       0C4B 0000000000000000000000000000000000000000000000000000000000000000
       0C6B 0000000000000000000000000000000000000000000000000000000000000000
       0C8B 0000000000000000000000000000000000000000000000000000000000000000
       0CAB 0000000000000000000000000000000000000000000000000000000000000000
       0CCB 000000000000000000000000000000000000000000000000000000
( 868) 0CE6 00          ; _stk_top .byt 1
( 869)                  ; 
( 870)                  ; 	.end
