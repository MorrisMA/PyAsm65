(   1)                  ; ;    1: PROGRAM eratosthenes(output);
(   2)                  ;     .stk 256
(   3)                  ;     .cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ;     tsx.w       ; Preserve original stack pointer
(   9) 0202 CBA23909    ;     lds.w #_stk_top ; Initialize program stack pointer
(  10) 0206 9C4604      ;     stz _bss_start
(  11) 0209 ABA24604    ;     ldx.w #_bss_start
(  12) 020D ABA04704    ;     ldy.w #_bss_start+1
(  13) 0211 ABA93909    ;     lda.w #_stk_top
(  14) 0215 38          ;     sec
(  15) 0216 ABE94604    ;     sbc.w #_bss_start
(  16) 021A 540A        ;     mov #10
(  17) 021C 4C1F02      ;     jmp _pc65_main
(  18)                  ; ;    2:
(  19)                  ; ;    3: CONST
(  20)                  ; ;    4:     max = 1000;
(  21)                  ; ;    5:
(  22)                  ; ;    6: VAR
(  23)                  ; ;    7:     sieve : ARRAY [1..max] OF BOOLEAN;
(  24)                  ; ;    8:     i, j, limit, prime, factor : INTEGER;
(  25)                  ; ;    9:
(  26)                  ; ;   10: BEGIN
(  27)                  ; _pc65_main .sub
(  28) 021F ABDA        ;     phx.w
(  29) 0221 ABBA        ;     tsx.w
(  30)                  ; ;   11:     limit := max DIV 2;
(  31) 0223 ABA9F401    ;     lda.w #500
(  32) 0227 AB8D3308    ;     sta.w limit_005
(  33)                  ; ;   12:     sieve[1] := FALSE;
(  34) 022B A900        ;     lda #0
(  35) 022D 8D4704      ;     sta sieve_002
(  36)                  ; ;   13:
(  37)                  ; ;   14:     FOR i := 2 TO max DO
(  38)                  ; L_008
(  39)                  ; L_009
(  40)                  ; ;   15:         sieve[i] := TRUE;
(  41) 0230 A9FF        ;     lda #0xFF
(  42) 0232 8D4804      ;     sta sieve_002+1
(  43) 0235 EB0B        ;     dup x
(  44) 0237 ABA24804    ;     ldx.w #sieve_002+1
(  45) 023B ABA04904    ;     ldy.w #sieve_002+2
(  46) 023F ABA9E703    ;     lda.w #1000-1
(  47) 0243 540A        ;     mov #10
(  48) 0245 EB2B        ;     rot x
(  49)                  ; L_010
(  50)                  ; ;   16:
(  51)                  ; ;   17:     prime := 1;
(  52) 0247 A901        ;     lda #1
(  53) 0249 AB8D3508    ;     sta.w prime_006
(  54)                  ; ;   18:
(  55)                  ; ;   19:     REPEAT
(  56)                  ; L_011
(  57)                  ; ;   20:         prime := prime + 1;
(  58) 024D ABEE3508    ;     inc.w prime_006
(  59)                  ; ;   21:         WHILE NOT sieve[prime] DO
(  60)                  ; L_013
(  61) 0251 ABE24704    ;     psh.w #sieve_002
(  62) 0255 ABAC3508    ;     ldy.w prime_006
(  63) 0259 AB88        ;     dey.w
(  64) 025B 8BB101      ;     lda (1,S),Y
(  65) 025E C202        ;     adj #2
(  66) 0260 D006        ;     bne L_015
(  67)                  ; L_014
(  68)                  ; ;   22:             prime := prime + 1;
(  69) 0262 ABEE3508    ;     inc.w prime_006
(  70) 0266 80E9        ;     bra L_013
(  71)                  ; L_015
(  72)                  ; ;   23:
(  73)                  ; ;   24:         factor := 2*prime;
(  74) 0268 ABAD3508    ;     lda.w prime_006
(  75) 026C AB0A        ;     asl.w a
(  76) 026E AB8D3708    ;     sta.w factor_007
(  77)                  ; ;   25:
(  78)                  ; ;   26:         WHILE factor <= max DO BEGIN
(  79)                  ; L_016
(  80) 0272 ABAD3708    ;     lda.w factor_007
(  81) 0276 ABC9E803    ;     cmp.w #1000
(  82) 027A AB1020      ;     bgt L_018
(  83)                  ; L_017
(  84)                  ; ;   27:             sieve[factor] := FALSE;
(  85) 027D ABE24704    ;     psh.w #sieve_002
(  86) 0281 ABAC3708    ;     ldy.w factor_007
(  87) 0285 AB88        ;     dey.w
(  88) 0287 A900        ;     lda #0
(  89) 0289 8B9101      ;     sta (1,S),Y
(  90) 028C C202        ;     adj #2
(  91)                  ; ;   28:             factor := factor + prime;
(  92) 028E ABAD3708    ;     lda.w factor_007
(  93) 0292 18          ;     clc
(  94) 0293 AB6D3508    ;     adc.w prime_006
(  95) 0297 AB8D3708    ;     sta.w factor_007
(  96)                  ; ;   29:         END
(  97) 029B 80D5        ;     bra L_016
(  98)                  ; ;   30:     UNTIL prime > limit;
(  99)                  ; L_018
( 100) 029D ABAD3508    ;     lda.w prime_006
( 101) 02A1 ABCD3308    ;     cmp.w limit_005
( 102) 02A5 BB30A4FF    ;     jle L_011
( 103)                  ; L_012
( 104)                  ; ;   31:
( 105)                  ; ;   32:     writeln('Sieve of Eratosthenes');
( 106) 02A9 ABE23104    ;     psh.w #S_021
( 107) 02AD ABE20000    ;     psh.w #0
( 108) 02B1 ABE21500    ;     psh.w #21
( 109) 02B5 209C03      ;     jsr _swrite
( 110) 02B8 C206        ;     adj #6
( 111) 02BA 209603      ;     jsr _writeln
( 112)                  ; ;   33:     writeln;
( 113) 02BD 209603      ;     jsr _writeln
( 114)                  ; ;   34:
( 115)                  ; ;   35:     i := 1;
( 116) 02C0 A901        ;     lda #1
( 117) 02C2 AB8D2F08    ;     sta.w i_003
( 118)                  ; ;   36:     REPEAT
( 119)                  ; L_022
( 120)                  ; ;   37:         FOR j := 0 TO 19 DO BEGIN
( 121) 02C6 A900        ;     lda #0
( 122) 02C8 AB8D3108    ;     sta.w j_004
( 123)                  ; L_024
( 124) 02CC A913        ;     lda #19
( 125) 02CE ABCD3108    ;     cmp.w j_004
( 126) 02D2 AB7046      ;     blt L_026
( 127)                  ; L_025
( 128)                  ; ;   38:             prime := i + j;
( 129) 02D5 ABAD2F08    ;     lda.w i_003
( 130) 02D9 18          ;     clc
( 131) 02DA AB6D3108    ;     adc.w j_004
( 132) 02DE AB8D3508    ;     sta.w prime_006
( 133)                  ; ;   39:             IF sieve[prime] THEN
( 134) 02E2 ABE24704    ;     psh.w #sieve_002
( 135) 02E6 ABAC3508    ;     ldy.w prime_006
( 136) 02EA AB88        ;     dey.w
( 137) 02EC 8BB101      ;     lda (1,S),Y
( 138) 02EF C202        ;     adj #2
( 139) 02F1 F011        ;     beq L_028
( 140)                  ; L_027
( 141)                  ; ;   40:                 write(prime:3)
( 142) 02F3 ABAD3508    ;     lda.w prime_006
( 143) 02F7 AB48        ;     pha.w
( 144) 02F9 A903        ;     lda #3
( 145) 02FB AB48        ;     pha.w
( 146) 02FD 20AE03      ;     jsr _iwrite
( 147) 0300 C204        ;     adj #4
( 148)                  ; ;   41:             ELSE
( 149) 0302 8011        ;     bra L_029
( 150)                  ; L_028
( 151)                  ; ;   42:                 write('   ');
( 152) 0304 ABE22E04    ;     psh.w #S_030
( 153) 0308 ABE20000    ;     psh.w #0
( 154) 030C ABE20300    ;     psh.w #3
( 155) 0310 209C03      ;     jsr _swrite
( 156) 0313 C206        ;     adj #6
( 157)                  ; L_029
( 158)                  ; ;   43:         END;
( 159) 0315 ABEE3108    ;     inc.w j_004
( 160) 0319 80B1        ;     bra L_024
( 161)                  ; L_026
( 162)                  ; ;   44:         writeln;
( 163) 031B 209603      ;     jsr _writeln
( 164)                  ; ;   45:         i := i + 20
( 165) 031E ABAD2F08    ;     lda.w i_003
( 166) 0322 18          ;     clc
( 167) 0323 AB691400    ;     adc.w #20
( 168) 0327 AB8D2F08    ;     sta.w i_003
( 169)                  ; ;   46:     UNTIL i > max
( 170) 032B ABC9E803    ;     cmp.w #1000
( 171) 032F AB3094      ;     ble L_022
( 172)                  ; ;   47: END.
( 173)                  ; L_023
( 174) 0332 ABFA        ;     plx.w
( 175) 0334 60          ;     rts
( 176)                  ;     .end _pc65_main
( 177)                  ; ;
( 178)                  ; ;   unsigned division 16 x 16
( 179)                  ; ;
( 180)                  ;             .cod
( 181)                  ; ;
( 182)                  ; _Q          .equ    5
( 183)                  ; _D          .equ    3
( 184)                  ; ;
( 185)                  ; _idiv       .proc
( 186) 0335 A900        ;             lda #0          ; clear remainder (A)
( 187) 0337 0B          ;             dup a           ; push
( 188) 0338 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 189) 033B A010        ;             ldy #16         ; bit counter
( 190)                  ; ;
( 191)                  ; _idiv_Lp
( 192) 033D 18          ;             clc
( 193) 033E AB0A        ;             asl.w a         ; shift AQ left
( 194) 0340 1B          ;             swp a
( 195) 0341 AB2A        ;             rol.w a
( 196)                  ; ;
( 197) 0343 B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 198)                  ; ;
( 199)                  ; _idiv_Minus
( 200) 0345 38          ;             sec
( 201) 0346 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 202)                  ; ;
( 203) 0349 8004        ;             bra _idiv_Next
( 204)                  ; ;
( 205)                  ; _idiv_Plus
( 206) 034B 18          ;             clc
( 207) 034C CB7503      ;             adc.w _D,S      ; add divisor (D)
( 208)                  ; ;
( 209)                  ; _idiv_Next
( 210) 034F 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 211) 0350 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 212) 0352 AB1A        ;             inc.w a
( 213)                  ; ;
( 214)                  ; _idiv_Dec
( 215) 0354 88          ;             dey             ; loop until loop counter == 0
( 216) 0355 D0E6        ;             bne _idiv_Lp
( 217)                  ; ;
( 218)                  ; _idiv_Exit
( 219) 0357 1B          ;             swp a           ; Test remainder
( 220) 0358 AB090000    ;             ora.w #0
( 221) 035C 1004        ;             bpl _idiv_Finish
( 222) 035E 18          ;             clc
( 223) 035F CB7503      ;             adc.w 3,S
( 224)                  ; _idiv_Finish
( 225) 0362 1B          ;             swp a
( 226)                  ; ;
( 227) 0363 60          ;             rts
( 228)                  ; ;
( 229)                  ;             .endp _idiv
( 230)                  ; ;
( 231)                  ; ; signed multiplication: 16 x 16 => 32
( 232)                  ; ;
( 233)                  ;             .cod
( 234)                  ; ;
( 235)                  ; _M          .equ    5
( 236)                  ; _R          .equ    3
( 237)                  ; ;
( 238)                  ; _imul       .proc
( 239) 0364 A010        ;             ldy #16             ; y = bit count
( 240) 0366 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 241) 0368 0B          ;             dup a               ; A = { 0,  0,  x}
( 242) 0369 0B          ;             dup a               ; A = { 0,  0,  0}
( 243) 036A CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 244) 036D 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 245) 036F AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 246) 0373 18          ;             clc                 ; initialize Booth recoding bit
( 247) 0374 2B          ;             rot a               ; A = {PH, PL, `R}
( 248)                  ; ;
( 249) 0375 8003        ;             bra _imul_TstB
( 250)                  ; ;
( 251)                  ; _imul_Lp
( 252) 0377 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 253) 0379 2B          ;             rot a               ; A = {PH, PL, `R}
( 254)                  ; _imul_TstB
( 255) 037A 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 256)                  ; ;
( 257)                  ; _imul_AddShft
( 258) 037C 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 259)                  ; _imul_AddM
( 260) 037E 18          ;             clc
( 261) 037F CB7505      ;             adc.w _M,S          ; PH += M
( 262) 0382 8006        ;             bra _imul_ShftP
( 263)                  ; ;
( 264)                  ; _imul_SubShft
( 265) 0384 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 266)                  ; _imul_SubM
( 267) 0386 38          ;             sec
( 268) 0387 CBF505      ;             sbc.w _M,S          ; PH -= M
( 269)                  ; ;
( 270)                  ; _imul_ShftP
( 271) 038A BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 272) 038C 2B          ;             rot a               ; A = {PL, `R, PH}
( 273) 038D AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 274) 038F 2B          ;             rot a               ; A = {`R, PH, PL}
( 275)                  ; ;
( 276)                  ; _imul_Dec
( 277) 0390 88          ;             dey
( 278) 0391 D0E4        ;             bne _imul_Lp
( 279)                  ; ;
( 280)                  ; _imul_Exit
( 281) 0393 2B          ;             rot a               ; A = {PH, PL, `R}
( 282) 0394 1B          ;             swp a               ; A = {PL, PH, `R}
( 283)                  ; ;
( 284) 0395 60          ;             rts
( 285)                  ; ;
( 286)                  ;             .endp _imul
( 287)                  ; 
( 288)                  ; ;
( 289)                  ; ; put <newLine> to output
( 290)                  ; ;
( 291)                  ;             .cod
( 292)                  ; ;
( 293)                  ; _newLine    .equ    0x0A
( 294)                  ; _putChar    .equ    0xF001
( 295)                  ; ;
( 296)                  ; _writeln    .proc
( 297) 0396 A90A        ;             lda #_newLine
( 298) 0398 8D01F0      ;             sta _putChar
( 299)                  ; ;
( 300) 039B 60          ;             rts
( 301)                  ; ;
( 302)                  ;             .endp _writeln
( 303)                  ; ;
( 304)                  ; ; put string to output
( 305)                  ; ;
( 306)                  ;             .cod
( 307)                  ; ;
( 308)                  ; _sPtrOff    .equ    7
( 309)                  ; _sLenOff    .equ    3
( 310)                  ; ;
( 311)                  ; _swrite     .proc
( 312) 039C CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 313) 039F CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 314) 03A2 9B0B        ;             tai                     ; transfer sptr to IP
( 315)                  ; ;
( 316)                  ; _swrite_Lp
( 317) 03A4 A300        ;             lda 0,I++               ; load char from strig
( 318) 03A6 8D01F0      ;             sta _putChar            ; write char to output
( 319)                  ; ;
( 320) 03A9 AB88        ;             dey.w                   ; loop while string length <> 0
( 321) 03AB D0F7        ;             bne _swrite_Lp
( 322)                  ; ;
( 323) 03AD 60          ;             rts
( 324)                  ; ;
( 325)                  ;             .endp _swrite
( 326)                  ; ;
( 327)                  ; ; put integer to output
( 328)                  ; ;
( 329)                  ;             .cod
( 330)                  ; ;
( 331)                  ; _iValOff    .equ    7
( 332)                  ; _fLenOff    .equ    5
( 333)                  ; _iCntOff    .equ    -1
( 334)                  ; ;
( 335)                  ; _iwrite     .proc
( 336) 03AE ABDA        ;             phx.w                   ; save current base pointer
( 337) 03B0 ABBA        ;             tsx.w                   ; assign new base pointer
( 338)                  ; ;
( 339) 03B2 B505        ;             lda _fLenOff,X          ; load field width specifier
( 340) 03B4 C905        ;             cmp #5                  ; compare against max integer digit count
( 341) 03B6 AB3002      ;             ble _iwrite_SetCnt
( 342) 03B9 A905        ;             lda #5
( 343)                  ; ;
( 344)                  ; _iwrite_SetCnt
( 345) 03BB AB48        ;             pha.w                   ; set iteration count to fld width
( 346) 03BD ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 347)                  ; ;
( 348)                  ; _iwrite_Lp
( 349) 03C0 AB48        ;             pha.w                   ; push dividend argument to _idiv
( 350) 03C2 ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 351) 03C6 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 352) 03CA C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 353) 03CC 1B          ;             swp a                   ; put the remainder into ATOS
( 354)                  ; ;
( 355) 03CD 18          ;             clc                     ; convert remainder into ASCII character
( 356) 03CE 6930        ;             adc #48
( 357) 03D0 48          ;             pha                     ; push LS digit of integer onto stack
( 358)                  ; ;
( 359) 03D1 2B          ;             rot a                   ; rotate quotient into ATOS position
( 360)                  ; ;
( 361) 03D2 ABDEFFFF    ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 362) 03D6 D0E8        ;             bne _iwrite_Lp
( 363)                  ; ;-------------------------------------------------------------------------------
( 364) 03D8 0B          ;             dup a                   ; save integer part of the conversion
( 365)                  ; ;-------------------------------------------------------------------------------
( 366)                  ; _iwrite_Fill
( 367) 03D9 B505        ;             lda _fLenOff,X          ; load field width specifier
( 368) 03DB C905        ;             cmp #5                  ; compare against max integer digit count
( 369) 03DD AB300A      ;             ble _iwrite_GenPtr
( 370) 03E0 38          ;             sec                     ; subtract max integer length from fld len
( 371) 03E1 E905        ;             sbc #5
( 372) 03E3 A8          ;             tay                     ; set difference as loop counter
( 373) 03E4 A930        ;             lda #48                 ; fill remaining field with '0'
( 374)                  ; ;
( 375)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
( 376) 03E6 48          ;             pha
( 377) 03E7 88          ;             dey
( 378) 03E8 D0FC        ;             bne _iwrite_Fill_Lp
( 379)                  ; ;-------------------------------------------------------------------------------
( 380)                  ; _iwrite_GenPtr
( 381) 03EA EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 382) 03ED AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 383) 03EF AB48        ;             pha.w                   ; push string pointer to stack
( 384)                  ; ;-------------------------------------------------------------------------------
( 385) 03F1 2B          ;             rot a                   ; restore integer part of the conversion
( 386)                  ; ;-------------------------------------------------------------------------------
( 387) 03F2 ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 388) 03F6 F00F        ;             beq _iwrite_Sup0
( 389) 03F8 A000        ;             ldy #0
( 390)                  ; _iwrite_ErrLp
( 391) 03FA A92A        ;             lda #0x2A               ; fill integer field with '*'
( 392) 03FC 8B9101      ;             sta (1,S),Y
( 393) 03FF C8          ;             iny
( 394) 0400 FBD505      ;             cmp.y _fLenOff,X
( 395) 0403 D0F5        ;             bne _iwrite_ErrLp
( 396) 0405 8014        ;             bra _iwrite_Exit
( 397)                  ; ;-------------------------------------------------------------------------------
( 398)                  ; _iwrite_Sup0
( 399) 0407 A000        ;             ldy #0                  ; initialize string index
( 400)                  ; _iwrite_Sup0_Lp
( 401) 0409 8BB101      ;             lda (1,S),Y
( 402) 040C C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 403) 040E D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 404) 0410 A920        ;             lda #32                 ; replace leading 0 with ' '
( 405) 0412 8B9101      ;             sta (1,S),Y
( 406) 0415 C8          ;             iny                     ; increment string index and compare to fLen
( 407) 0416 FBD505      ;             cmp.y _fLenOff,X
( 408) 0419 D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 409)                  ; ;-------------------------------------------------------------------------------
( 410)                  ; _iwrite_Exit
( 411) 041B ABE20000    ;             psh.w #0                ; NULL argument
( 412) 041F B505        ;             lda _fLenOff,X          ; push field width specifier
( 413) 0421 AB48        ;             pha.w
( 414) 0423 9B5C75FF    ;             csr _swrite             ; write integer value string using _swrite()
( 415) 0427 C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 416)                  ; ;
( 417) 0429 AB9A        ;             txs.w                   ; deallocate stack variables
( 418) 042B ABFA        ;             plx.w                   ; restore previous base pointer
( 419) 042D 60          ;             rts
( 420)                  ; ;
( 421)                  ;             .endp _iwrite
( 422)                  ; 
( 423)                  ;     .dat
( 424)                  ; 
( 425) 042E 202020      ; S_030 .str "   "
( 426) 0431 53696576    ; S_021 .str "Sieve of Eratosthenes"
       0435 65206F6620457261746F737468656E6573
( 427) 0446 55          ; _bss_start .byt 85
( 428) 0447 00000000    ; sieve_002 .byt 0[1000]
       044B 0000000000000000000000000000000000000000000000000000000000000000
       046B 0000000000000000000000000000000000000000000000000000000000000000
       048B 0000000000000000000000000000000000000000000000000000000000000000
       04AB 0000000000000000000000000000000000000000000000000000000000000000
       04CB 0000000000000000000000000000000000000000000000000000000000000000
       04EB 0000000000000000000000000000000000000000000000000000000000000000
       050B 0000000000000000000000000000000000000000000000000000000000000000
       052B 0000000000000000000000000000000000000000000000000000000000000000
       054B 0000000000000000000000000000000000000000000000000000000000000000
       056B 0000000000000000000000000000000000000000000000000000000000000000
       058B 0000000000000000000000000000000000000000000000000000000000000000
       05AB 0000000000000000000000000000000000000000000000000000000000000000
       05CB 0000000000000000000000000000000000000000000000000000000000000000
       05EB 0000000000000000000000000000000000000000000000000000000000000000
       060B 0000000000000000000000000000000000000000000000000000000000000000
       062B 0000000000000000000000000000000000000000000000000000000000000000
       064B 0000000000000000000000000000000000000000000000000000000000000000
       066B 0000000000000000000000000000000000000000000000000000000000000000
       068B 0000000000000000000000000000000000000000000000000000000000000000
       06AB 0000000000000000000000000000000000000000000000000000000000000000
       06CB 0000000000000000000000000000000000000000000000000000000000000000
       06EB 0000000000000000000000000000000000000000000000000000000000000000
       070B 0000000000000000000000000000000000000000000000000000000000000000
       072B 0000000000000000000000000000000000000000000000000000000000000000
       074B 0000000000000000000000000000000000000000000000000000000000000000
       076B 0000000000000000000000000000000000000000000000000000000000000000
       078B 0000000000000000000000000000000000000000000000000000000000000000
       07AB 0000000000000000000000000000000000000000000000000000000000000000
       07CB 0000000000000000000000000000000000000000000000000000000000000000
       07EB 0000000000000000000000000000000000000000000000000000000000000000
       080B 0000000000000000000000000000000000000000000000000000000000000000
       082B 00000000
( 429) 082F 0000        ; i_003 .wrd 0
( 430) 0831 0000        ; j_004 .wrd 0
( 431) 0833 0000        ; limit_005 .wrd 0
( 432) 0835 0000        ; prime_006 .wrd 0
( 433) 0837 0000        ; factor_007 .wrd 0
( 434) 0839 AA          ; _bss_end .byt 170
( 435) 083A 00000000    ; _stk .byt 0[255]
       083E 0000000000000000000000000000000000000000000000000000000000000000
       085E 0000000000000000000000000000000000000000000000000000000000000000
       087E 0000000000000000000000000000000000000000000000000000000000000000
       089E 0000000000000000000000000000000000000000000000000000000000000000
       08BE 0000000000000000000000000000000000000000000000000000000000000000
       08DE 0000000000000000000000000000000000000000000000000000000000000000
       08FE 0000000000000000000000000000000000000000000000000000000000000000
       091E 000000000000000000000000000000000000000000000000000000
( 436) 0939 00          ; _stk_top .byt 0
( 437)                  ; 
( 438)                  ;     .end
