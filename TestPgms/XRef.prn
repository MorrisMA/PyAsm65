(   1)                  ; ;    1: PROGRAM xref (input, output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA2FF4E    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9C6C0C      ; 	stz _bss_start
(  11) 0209 ABA26C0C    ; 	ldx.w #_bss_start
(  12) 020D ABA06D0C    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9FF4E    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE96C0C    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4C7F09      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3:     {Generate a cross-reference listing from a text file.}
(  20)                  ; ;    4: 
(  21)                  ; ;    5: CONST
(  22)                  ; ;    6:     maxwordlen       =   20;
(  23)                  ; ;    7:     wordtablesize    =  500;
(  24)                  ; ;    8:     numbertablesize  = 1000;
(  25)                  ; ;    9:     maxlinenumber    =  999;
(  26)                  ; ;   10: 
(  27)                  ; ;   11: TYPE
(  28)                  ; ;   12:     charindex        = 1..maxwordlen;
(  29)                  ; ;   13:     wordtableindex   = 1..wordtablesize;
(  30)                  ; ;   14:     numbertableindex = 0..numbertablesize;
(  31)                  ; ;   15:     linenumbertype   = 1..maxlinenumber;
(  32)                  ; ;   16: 
(  33)                  ; ;   17:     wordtype         = ARRAY [charindex] OF char;  {string type}
(  34)                  ; ;   18: 
(  35)                  ; ;   19:     wordentrytype    = RECORD  {entry in word table}
(  36)                  ; ;   20:                word : wordtype; {word string}
(  37)                  ; word_002 .equ +0
(  38)                  ; ;   21:                firstnumberindex,    {head and tail of    }
(  39)                  ; ;   22:                lastnumberindex      {  linked number list}
(  40)                  ; ;   23:                    : numbertableindex;
(  41)                  ; firstnumberindex_003 .equ +20
(  42)                  ; lastnumberindex_004 .equ +22
(  43)                  ; ;   24:                END;
(  44)                  ; ;   25: 
(  45)                  ; ;   26:     numberentrytype  = RECORD  {entry in number table}
(  46)                  ; ;   27:                number                   {line number}
(  47)                  ; ;   28:                    : linenumbertype;
(  48)                  ; number_005 .equ +0
(  49)                  ; ;   29:                nextindex                {index of next   }
(  50)                  ; ;   30:                    : numbertableindex;  {  in linked list}
(  51)                  ; nextindex_006 .equ +2
(  52)                  ; ;   31:                END;
(  53)                  ; ;   32: 
(  54)                  ; ;   33:     wordtabletype    = ARRAY [wordtableindex]   OF wordentrytype;
(  55)                  ; ;   34:     numbertabletype  = ARRAY [numbertableindex] OF numberentrytype;
(  56)                  ; ;   35: 
(  57)                  ; ;   36: VAR
(  58)                  ; ;   37:     wordtable                      : wordtabletype;
(  59)                  ; ;   38:     numbertable                    : numbertabletype;
(  60)                  ; ;   39:     nextwordindex              : wordtableindex;
(  61)                  ; ;   40:     nextnumberindex                : numbertableindex;
(  62)                  ; ;   41:     linenumber                     : linenumbertype;
(  63)                  ; ;   42:     wordtablefull, numbertablefull : boolean;
(  64)                  ; ;   43:     newline, gotword               : boolean;
(  65)                  ; ;   44: 
(  66)                  ; ;   45: 
(  67)                  ; ;   46: FUNCTION nextchar : char;
(  68)                  ; ;   47: 
(  69)                  ; ;   48:     {Fetch and echo the next character.
(  70)                  ; ;   49:      Print the line number before each new line.}
(  71)                  ; ;   50: 
(  72)                  ; ;   51:     CONST
(  73)                  ; ;   52:     blank = ' ';
(  74)                  ; ;   53: 
(  75)                  ; ;   54:     VAR
(  76)                  ; ;   55:     ch : char;
(  77)                  ; ;   56: 
(  78)                  ; ;   57:     BEGIN
(  79)                  ; ch_017 .equ -5
(  80)                  ; nextchar_016 .sub
(  81) 021F ABDA        ; 	phx.w
(  82) 0221 ABBA        ; 	tsx.w
(  83) 0223 C2FC        ; 	adj #-4
(  84) 0225 C2FE        ; 	adj #-2
(  85)                  ; ;   58:     newline := eoln;
(  86) 0227 20FFFF      ; 	jsr _eol
(  87) 022A AB8DFB4A    ; 	sta.w newline_014
(  88)                  ; ;   59:     IF newline THEN BEGIN
(  89) 022E ABADFB4A    ; 	lda.w newline_014
(  90) 0232 ABC90100    ; 	cmp.w #1
(  91) 0236 F003        ; 	beq L_018
(  92) 0238 4C6502      ; 	jmp L_019
(  93)                  ; L_018
(  94)                  ; ;   60:         readln;
(  95) 023B 20FFFF      ; 	jsr _readln
(  96)                  ; ;   61:         writeln;
(  97) 023E 20310B      ; 	jsr _writeln
(  98)                  ; ;   62:         linenumber := linenumber + 1;
(  99)                  ; 	lda.w linenumber_011
( 100)                  ; 	pha.w
( 101)                  ; 	lda #1
( 102)                  ; 	clc
( 103)                  ; 	adc.w 1,S
( 104)                  ; 	adj #2
( 105) 0241 ABEEF54A    ; 	inc.w linenumber_011
( 106)                  ; ;   63:         write(linenumber:5, ' : ');
( 107) 0245 ABADF54A    ; 	lda.w linenumber_011
( 108) 0249 AB48        ; 	pha.w
( 109)                  ; 	lda #5
( 110) 024B ABE20500    ; 	psh.w #5
( 111) 024F 20490B      ; 	jsr _iwrite
( 112) 0252 C204        ; 	adj #4
( 113) 0254 ABE2690C    ; 	psh.w #S_020
( 114) 0258 ABE20000    ; 	psh.w #0
( 115) 025C ABE20300    ; 	psh.w #3
( 116) 0260 20370B      ; 	jsr _swrite
( 117) 0263 C206        ; 	adj #6
( 118)                  ; ;   64:     END;
( 119)                  ; L_019
( 120)                  ; ;   65:     IF newline OR eof THEN BEGIN
( 121) 0265 ABADFB4A    ; 	lda.w newline_014
( 122) 0269 AB48        ; 	pha.w
( 123) 026B 20FFFF      ; 	jsr _eof
( 124) 026E CB1501      ; 	ora.w 1,S
( 125) 0271 C202        ; 	adj #2
( 126) 0273 ABC90100    ; 	cmp.w #1
( 127) 0277 F003        ; 	beq L_021
( 128) 0279 4C8302      ; 	jmp L_022
( 129)                  ; L_021
( 130)                  ; ;   66:         ch := blank;
( 131) 027C A920        ; 	lda #32
( 132) 027E 85FB        ; 	sta ch_017
( 133)                  ; ;   67:     END
( 134)                  ; ;   68:     ELSE BEGIN
( 135) 0280 4CA002      ; 	jmp L_023
( 136)                  ; L_022
( 137)                  ; ;   69:         read(ch);
( 138) 0283 AB8A        ; 	txa.w
( 139) 0285 18          ; 	clc
( 140) 0286 AB69FBFF    ; 	adc.w #ch_017
( 141) 028A AB48        ; 	pha.w
( 142) 028C 20FFFF      ; 	jsr _cread
( 143) 028F 8B6B        ; 	pli.s
( 144) 0291 8300        ; 	sta 0,I++
( 145)                  ; ;   70:         write(ch);
( 146) 0293 B5FB        ; 	lda ch_017,X
( 147) 0295 AB48        ; 	pha.w
( 148) 0297 ABE20000    ; 	psh.w #0
( 149) 029B 20FFFF      ; 	jsr _cwrite
( 150) 029E C204        ; 	adj #4
( 151)                  ; ;   71:     END;
( 152)                  ; L_023
( 153)                  ; ;   72:     nextchar := ch;
( 154) 02A0 B5FB        ; 	lda ch_017,X
( 155) 02A2 A8          ; 	tay
( 156) 02A3 98          ; 	tya
( 157) 02A4 AB95FD      ; 	sta.w RETURN_VALUE,X
( 158)                  ; ;   73:     END;
( 159) 02A7 ABB5FD      ; 	lda.w RETURN_VALUE,X
( 160) 02AA AB9A        ; 	txs.w
( 161) 02AC ABFA        ; 	plx.w
( 162) 02AE 60          ; 	rts
( 163)                  ; 	.end nextchar_016
( 164)                  ; ;   74: 
( 165)                  ; ;   75: 
( 166)                  ; ;   76: FUNCTION isletter (ch : char) : boolean;
( 167)                  ; ;   77: 
( 168)                  ; ;   78:     {Return true if the character is a letter, false otherwise.}
( 169)                  ; ;   79: 
( 170)                  ; ;   80:     BEGIN
( 171)                  ; ch_025 .equ +7
( 172)                  ; isletter_024 .sub
( 173) 02AF ABDA        ; 	phx.w
( 174) 02B1 ABBA        ; 	tsx.w
( 175) 02B3 C2FC        ; 	adj #-4
( 176)                  ; ;   81:     isletter :=    ((ch >= 'a') AND (ch <= 'z'))
( 177) 02B5 B507        ; 	lda ch_025,X
( 178)                  ; 	pha.w
( 179)                  ; 	lda #97
( 180)                  ; 	xma.w 1,S
( 181) 02B7 ABC96100    ; 	cmp.w #97
( 182)                  ; 	adj #2
( 183) 02BB AB5004      ; 	bge L_026T
( 184) 02BE A900        ; 	lda #0
( 185) 02C0 8002        ; 	bra L_026
( 186) 02C2 A901        ; L_026T lda #1
( 187)                  ; 	lda #0
( 188)                  ; L_026
( 189) 02C4 AB48        ; 	pha.w
( 190) 02C6 B507        ; 	lda ch_025,X
( 191)                  ; 	pha.w
( 192)                  ; 	lda #122
( 193)                  ; 	xma.w 1,S
( 194) 02C8 ABC97A00    ; 	cmp.w #122
( 195)                  ; 	adj #2
( 196) 02CC AB3004      ; 	ble L_027T
( 197) 02CF A900        ; 	lda #0
( 198) 02D1 8002        ; 	bra L_027
( 199) 02D3 A901        ; L_027T lda #1
( 200)                  ; 	lda #0
( 201)                  ; L_027
( 202) 02D5 CB3501      ; 	and.w 1,S
( 203) 02D8 C202        ; 	adj #2
( 204)                  ; ;   82:             OR ((ch >= 'A') AND (ch <= 'Z'));
( 205) 02DA AB48        ; 	pha.w
( 206) 02DC B507        ; 	lda ch_025,X
( 207)                  ; 	pha.w
( 208)                  ; 	lda #65
( 209)                  ; 	xma.w 1,S
( 210) 02DE ABC94100    ; 	cmp.w #65
( 211)                  ; 	adj #2
( 212) 02E2 AB5004      ; 	bge L_028T
( 213) 02E5 A900        ; 	lda #0
( 214) 02E7 8002        ; 	bra L_028
( 215) 02E9 A901        ; L_028T lda #1
( 216)                  ; 	lda #0
( 217)                  ; L_028
( 218) 02EB AB48        ; 	pha.w
( 219) 02ED B507        ; 	lda ch_025,X
( 220)                  ; 	pha.w
( 221)                  ; 	lda #90
( 222)                  ; 	xma.w 1,S
( 223) 02EF ABC95A00    ; 	cmp.w #90
( 224)                  ; 	adj #2
( 225) 02F3 AB3004      ; 	ble L_029T
( 226) 02F6 A900        ; 	lda #0
( 227) 02F8 8002        ; 	bra L_029
( 228) 02FA A901        ; L_029T lda #1
( 229)                  ; 	lda #0
( 230)                  ; L_029
( 231) 02FC CB3501      ; 	and.w 1,S
( 232) 02FF C202        ; 	adj #2
( 233) 0301 CB1501      ; 	ora.w 1,S
( 234) 0304 C202        ; 	adj #2
( 235) 0306 AB95FD      ; 	sta.w RETURN_VALUE,X
( 236)                  ; ;   83:     END;
( 237) 0309 ABB5FD      ; 	lda.w RETURN_VALUE,X
( 238) 030C AB9A        ; 	txs.w
( 239) 030E ABFA        ; 	plx.w
( 240) 0310 60          ; 	rts
( 241)                  ; 	.end isletter_024
( 242)                  ; ;   84: 
( 243)                  ; ;   85: 
( 244)                  ; ;   86: PROCEDURE readword (VAR buffer : wordtype);
( 245)                  ; ;   87: 
( 246)                  ; ;   88:     {Extract the next word and place it into the buffer.}
( 247)                  ; ;   89: 
( 248)                  ; ;   90:     CONST
( 249)                  ; ;   91:     blank = ' ';
( 250)                  ; ;   92: 
( 251)                  ; ;   93:     VAR
( 252)                  ; ;   94:     charcount : 0..maxwordlen;
( 253)                  ; ;   95:     ch : char;
( 254)                  ; ;   96: 
( 255)                  ; ;   97:     BEGIN
( 256)                  ; buffer_031 .equ +7
( 257)                  ; charcount_032 .equ -1
( 258)                  ; ch_033 .equ -3
( 259)                  ; readword_030 .sub
( 260) 0311 ABDA        ; 	phx.w
( 261) 0313 ABBA        ; 	tsx.w
( 262) 0315 C2FC        ; 	adj #-4
( 263)                  ; ;   98:     gotword := false;
( 264)                  ; 	lda #0
( 265) 0317 AB9CFD4A    ; 	stz.w gotword_015
( 266)                  ; ;   99: 
( 267)                  ; ;  100:     {Skip over any preceding non-letters.}
( 268)                  ; ;  101:     IF NOT eof THEN BEGIN
( 269) 031B 20FFFF      ; 	jsr _eof
( 270) 031E 4901        ; 	eor #1
( 271) 0320 ABC90100    ; 	cmp.w #1
( 272) 0324 F003        ; 	beq L_034
( 273) 0326 4C5603      ; 	jmp L_035
( 274)                  ; L_034
( 275)                  ; ;  102:         REPEAT
( 276)                  ; L_036
( 277)                  ; ;  103:         ch := nextchar;
( 278) 0329 ABB505      ; 	lda.w STATIC_LINK,X
( 279) 032C AB48        ; 	pha.w
( 280) 032E 201F02      ; 	jsr nextchar_016
( 281) 0331 C202        ; 	adj #2
( 282) 0333 85FD        ; 	sta ch_033
( 283)                  ; ;  104:         UNTIL eof OR isletter(ch);
( 284) 0335 20FFFF      ; 	jsr _eof
( 285) 0338 AB48        ; 	pha.w
( 286) 033A B5FD        ; 	lda ch_033,X
( 287) 033C AB48        ; 	pha.w
( 288) 033E ABB505      ; 	lda.w STATIC_LINK,X
( 289) 0341 AB48        ; 	pha.w
( 290) 0343 20AF02      ; 	jsr isletter_024
( 291) 0346 C204        ; 	adj #4
( 292) 0348 CB1501      ; 	ora.w 1,S
( 293) 034B C202        ; 	adj #2
( 294) 034D ABC90100    ; 	cmp.w #1
( 295) 0351 F003        ; 	beq L_037
( 296) 0353 4C2903      ; 	jmp L_036
( 297)                  ; L_037
( 298)                  ; ;  105:     END;
( 299)                  ; L_035
( 300)                  ; ;  106: 
( 301)                  ; ;  107:     {Find a letter?}
( 302)                  ; ;  108:     IF NOT eof THEN BEGIN
( 303) 0356 20FFFF      ; 	jsr _eof
( 304) 0359 4901        ; 	eor #1
( 305) 035B ABC90100    ; 	cmp.w #1
( 306) 035F F003        ; 	beq L_038
( 307) 0361 4C3D04      ; 	jmp L_039
( 308)                  ; L_038
( 309)                  ; ;  109:         charcount := 0;
( 310)                  ; 	lda #0
( 311) 0364 AB74FF      ; 	stz.w charcount_032,X
( 312)                  ; ;  110: 
( 313)                  ; ;  111:         {Place the word's letters into the buffer.
( 314)                  ; ;  112:          Downshift uppercase letters.}
( 315)                  ; ;  113:         WHILE isletter(ch) DO BEGIN
( 316)                  ; L_040
( 317) 0367 B5FD        ; 	lda ch_033,X
( 318) 0369 AB48        ; 	pha.w
( 319) 036B ABB505      ; 	lda.w STATIC_LINK,X
( 320) 036E AB48        ; 	pha.w
( 321) 0370 20AF02      ; 	jsr isletter_024
( 322) 0373 C204        ; 	adj #4
( 323) 0375 ABC90100    ; 	cmp.w #1
( 324) 0379 F003        ; 	beq L_041
( 325) 037B 4C0904      ; 	jmp L_042
( 326)                  ; L_041
( 327)                  ; ;  114:         IF charcount < maxwordlen THEN BEGIN
( 328) 037E ABB5FF      ; 	lda.w charcount_032,X
( 329)                  ; 	pha.w
( 330)                  ; 	lda #20
( 331)                  ; 	xma.w 1,S
( 332) 0381 ABC91400    ; 	cmp.w #20
( 333)                  ; 	adj #2
( 334) 0385 AB7004      ; 	blt L_045T
( 335) 0388 A900        ; 	lda #0
( 336) 038A 8002        ; 	bra L_045
( 337) 038C A901        ; L_045T lda #1
( 338)                  ; 	lda #0
( 339)                  ; L_045
( 340) 038E ABC90100    ; 	cmp.w #1
( 341) 0392 F003        ; 	beq L_043
( 342) 0394 4CFA03      ; 	jmp L_044
( 343)                  ; L_043
( 344)                  ; ;  115:             IF (ch >= 'A') AND (ch <= 'Z') THEN BEGIN
( 345) 0397 B5FD        ; 	lda ch_033,X
( 346)                  ; 	pha.w
( 347)                  ; 	lda #65
( 348)                  ; 	xma.w 1,S
( 349) 0399 ABC94100    ; 	cmp.w #65
( 350)                  ; 	adj #2
( 351) 039D AB5004      ; 	bge L_048T
( 352) 03A0 A900        ; 	lda #0
( 353) 03A2 8002        ; 	bra L_048
( 354) 03A4 A901        ; L_048T lda #1
( 355)                  ; 	lda #0
( 356)                  ; L_048
( 357) 03A6 AB48        ; 	pha.w
( 358) 03A8 B5FD        ; 	lda ch_033,X
( 359)                  ; 	pha.w
( 360)                  ; 	lda #90
( 361)                  ; 	xma.w 1,S
( 362) 03AA ABC95A00    ; 	cmp.w #90
( 363)                  ; 	adj #2
( 364) 03AE AB3004      ; 	ble L_049T
( 365) 03B1 A900        ; 	lda #0
( 366) 03B3 8002        ; 	bra L_049
( 367) 03B5 A901        ; L_049T lda #1
( 368)                  ; 	lda #0
( 369)                  ; L_049
( 370) 03B7 CB3501      ; 	and.w 1,S
( 371) 03BA C202        ; 	adj #2
( 372) 03BC ABC90100    ; 	cmp.w #1
( 373) 03C0 F003        ; 	beq L_046
( 374) 03C2 4CE003      ; 	jmp L_047
( 375)                  ; L_046
( 376)                  ; ;  116:             ch := chr(ord(ch) + (ord('a') - ord('A')));
( 377) 03C5 B5FD        ; 	lda ch_033,X
( 378) 03C7 AB48        ; 	pha.w
( 379)                  ; 	lda #97
( 380) 03C9 ABE26100    ; 	psh.w #97
( 381) 03CD A941        ; 	lda #65
( 382) 03CF CB4401      ; 	xma.w 1,S
( 383) 03D2 38          ; 	sec
( 384) 03D3 CBF501      ; 	sbc.w 1,S
( 385) 03D6 C202        ; 	adj #2
( 386) 03D8 18          ; 	clc
( 387) 03D9 CB7501      ; 	adc.w 1,S
( 388) 03DC C202        ; 	adj #2
( 389) 03DE 85FD        ; 	sta ch_033
( 390)                  ; ;  117:             END;
( 391)                  ; L_047
( 392)                  ; ;  118:             charcount := charcount + 1;
( 393)                  ; 	lda.w charcount_032,X
( 394)                  ; 	pha.w
( 395)                  ; 	lda #1
( 396)                  ; 	clc
( 397)                  ; 	adc.w 1,S
( 398)                  ; 	adj #2
( 399) 03E0 ABF6FF      ; 	inc.w charcount_032,X
( 400)                  ; ;  119:             buffer[charcount] := ch;
( 401) 03E3 ABB507      ; 	lda.w buffer_031,X
( 402) 03E6 AB48        ; 	pha.w
( 403) 03E8 ABB5FF      ; 	lda.w charcount_032,X
( 404) 03EB AB3A        ; 	dec.w a
( 405) 03ED 18          ; 	clc
( 406) 03EE CB7501      ; 	adc.w 1,S
( 407) 03F1 CB9501      ; 	sta.w 1,S
( 408) 03F4 B5FD        ; 	lda ch_033,X
( 409) 03F6 8B6B        ; 	pli.s
( 410) 03F8 8300        ; 	sta 0,I++
( 411)                  ; ;  120:         END;
( 412)                  ; L_044
( 413)                  ; ;  121:         ch := nextchar;
( 414) 03FA ABB505      ; 	lda.w STATIC_LINK,X
( 415) 03FD AB48        ; 	pha.w
( 416) 03FF 201F02      ; 	jsr nextchar_016
( 417) 0402 C202        ; 	adj #2
( 418) 0404 85FD        ; 	sta ch_033
( 419)                  ; ;  122:         END;
( 420) 0406 4C6703      ; 	jmp L_040
( 421)                  ; L_042
( 422)                  ; ;  123: 
( 423)                  ; ;  124:         {Pad the rest of the buffer with blanks.}
( 424)                  ; ;  125:         FOR charcount := charcount + 1 TO maxwordlen DO BEGIN
( 425)                  ; 	lda.w charcount_032,X
( 426)                  ; 	pha.w
( 427)                  ; 	lda #1
( 428)                  ; 	clc
( 429)                  ; 	adc.w 1,S
( 430)                  ; 	adj #2
( 431) 0409 ABF6FF      ; 	inc.w charcount_032,X
( 432)                  ; L_050
( 433) 040C A914        ; 	lda #20
( 434) 040E ABD5FF      ; 	cmp.w charcount_032,X
( 435) 0411 AB5003      ; 	bge L_051
( 436) 0414 4C3404      ; 	jmp L_052
( 437)                  ; L_051
( 438)                  ; ;  126:         buffer[charcount] := blank;
( 439) 0417 ABB507      ; 	lda.w buffer_031,X
( 440) 041A AB48        ; 	pha.w
( 441) 041C ABB5FF      ; 	lda.w charcount_032,X
( 442) 041F AB3A        ; 	dec.w a
( 443) 0421 18          ; 	clc
( 444) 0422 CB7501      ; 	adc.w 1,S
( 445) 0425 CB9501      ; 	sta.w 1,S
( 446) 0428 A920        ; 	lda #32
( 447) 042A 8B6B        ; 	pli.s
( 448) 042C 8300        ; 	sta 0,I++
( 449)                  ; ;  127:         END;
( 450) 042E ABF6FF      ; 	inc.w charcount_032,X
( 451) 0431 4C0C04      ; 	jmp L_050
( 452)                  ; L_052
( 453) 0434 ABD6FF      ; 	dec.w charcount_032,X
( 454)                  ; ;  128: 
( 455)                  ; ;  129:         gotword := true;
( 456) 0437 A901        ; 	lda #1
( 457) 0439 AB8DFD4A    ; 	sta.w gotword_015
( 458)                  ; ;  130:     END;
( 459)                  ; L_039
( 460)                  ; ;  131:     END;
( 461) 043D AB9A        ; 	txs.w
( 462) 043F ABFA        ; 	plx.w
( 463) 0441 60          ; 	rts
( 464)                  ; 	.end readword_030
( 465)                  ; ;  132: 
( 466)                  ; ;  133: 
( 467)                  ; ;  134: FUNCTION appendlinenumber(lastnumberindex : numbertableindex)
( 468)                  ; ;  135:          : numbertableindex;
( 469)                  ; ;  136: 
( 470)                  ; ;  137:     {Append the current line number to the end of the current word's
( 471)                  ; ;  138:      linked list.  Lastnumberindex is 0 if this is the word's first
( 472)                  ; ;  139:      number; else, it is the index of the last number in the list.}
( 473)                  ; ;  140: 
( 474)                  ; ;  141:     BEGIN
( 475)                  ; lastnumberindex_054 .equ +7
( 476)                  ; appendlinenumber_053 .sub
( 477) 0442 ABDA        ; 	phx.w
( 478) 0444 ABBA        ; 	tsx.w
( 479) 0446 C2FC        ; 	adj #-4
( 480)                  ; ;  142:         IF nextnumberindex < numbertablesize THEN BEGIN
( 481) 0448 ABADF34A    ; 	lda.w nextnumberindex_010
( 482)                  ; 	pha.w
( 483)                  ; 	lda.w #1000
( 484)                  ; 	xma.w 1,S
( 485) 044C ABC9E803    ; 	cmp.w #1000
( 486)                  ; 	adj #2
( 487) 0450 AB7004      ; 	blt L_057T
( 488) 0453 A900        ; 	lda #0
( 489) 0455 8002        ; 	bra L_057
( 490) 0457 A901        ; L_057T lda #1
( 491)                  ; 	lda #0
( 492)                  ; L_057
( 493) 0459 ABC90100    ; 	cmp.w #1
( 494) 045D F003        ; 	beq L_055
( 495) 045F 4CF404      ; 	jmp L_056
( 496)                  ; L_055
( 497)                  ; ;  143:         IF lastnumberindex <> 0 THEN BEGIN
( 498) 0462 ABB507      ; 	lda.w lastnumberindex_054,X
( 499)                  ; 	pha.w
( 500)                  ; 	lda #0
( 501)                  ; 	xma.w 1,S
( 502) 0465 ABC90000    ; 	cmp.w #0
( 503)                  ; 	adj #2
( 504) 0469 D004        ; 	bne L_060T
( 505) 046B A900        ; 	lda #0
( 506) 046D 8002        ; 	bra L_060
( 507) 046F A901        ; L_060T lda #1
( 508)                  ; 	lda #0
( 509)                  ; L_060
( 510) 0471 ABC90100    ; 	cmp.w #1
( 511) 0475 F003        ; 	beq L_058
( 512) 0477 4C9E04      ; 	jmp L_059
( 513)                  ; L_058
( 514)                  ; ;  144:             numbertable[lastnumberindex].nextindex := nextnumberindex;
( 515) 047A ABE24D3B    ; 	psh.w #numbertable_008
( 516) 047E ABB507      ; 	lda.w lastnumberindex_054,X
( 517) 0481 AB0A        ; 	asl.w a
( 518) 0483 AB0A        ; 	asl.w a
( 519) 0485 18          ; 	clc
( 520) 0486 CB7501      ; 	adc.w 1,S
( 521) 0489 CB9501      ; 	sta.w 1,S
( 522) 048C AB68        ; 	pla.w
( 523) 048E 18          ; 	clc
( 524) 048F AB690200    ; 	adc.w #nextindex_006
( 525) 0493 AB48        ; 	pha.w
( 526) 0495 ABADF34A    ; 	lda.w nextnumberindex_010
( 527) 0499 8B6B        ; 	pli.s
( 528) 049B AB8300      ; 	sta.w 0,I++
( 529)                  ; ;  145:         END;
( 530)                  ; L_059
( 531)                  ; ;  146:         numbertable[nextnumberindex].number    := linenumber;
( 532) 049E ABE24D3B    ; 	psh.w #numbertable_008
( 533) 04A2 ABADF34A    ; 	lda.w nextnumberindex_010
( 534) 04A6 AB0A        ; 	asl.w a
( 535) 04A8 AB0A        ; 	asl.w a
( 536) 04AA 18          ; 	clc
( 537) 04AB CB7501      ; 	adc.w 1,S
( 538) 04AE CB9501      ; 	sta.w 1,S
( 539) 04B1 AB68        ; 	pla.w
( 540) 04B3 18          ; 	clc
( 541) 04B4 AB690000    ; 	adc.w #number_005
( 542) 04B8 AB48        ; 	pha.w
( 543) 04BA ABADF54A    ; 	lda.w linenumber_011
( 544) 04BE 8B6B        ; 	pli.s
( 545) 04C0 AB8300      ; 	sta.w 0,I++
( 546)                  ; ;  147:         numbertable[nextnumberindex].nextindex := 0;
( 547) 04C3 ABE24D3B    ; 	psh.w #numbertable_008
( 548) 04C7 ABADF34A    ; 	lda.w nextnumberindex_010
( 549) 04CB AB0A        ; 	asl.w a
( 550) 04CD AB0A        ; 	asl.w a
( 551) 04CF 18          ; 	clc
( 552) 04D0 CB7501      ; 	adc.w 1,S
( 553) 04D3 CB9501      ; 	sta.w 1,S
( 554) 04D6 AB68        ; 	pla.w
( 555) 04D8 18          ; 	clc
( 556) 04D9 AB690200    ; 	adc.w #nextindex_006
( 557) 04DD AB48        ; 	pha.w
( 558) 04DF A900        ; 	lda #0
( 559) 04E1 8B6B        ; 	pli.s
( 560) 04E3 AB8300      ; 	sta.w 0,I++
( 561)                  ; ;  148:         appendlinenumber := nextnumberindex;
( 562) 04E6 ABADF34A    ; 	lda.w nextnumberindex_010
( 563) 04EA AB95FD      ; 	sta.w RETURN_VALUE,X
( 564)                  ; ;  149:         nextnumberindex  := nextnumberindex + 1;
( 565)                  ; 	lda.w nextnumberindex_010
( 566)                  ; 	pha.w
( 567)                  ; 	lda #1
( 568)                  ; 	clc
( 569)                  ; 	adc.w 1,S
( 570)                  ; 	adj #2
( 571) 04ED ABEEF34A    ; 	inc.w nextnumberindex_010
( 572)                  ; ;  150:         END
( 573)                  ; ;  151:         ELSE BEGIN
( 574) 04F1 4CFD04      ; 	jmp L_061
( 575)                  ; L_056
( 576)                  ; ;  152:             numbertablefull  := true;
( 577) 04F4 A901        ; 	lda #1
( 578) 04F6 AB8DF94A    ; 	sta.w numbertablefull_013
( 579)                  ; ;  153:             appendlinenumber := 0;
( 580)                  ; 	lda #0
( 581) 04FA AB74FD      ; 	stz.w RETURN_VALUE,X
( 582)                  ; ;  154:         END;
( 583)                  ; L_061
( 584)                  ; ;  155:     END;
( 585) 04FD ABB5FD      ; 	lda.w RETURN_VALUE,X
( 586) 0500 AB9A        ; 	txs.w
( 587) 0502 ABFA        ; 	plx.w
( 588) 0504 60          ; 	rts
( 589)                  ; 	.end appendlinenumber_053
( 590)                  ; ;  156: 
( 591)                  ; ;  157: 
( 592)                  ; ;  158: PROCEDURE enterword;
( 593)                  ; ;  159: 
( 594)                  ; ;  160:     {Enter the current word into the word table.  Each word is first
( 595)                  ; ;  161:      read into the end of the table.}
( 596)                  ; ;  162: 
( 597)                  ; ;  163:     VAR
( 598)                  ; ;  164:     i : wordtableindex;
( 599)                  ; ;  165: 
( 600)                  ; ;  166:     BEGIN
( 601)                  ; i_063 .equ -1
( 602)                  ; enterword_062 .sub
( 603) 0505 ABDA        ; 	phx.w
( 604) 0507 ABBA        ; 	tsx.w
( 605) 0509 C2FE        ; 	adj #-2
( 606)                  ; ;  167:     {By the time we process a word at the end of an input line,
( 607)                  ; ;  168:      linenumber has already been incremented, so temporarily
( 608)                  ; ;  169:      decrement it.}
( 609)                  ; ;  170:     IF newline THEN linenumber := linenumber - 1;
( 610) 050B ABADFB4A    ; 	lda.w newline_014
( 611) 050F ABC90100    ; 	cmp.w #1
( 612) 0513 F003        ; 	beq L_064
( 613) 0515 4C2D05      ; 	jmp L_065
( 614)                  ; L_064
( 615) 0518 ABADF54A    ; 	lda.w linenumber_011
( 616) 051C AB48        ; 	pha.w
( 617) 051E A901        ; 	lda #1
( 618) 0520 CB4401      ; 	xma.w 1,S
( 619) 0523 38          ; 	sec
( 620) 0524 CBF501      ; 	sbc.w 1,S
( 621) 0527 C202        ; 	adj #2
( 622) 0529 AB8DF54A    ; 	sta.w linenumber_011
( 623)                  ; L_065
( 624)                  ; ;  171: 
( 625)                  ; ;  172:     {Search to see if the word has previously been entered.}
( 626)                  ; ;  173:     i := 1;
( 627) 052D A901        ; 	lda #1
( 628) 052F AB95FF      ; 	sta.w i_063,X
( 629)                  ; ;  174:     WHILE    wordtable[i].word
( 630)                  ; L_066
( 631) 0532 ABE26D0C    ; 	psh.w #wordtable_007
( 632) 0536 ABB5FF      ; 	lda.w i_063,X
( 633) 0539 AB3A        ; 	dec.w a
( 634) 053B AB48        ; 	pha.w
( 635) 053D ABE21800    ; 	psh.w #24
( 636) 0541 20FF0A      ; 	jsr _imul
( 637) 0544 C204        ; 	adj #4
( 638) 0546 18          ; 	clc
( 639) 0547 CB7501      ; 	adc.w 1,S
( 640) 054A CB9501      ; 	sta.w 1,S
( 641)                  ; ;  175:           <> wordtable[nextwordindex].word DO BEGIN
( 642) 054D AB68        ; 	pla.w
( 643) 054F 18          ; 	clc
( 644) 0550 AB690000    ; 	adc.w #word_002
( 645) 0554 AB48        ; 	pha.w
( 646) 0556 ABE26D0C    ; 	psh.w #wordtable_007
( 647) 055A ABADF14A    ; 	lda.w nextwordindex_009
( 648) 055E AB3A        ; 	dec.w a
( 649) 0560 AB48        ; 	pha.w
( 650) 0562 ABE21800    ; 	psh.w #24
( 651) 0566 20FF0A      ; 	jsr _imul
( 652) 0569 C204        ; 	adj #4
( 653) 056B 18          ; 	clc
( 654) 056C CB7501      ; 	adc.w 1,S
( 655) 056F CB9501      ; 	sta.w 1,S
( 656) 0572 AB68        ; 	pla.w
( 657) 0574 18          ; 	clc
( 658) 0575 AB690000    ; 	adc.w #word_002
( 659) 0579 AB48        ; 	pha.w
( 660) 057B ABE21400    ; 	psh.w #20
( 661) 057F 20FFFF      ; 	jsr _cmpsb
( 662) 0582 C206        ; 	adj #+6
( 663) 0584 D004        ; 	bne L_069T
( 664) 0586 A900        ; 	lda #0
( 665) 0588 8002        ; 	bra L_069
( 666) 058A A901        ; L_069T lda #1
( 667)                  ; 	lda #0
( 668)                  ; L_069
( 669) 058C ABC90100    ; 	cmp.w #1
( 670) 0590 F003        ; 	beq L_067
( 671) 0592 4C9B05      ; 	jmp L_068
( 672)                  ; L_067
( 673)                  ; ;  176:         i := i + 1;
( 674)                  ; 	lda.w i_063,X
( 675)                  ; 	pha.w
( 676)                  ; 	lda #1
( 677)                  ; 	clc
( 678)                  ; 	adc.w 1,S
( 679)                  ; 	adj #2
( 680) 0595 ABF6FF      ; 	inc.w i_063,X
( 681)                  ; ;  177:     END;
( 682) 0598 4C3205      ; 	jmp L_066
( 683)                  ; L_068
( 684)                  ; ;  178: 
( 685)                  ; ;  179:     {Yes.  Update the previous entry.}
( 686)                  ; ;  180:     IF i < nextwordindex THEN BEGIN
( 687) 059B ABB5FF      ; 	lda.w i_063,X
( 688)                  ; 	pha.w
( 689)                  ; 	lda.w nextwordindex_009
( 690)                  ; 	xma.w 1,S
( 691) 059E ABCDF14A    ; 	cmp.w nextwordindex_009
( 692)                  ; 	adj #2
( 693) 05A2 AB7004      ; 	blt L_072T
( 694) 05A5 A900        ; 	lda #0
( 695) 05A7 8002        ; 	bra L_072
( 696) 05A9 A901        ; L_072T lda #1
( 697)                  ; 	lda #0
( 698)                  ; L_072
( 699) 05AB ABC90100    ; 	cmp.w #1
( 700) 05AF F003        ; 	beq L_070
( 701) 05B1 4C1506      ; 	jmp L_071
( 702)                  ; L_070
( 703)                  ; ;  181:         wordtable[i].lastnumberindex :=
( 704) 05B4 ABE26D0C    ; 	psh.w #wordtable_007
( 705) 05B8 ABB5FF      ; 	lda.w i_063,X
( 706) 05BB AB3A        ; 	dec.w a
( 707) 05BD AB48        ; 	pha.w
( 708) 05BF ABE21800    ; 	psh.w #24
( 709) 05C3 20FF0A      ; 	jsr _imul
( 710) 05C6 C204        ; 	adj #4
( 711) 05C8 18          ; 	clc
( 712) 05C9 CB7501      ; 	adc.w 1,S
( 713) 05CC CB9501      ; 	sta.w 1,S
( 714) 05CF AB68        ; 	pla.w
( 715) 05D1 18          ; 	clc
( 716) 05D2 AB691600    ; 	adc.w #lastnumberindex_004
( 717) 05D6 AB48        ; 	pha.w
( 718)                  ; ;  182:         appendlinenumber(wordtable[i].lastnumberindex);
( 719) 05D8 ABE26D0C    ; 	psh.w #wordtable_007
( 720) 05DC ABB5FF      ; 	lda.w i_063,X
( 721) 05DF AB3A        ; 	dec.w a
( 722) 05E1 AB48        ; 	pha.w
( 723) 05E3 ABE21800    ; 	psh.w #24
( 724) 05E7 20FF0A      ; 	jsr _imul
( 725) 05EA C204        ; 	adj #4
( 726) 05EC 18          ; 	clc
( 727) 05ED CB7501      ; 	adc.w 1,S
( 728) 05F0 CB9501      ; 	sta.w 1,S
( 729) 05F3 AB68        ; 	pla.w
( 730) 05F5 18          ; 	clc
( 731) 05F6 AB691600    ; 	adc.w #lastnumberindex_004
( 732) 05FA AB48        ; 	pha.w
( 733) 05FC 8B6B        ; 	pli.s
( 734) 05FE ABA300      ; 	lda.w 0,I++
( 735) 0601 AB48        ; 	pha.w
( 736) 0603 ABB505      ; 	lda.w STATIC_LINK,X
( 737) 0606 AB48        ; 	pha.w
( 738) 0608 204204      ; 	jsr appendlinenumber_053
( 739) 060B C204        ; 	adj #4
( 740) 060D 8B6B        ; 	pli.s
( 741) 060F AB8300      ; 	sta.w 0,I++
( 742)                  ; ;  183:     END
( 743)                  ; ;  184: 
( 744)                  ; ;  185:     {No.  Initialize the entry at the end of the table.}
( 745)                  ; ;  186:     ELSE IF nextwordindex < wordtablesize THEN BEGIN
( 746) 0612 4CC506      ; 	jmp L_073
( 747)                  ; L_071
( 748) 0615 ABADF14A    ; 	lda.w nextwordindex_009
( 749)                  ; 	pha.w
( 750)                  ; 	lda.w #500
( 751)                  ; 	xma.w 1,S
( 752) 0619 ABC9F401    ; 	cmp.w #500
( 753)                  ; 	adj #2
( 754) 061D AB7004      ; 	blt L_076T
( 755) 0620 A900        ; 	lda #0
( 756) 0622 8002        ; 	bra L_076
( 757) 0624 A901        ; L_076T lda #1
( 758)                  ; 	lda #0
( 759)                  ; L_076
( 760) 0626 ABC90100    ; 	cmp.w #1
( 761) 062A F003        ; 	beq L_074
( 762) 062C 4CBF06      ; 	jmp L_075
( 763)                  ; L_074
( 764)                  ; ;  187:         nextwordindex := nextwordindex + 1;
( 765)                  ; 	lda.w nextwordindex_009
( 766)                  ; 	pha.w
( 767)                  ; 	lda #1
( 768)                  ; 	clc
( 769)                  ; 	adc.w 1,S
( 770)                  ; 	adj #2
( 771) 062F ABEEF14A    ; 	inc.w nextwordindex_009
( 772)                  ; ;  188:         wordtable[i].firstnumberindex := appendlinenumber(0);
( 773) 0633 ABE26D0C    ; 	psh.w #wordtable_007
( 774) 0637 ABB5FF      ; 	lda.w i_063,X
( 775) 063A AB3A        ; 	dec.w a
( 776) 063C AB48        ; 	pha.w
( 777) 063E ABE21800    ; 	psh.w #24
( 778) 0642 20FF0A      ; 	jsr _imul
( 779) 0645 C204        ; 	adj #4
( 780) 0647 18          ; 	clc
( 781) 0648 CB7501      ; 	adc.w 1,S
( 782) 064B CB9501      ; 	sta.w 1,S
( 783) 064E AB68        ; 	pla.w
( 784) 0650 18          ; 	clc
( 785) 0651 AB691400    ; 	adc.w #firstnumberindex_003
( 786) 0655 AB48        ; 	pha.w
( 787)                  ; 	lda #0
( 788) 0657 ABE20000    ; 	psh.w #0
( 789) 065B ABB505      ; 	lda.w STATIC_LINK,X
( 790) 065E AB48        ; 	pha.w
( 791) 0660 204204      ; 	jsr appendlinenumber_053
( 792) 0663 C204        ; 	adj #4
( 793) 0665 8B6B        ; 	pli.s
( 794) 0667 AB8300      ; 	sta.w 0,I++
( 795)                  ; ;  189:         wordtable[i].lastnumberindex :=
( 796) 066A ABE26D0C    ; 	psh.w #wordtable_007
( 797) 066E ABB5FF      ; 	lda.w i_063,X
( 798) 0671 AB3A        ; 	dec.w a
( 799) 0673 AB48        ; 	pha.w
( 800) 0675 ABE21800    ; 	psh.w #24
( 801) 0679 20FF0A      ; 	jsr _imul
( 802) 067C C204        ; 	adj #4
( 803) 067E 18          ; 	clc
( 804) 067F CB7501      ; 	adc.w 1,S
( 805) 0682 CB9501      ; 	sta.w 1,S
( 806) 0685 AB68        ; 	pla.w
( 807) 0687 18          ; 	clc
( 808) 0688 AB691600    ; 	adc.w #lastnumberindex_004
( 809) 068C AB48        ; 	pha.w
( 810)                  ; ;  190:         wordtable[i].firstnumberindex;
( 811) 068E ABE26D0C    ; 	psh.w #wordtable_007
( 812) 0692 ABB5FF      ; 	lda.w i_063,X
( 813) 0695 AB3A        ; 	dec.w a
( 814) 0697 AB48        ; 	pha.w
( 815) 0699 ABE21800    ; 	psh.w #24
( 816) 069D 20FF0A      ; 	jsr _imul
( 817) 06A0 C204        ; 	adj #4
( 818) 06A2 18          ; 	clc
( 819) 06A3 CB7501      ; 	adc.w 1,S
( 820) 06A6 CB9501      ; 	sta.w 1,S
( 821) 06A9 AB68        ; 	pla.w
( 822) 06AB 18          ; 	clc
( 823) 06AC AB691400    ; 	adc.w #firstnumberindex_003
( 824) 06B0 AB48        ; 	pha.w
( 825) 06B2 8B6B        ; 	pli.s
( 826) 06B4 ABA300      ; 	lda.w 0,I++
( 827) 06B7 8B6B        ; 	pli.s
( 828) 06B9 AB8300      ; 	sta.w 0,I++
( 829)                  ; ;  191:     END
( 830)                  ; ;  192: 
( 831)                  ; ;  193:     {Oops.  Table overflow!}
( 832)                  ; ;  194:     ELSE wordtablefull := true;
( 833) 06BC 4CC506      ; 	jmp L_077
( 834)                  ; L_075
( 835) 06BF A901        ; 	lda #1
( 836) 06C1 AB8DF74A    ; 	sta.w wordtablefull_012
( 837)                  ; L_077
( 838)                  ; L_073
( 839)                  ; ;  195: 
( 840)                  ; ;  196:     IF newline THEN linenumber := linenumber + 1;
( 841) 06C5 ABADFB4A    ; 	lda.w newline_014
( 842) 06C9 ABC90100    ; 	cmp.w #1
( 843) 06CD F003        ; 	beq L_078
( 844) 06CF 4CD606      ; 	jmp L_079
( 845)                  ; L_078
( 846)                  ; 	lda.w linenumber_011
( 847)                  ; 	pha.w
( 848)                  ; 	lda #1
( 849)                  ; 	clc
( 850)                  ; 	adc.w 1,S
( 851)                  ; 	adj #2
( 852) 06D2 ABEEF54A    ; 	inc.w linenumber_011
( 853)                  ; L_079
( 854)                  ; ;  197:     END;
( 855) 06D6 AB9A        ; 	txs.w
( 856) 06D8 ABFA        ; 	plx.w
( 857) 06DA 60          ; 	rts
( 858)                  ; 	.end enterword_062
( 859)                  ; ;  198: 
( 860)                  ; ;  199: 
( 861)                  ; ;  200: PROCEDURE sortwords;
( 862)                  ; ;  201: 
( 863)                  ; ;  202:     {Sort the words alphabetically.}
( 864)                  ; ;  203: 
( 865)                  ; ;  204:     VAR
( 866)                  ; ;  205:     i, j : wordtableindex;
( 867)                  ; ;  206:     temp : wordentrytype;
( 868)                  ; ;  207: 
( 869)                  ; ;  208:     BEGIN
( 870)                  ; i_081 .equ -1
( 871)                  ; j_082 .equ -3
( 872)                  ; temp_083 .equ -27
( 873)                  ; sortwords_080 .sub
( 874) 06DB ABDA        ; 	phx.w
( 875) 06DD ABBA        ; 	tsx.w
( 876) 06DF C2E4        ; 	adj #-28
( 877)                  ; ;  209:     FOR i := 1 TO nextwordindex - 2 DO BEGIN
( 878) 06E1 A901        ; 	lda #1
( 879) 06E3 AB95FF      ; 	sta.w i_081,X
( 880)                  ; L_084
( 881) 06E6 ABADF14A    ; 	lda.w nextwordindex_009
( 882) 06EA AB48        ; 	pha.w
( 883) 06EC A902        ; 	lda #2
( 884) 06EE CB4401      ; 	xma.w 1,S
( 885) 06F1 38          ; 	sec
( 886) 06F2 CBF501      ; 	sbc.w 1,S
( 887) 06F5 C202        ; 	adj #2
( 888) 06F7 ABD5FF      ; 	cmp.w i_081,X
( 889) 06FA AB5003      ; 	bge L_085
( 890) 06FD 4C3108      ; 	jmp L_086
( 891)                  ; L_085
( 892)                  ; ;  210:         FOR j := i + 1 TO nextwordindex - 1 DO BEGIN
( 893)                  ; 	lda.w i_081,X
( 894)                  ; 	pha.w
( 895)                  ; 	lda #1
( 896)                  ; 	clc
( 897)                  ; 	adc.w 1,S
( 898)                  ; 	adj #2
( 899) 0700 ABF6FD      ; 	inc.w j_082,X
( 900)                  ; L_087
( 901) 0703 ABADF14A    ; 	lda.w nextwordindex_009
( 902) 0707 AB48        ; 	pha.w
( 903) 0709 A901        ; 	lda #1
( 904) 070B CB4401      ; 	xma.w 1,S
( 905) 070E 38          ; 	sec
( 906) 070F CBF501      ; 	sbc.w 1,S
( 907) 0712 C202        ; 	adj #2
( 908) 0714 ABD5FD      ; 	cmp.w j_082,X
( 909) 0717 AB5003      ; 	bge L_088
( 910) 071A 4C2808      ; 	jmp L_089
( 911)                  ; L_088
( 912)                  ; ;  211:         IF wordtable[i].word > wordtable[j].word THEN BEGIN
( 913) 071D ABE26D0C    ; 	psh.w #wordtable_007
( 914) 0721 ABB5FF      ; 	lda.w i_081,X
( 915) 0724 AB3A        ; 	dec.w a
( 916) 0726 AB48        ; 	pha.w
( 917) 0728 ABE21800    ; 	psh.w #24
( 918) 072C 20FF0A      ; 	jsr _imul
( 919) 072F C204        ; 	adj #4
( 920) 0731 18          ; 	clc
( 921) 0732 CB7501      ; 	adc.w 1,S
( 922) 0735 CB9501      ; 	sta.w 1,S
( 923) 0738 AB68        ; 	pla.w
( 924) 073A 18          ; 	clc
( 925) 073B AB690000    ; 	adc.w #word_002
( 926) 073F AB48        ; 	pha.w
( 927) 0741 ABE26D0C    ; 	psh.w #wordtable_007
( 928) 0745 ABB5FD      ; 	lda.w j_082,X
( 929) 0748 AB3A        ; 	dec.w a
( 930) 074A AB48        ; 	pha.w
( 931) 074C ABE21800    ; 	psh.w #24
( 932) 0750 20FF0A      ; 	jsr _imul
( 933) 0753 C204        ; 	adj #4
( 934) 0755 18          ; 	clc
( 935) 0756 CB7501      ; 	adc.w 1,S
( 936) 0759 CB9501      ; 	sta.w 1,S
( 937) 075C AB68        ; 	pla.w
( 938) 075E 18          ; 	clc
( 939) 075F AB690000    ; 	adc.w #word_002
( 940) 0763 AB48        ; 	pha.w
( 941) 0765 ABE21400    ; 	psh.w #20
( 942) 0769 20FFFF      ; 	jsr _cmpsb
( 943) 076C C206        ; 	adj #+6
( 944) 076E AB1004      ; 	bgt L_092T
( 945) 0771 A900        ; 	lda #0
( 946) 0773 8002        ; 	bra L_092
( 947) 0775 A901        ; L_092T lda #1
( 948)                  ; 	lda #0
( 949)                  ; L_092
( 950) 0777 ABC90100    ; 	cmp.w #1
( 951) 077B F003        ; 	beq L_090
( 952) 077D 4C2208      ; 	jmp L_091
( 953)                  ; L_090
( 954)                  ; ;  212:             temp := wordtable[i];
( 955) 0780 AB8A        ; 	txa.w
( 956) 0782 18          ; 	clc
( 957) 0783 AB69E5FF    ; 	adc.w #temp_083
( 958) 0787 AB48        ; 	pha.w
( 959) 0789 ABE26D0C    ; 	psh.w #wordtable_007
( 960) 078D ABB5FF      ; 	lda.w i_081,X
( 961) 0790 AB3A        ; 	dec.w a
( 962) 0792 AB48        ; 	pha.w
( 963) 0794 ABE21800    ; 	psh.w #24
( 964) 0798 20FF0A      ; 	jsr _imul
( 965) 079B C204        ; 	adj #4
( 966) 079D 18          ; 	clc
( 967) 079E CB7501      ; 	adc.w 1,S
( 968) 07A1 CB9501      ; 	sta.w 1,S
( 969) 07A4 EB0B        ; 	dup x
( 970) 07A6 A918        ; 	lda #24
( 971) 07A8 ABFA        ; 	plx.w
( 972) 07AA AB7A        ; 	ply.w
( 973) 07AC 540A        ; 	mov #10
( 974) 07AE EB2B        ; 	rot x
( 975)                  ; ;  213:             wordtable[i] := wordtable[j];
( 976) 07B0 ABE26D0C    ; 	psh.w #wordtable_007
( 977) 07B4 ABB5FF      ; 	lda.w i_081,X
( 978) 07B7 AB3A        ; 	dec.w a
( 979) 07B9 AB48        ; 	pha.w
( 980) 07BB ABE21800    ; 	psh.w #24
( 981) 07BF 20FF0A      ; 	jsr _imul
( 982) 07C2 C204        ; 	adj #4
( 983) 07C4 18          ; 	clc
( 984) 07C5 CB7501      ; 	adc.w 1,S
( 985) 07C8 CB9501      ; 	sta.w 1,S
( 986) 07CB ABE26D0C    ; 	psh.w #wordtable_007
( 987) 07CF ABB5FD      ; 	lda.w j_082,X
( 988) 07D2 AB3A        ; 	dec.w a
( 989) 07D4 AB48        ; 	pha.w
( 990) 07D6 ABE21800    ; 	psh.w #24
( 991) 07DA 20FF0A      ; 	jsr _imul
( 992) 07DD C204        ; 	adj #4
( 993) 07DF 18          ; 	clc
( 994) 07E0 CB7501      ; 	adc.w 1,S
( 995) 07E3 CB9501      ; 	sta.w 1,S
( 996) 07E6 EB0B        ; 	dup x
( 997) 07E8 A918        ; 	lda #24
( 998) 07EA ABFA        ; 	plx.w
( 999) 07EC AB7A        ; 	ply.w
(1000) 07EE 540A        ; 	mov #10
(1001) 07F0 EB2B        ; 	rot x
(1002)                  ; ;  214:             wordtable[j] := temp;
(1003) 07F2 ABE26D0C    ; 	psh.w #wordtable_007
(1004) 07F6 ABB5FD      ; 	lda.w j_082,X
(1005) 07F9 AB3A        ; 	dec.w a
(1006) 07FB AB48        ; 	pha.w
(1007) 07FD ABE21800    ; 	psh.w #24
(1008) 0801 20FF0A      ; 	jsr _imul
(1009) 0804 C204        ; 	adj #4
(1010) 0806 18          ; 	clc
(1011) 0807 CB7501      ; 	adc.w 1,S
(1012) 080A CB9501      ; 	sta.w 1,S
(1013) 080D AB8A        ; 	txa.w
(1014) 080F 18          ; 	clc
(1015) 0810 AB69E5FF    ; 	adc.w #temp_083
(1016) 0814 AB48        ; 	pha.w
(1017) 0816 EB0B        ; 	dup x
(1018) 0818 A918        ; 	lda #24
(1019) 081A ABFA        ; 	plx.w
(1020) 081C AB7A        ; 	ply.w
(1021) 081E 540A        ; 	mov #10
(1022) 0820 EB2B        ; 	rot x
(1023)                  ; ;  215:         END;
(1024)                  ; L_091
(1025)                  ; ;  216:         END;
(1026) 0822 ABF6FD      ; 	inc.w j_082,X
(1027) 0825 4C0307      ; 	jmp L_087
(1028)                  ; L_089
(1029) 0828 ABD6FD      ; 	dec.w j_082,X
(1030)                  ; ;  217:     END;
(1031) 082B ABF6FF      ; 	inc.w i_081,X
(1032) 082E 4CE606      ; 	jmp L_084
(1033)                  ; L_086
(1034) 0831 ABD6FF      ; 	dec.w i_081,X
(1035)                  ; ;  218:     END;
(1036) 0834 AB9A        ; 	txs.w
(1037) 0836 ABFA        ; 	plx.w
(1038) 0838 60          ; 	rts
(1039)                  ; 	.end sortwords_080
(1040)                  ; ;  219: 
(1041)                  ; ;  220: 
(1042)                  ; ;  221: PROCEDURE printnumbers (i : numbertableindex);
(1043)                  ; ;  222: 
(1044)                  ; ;  223:     {Print a word's linked list of line numbers.}
(1045)                  ; ;  224: 
(1046)                  ; ;  225:     BEGIN
(1047)                  ; i_094 .equ +7
(1048)                  ; printnumbers_093 .sub
(1049) 0839 ABDA        ; 	phx.w
(1050) 083B ABBA        ; 	tsx.w
(1051)                  ; ;  226:     REPEAT
(1052)                  ; L_095
(1053)                  ; ;  227:         write(numbertable[i].number:4);
(1054) 083D ABE24D3B    ; 	psh.w #numbertable_008
(1055) 0841 ABB507      ; 	lda.w i_094,X
(1056) 0844 AB0A        ; 	asl.w a
(1057) 0846 AB0A        ; 	asl.w a
(1058) 0848 18          ; 	clc
(1059) 0849 CB7501      ; 	adc.w 1,S
(1060) 084C CB9501      ; 	sta.w 1,S
(1061) 084F AB68        ; 	pla.w
(1062) 0851 18          ; 	clc
(1063) 0852 AB690000    ; 	adc.w #number_005
(1064) 0856 AB48        ; 	pha.w
(1065) 0858 8B6B        ; 	pli.s
(1066) 085A ABA300      ; 	lda.w 0,I++
(1067) 085D AB48        ; 	pha.w
(1068)                  ; 	lda #4
(1069) 085F ABE20400    ; 	psh.w #4
(1070) 0863 20490B      ; 	jsr _iwrite
(1071) 0866 C204        ; 	adj #4
(1072)                  ; ;  228:         i := numbertable[i].nextindex;
(1073) 0868 ABE24D3B    ; 	psh.w #numbertable_008
(1074) 086C ABB507      ; 	lda.w i_094,X
(1075) 086F AB0A        ; 	asl.w a
(1076) 0871 AB0A        ; 	asl.w a
(1077) 0873 18          ; 	clc
(1078) 0874 CB7501      ; 	adc.w 1,S
(1079) 0877 CB9501      ; 	sta.w 1,S
(1080) 087A AB68        ; 	pla.w
(1081) 087C 18          ; 	clc
(1082) 087D AB690200    ; 	adc.w #nextindex_006
(1083) 0881 AB48        ; 	pha.w
(1084) 0883 8B6B        ; 	pli.s
(1085) 0885 ABA300      ; 	lda.w 0,I++
(1086) 0888 AB9507      ; 	sta.w i_094,X
(1087)                  ; ;  229:     UNTIL i = 0;
(1088) 088B ABB507      ; 	lda.w i_094,X
(1089)                  ; 	pha.w
(1090)                  ; 	lda #0
(1091)                  ; 	xma.w 1,S
(1092) 088E ABC90000    ; 	cmp.w #0
(1093)                  ; 	adj #2
(1094) 0892 F004        ; 	beq L_097T
(1095) 0894 A900        ; 	lda #0
(1096) 0896 8002        ; 	bra L_097
(1097) 0898 A901        ; L_097T lda #1
(1098)                  ; 	lda #0
(1099)                  ; L_097
(1100) 089A ABC90100    ; 	cmp.w #1
(1101) 089E F003        ; 	beq L_096
(1102) 08A0 4C3D08      ; 	jmp L_095
(1103)                  ; L_096
(1104)                  ; ;  230:     writeln;
(1105) 08A3 20310B      ; 	jsr _writeln
(1106)                  ; ;  231:     END;
(1107) 08A6 AB9A        ; 	txs.w
(1108) 08A8 ABFA        ; 	plx.w
(1109) 08AA 60          ; 	rts
(1110)                  ; 	.end printnumbers_093
(1111)                  ; ;  232: 
(1112)                  ; ;  233: 
(1113)                  ; ;  234: PROCEDURE printxref;
(1114)                  ; ;  235: 
(1115)                  ; ;  236:     {Print the cross reference listing.}
(1116)                  ; ;  237: 
(1117)                  ; ;  238:     VAR
(1118)                  ; ;  239:     i : wordtableindex;
(1119)                  ; ;  240: 
(1120)                  ; ;  241:     BEGIN
(1121)                  ; i_099 .equ -1
(1122)                  ; printxref_098 .sub
(1123) 08AB ABDA        ; 	phx.w
(1124) 08AD ABBA        ; 	tsx.w
(1125) 08AF C2FE        ; 	adj #-2
(1126)                  ; ;  242:     writeln;
(1127) 08B1 20310B      ; 	jsr _writeln
(1128)                  ; ;  243:     writeln;
(1129) 08B4 20310B      ; 	jsr _writeln
(1130)                  ; ;  244:     writeln('Cross-reference');
(1131) 08B7 ABE25A0C    ; 	psh.w #S_100
(1132) 08BB ABE20000    ; 	psh.w #0
(1133) 08BF ABE20F00    ; 	psh.w #15
(1134) 08C3 20370B      ; 	jsr _swrite
(1135) 08C6 C206        ; 	adj #6
(1136) 08C8 20310B      ; 	jsr _writeln
(1137)                  ; ;  245:     writeln('---------------');
(1138) 08CB ABE24B0C    ; 	psh.w #S_101
(1139) 08CF ABE20000    ; 	psh.w #0
(1140) 08D3 ABE20F00    ; 	psh.w #15
(1141) 08D7 20370B      ; 	jsr _swrite
(1142) 08DA C206        ; 	adj #6
(1143) 08DC 20310B      ; 	jsr _writeln
(1144)                  ; ;  246:     writeln;
(1145) 08DF 20310B      ; 	jsr _writeln
(1146)                  ; ;  247:     sortwords;
(1147) 08E2 ABB505      ; 	lda.w STATIC_LINK,X
(1148) 08E5 AB48        ; 	pha.w
(1149) 08E7 20DB06      ; 	jsr sortwords_080
(1150) 08EA C202        ; 	adj #2
(1151)                  ; ;  248:     FOR i := 1 TO nextwordindex - 1 DO BEGIN
(1152) 08EC A901        ; 	lda #1
(1153) 08EE AB95FF      ; 	sta.w i_099,X
(1154)                  ; L_102
(1155) 08F1 ABADF14A    ; 	lda.w nextwordindex_009
(1156) 08F5 AB48        ; 	pha.w
(1157) 08F7 A901        ; 	lda #1
(1158) 08F9 CB4401      ; 	xma.w 1,S
(1159) 08FC 38          ; 	sec
(1160) 08FD CBF501      ; 	sbc.w 1,S
(1161) 0900 C202        ; 	adj #2
(1162) 0902 ABD5FF      ; 	cmp.w i_099,X
(1163) 0905 AB5003      ; 	bge L_103
(1164) 0908 4C7709      ; 	jmp L_104
(1165)                  ; L_103
(1166)                  ; ;  249:         write(wordtable[i].word);
(1167) 090B ABE26D0C    ; 	psh.w #wordtable_007
(1168) 090F ABB5FF      ; 	lda.w i_099,X
(1169) 0912 AB3A        ; 	dec.w a
(1170) 0914 AB48        ; 	pha.w
(1171) 0916 ABE21800    ; 	psh.w #24
(1172) 091A 20FF0A      ; 	jsr _imul
(1173) 091D C204        ; 	adj #4
(1174) 091F 18          ; 	clc
(1175) 0920 CB7501      ; 	adc.w 1,S
(1176) 0923 CB9501      ; 	sta.w 1,S
(1177) 0926 AB68        ; 	pla.w
(1178) 0928 18          ; 	clc
(1179) 0929 AB690000    ; 	adc.w #word_002
(1180) 092D AB48        ; 	pha.w
(1181) 092F ABE20000    ; 	psh.w #0
(1182) 0933 ABE21400    ; 	psh.w #20
(1183) 0937 20370B      ; 	jsr _swrite
(1184) 093A C206        ; 	adj #6
(1185)                  ; ;  250:         printnumbers(wordtable[i].firstnumberindex);
(1186) 093C ABE26D0C    ; 	psh.w #wordtable_007
(1187) 0940 ABB5FF      ; 	lda.w i_099,X
(1188) 0943 AB3A        ; 	dec.w a
(1189) 0945 AB48        ; 	pha.w
(1190) 0947 ABE21800    ; 	psh.w #24
(1191) 094B 20FF0A      ; 	jsr _imul
(1192) 094E C204        ; 	adj #4
(1193) 0950 18          ; 	clc
(1194) 0951 CB7501      ; 	adc.w 1,S
(1195) 0954 CB9501      ; 	sta.w 1,S
(1196) 0957 AB68        ; 	pla.w
(1197) 0959 18          ; 	clc
(1198) 095A AB691400    ; 	adc.w #firstnumberindex_003
(1199) 095E AB48        ; 	pha.w
(1200) 0960 8B6B        ; 	pli.s
(1201) 0962 ABA300      ; 	lda.w 0,I++
(1202) 0965 AB48        ; 	pha.w
(1203) 0967 ABB505      ; 	lda.w STATIC_LINK,X
(1204) 096A AB48        ; 	pha.w
(1205) 096C 203908      ; 	jsr printnumbers_093
(1206) 096F C204        ; 	adj #4
(1207)                  ; ;  251:     END;
(1208) 0971 ABF6FF      ; 	inc.w i_099,X
(1209) 0974 4CF108      ; 	jmp L_102
(1210)                  ; L_104
(1211) 0977 ABD6FF      ; 	dec.w i_099,X
(1212)                  ; ;  252:     END;
(1213) 097A AB9A        ; 	txs.w
(1214) 097C ABFA        ; 	plx.w
(1215) 097E 60          ; 	rts
(1216)                  ; 	.end printxref_098
(1217)                  ; ;  253: 
(1218)                  ; ;  254: 
(1219)                  ; ;  255: BEGIN {xref}
(1220)                  ; _pc65_main .sub
(1221) 097F ABDA        ; 	phx.w
(1222) 0981 ABBA        ; 	tsx.w
(1223)                  ; ;  256:     wordtablefull   := false;
(1224)                  ; 	lda #0
(1225) 0983 AB9CF74A    ; 	stz.w wordtablefull_012
(1226)                  ; ;  257:     numbertablefull := false;
(1227)                  ; 	lda #0
(1228) 0987 AB9CF94A    ; 	stz.w numbertablefull_013
(1229)                  ; ;  258:     nextwordindex   := 1;
(1230) 098B A901        ; 	lda #1
(1231) 098D AB8DF14A    ; 	sta.w nextwordindex_009
(1232)                  ; ;  259:     nextnumberindex := 1;
(1233) 0991 A901        ; 	lda #1
(1234) 0993 AB8DF34A    ; 	sta.w nextnumberindex_010
(1235)                  ; ;  260:     linenumber      := 1;
(1236) 0997 A901        ; 	lda #1
(1237) 0999 AB8DF54A    ; 	sta.w linenumber_011
(1238)                  ; ;  261:     write('    1 : ');
(1239) 099D ABE2430C    ; 	psh.w #S_105
(1240) 09A1 ABE20000    ; 	psh.w #0
(1241) 09A5 ABE20800    ; 	psh.w #8
(1242) 09A9 20370B      ; 	jsr _swrite
(1243) 09AC C206        ; 	adj #6
(1244)                  ; ;  262: 
(1245)                  ; ;  263:     {First read the words.}
(1246)                  ; ;  264:     WHILE NOT (eof OR wordtablefull OR numbertablefull) DO BEGIN
(1247)                  ; L_106
(1248) 09AE 20FFFF      ; 	jsr _eof
(1249) 09B1 AB48        ; 	pha.w
(1250) 09B3 ABADF74A    ; 	lda.w wordtablefull_012
(1251) 09B7 CB1501      ; 	ora.w 1,S
(1252) 09BA C202        ; 	adj #2
(1253) 09BC AB48        ; 	pha.w
(1254) 09BE ABADF94A    ; 	lda.w numbertablefull_013
(1255) 09C2 CB1501      ; 	ora.w 1,S
(1256) 09C5 C202        ; 	adj #2
(1257) 09C7 4901        ; 	eor #1
(1258) 09C9 ABC90100    ; 	cmp.w #1
(1259) 09CD F003        ; 	beq L_107
(1260) 09CF 4C150A      ; 	jmp L_108
(1261)                  ; L_107
(1262)                  ; ;  265:     readword(wordtable[nextwordindex].word);
(1263) 09D2 ABE26D0C    ; 	psh.w #wordtable_007
(1264) 09D6 ABADF14A    ; 	lda.w nextwordindex_009
(1265) 09DA AB3A        ; 	dec.w a
(1266) 09DC AB48        ; 	pha.w
(1267) 09DE ABE21800    ; 	psh.w #24
(1268) 09E2 20FF0A      ; 	jsr _imul
(1269) 09E5 C204        ; 	adj #4
(1270) 09E7 18          ; 	clc
(1271) 09E8 CB7501      ; 	adc.w 1,S
(1272) 09EB CB9501      ; 	sta.w 1,S
(1273) 09EE AB68        ; 	pla.w
(1274) 09F0 18          ; 	clc
(1275) 09F1 AB690000    ; 	adc.w #word_002
(1276) 09F5 AB48        ; 	pha.w
(1277) 09F7 ABDA        ; 	phx.w
(1278) 09F9 201103      ; 	jsr readword_030
(1279) 09FC C204        ; 	adj #4
(1280)                  ; ;  266:     IF gotword THEN enterword;
(1281) 09FE ABADFD4A    ; 	lda.w gotword_015
(1282) 0A02 ABC90100    ; 	cmp.w #1
(1283) 0A06 F003        ; 	beq L_109
(1284) 0A08 4C120A      ; 	jmp L_110
(1285)                  ; L_109
(1286) 0A0B ABDA        ; 	phx.w
(1287) 0A0D 200505      ; 	jsr enterword_062
(1288) 0A10 C202        ; 	adj #2
(1289)                  ; L_110
(1290)                  ; ;  267:     END;
(1291) 0A12 4CAE09      ; 	jmp L_106
(1292)                  ; L_108
(1293)                  ; ;  268: 
(1294)                  ; ;  269:     {Then print the cross reference listing if all went well.}
(1295)                  ; ;  270:     IF wordtablefull THEN BEGIN
(1296) 0A15 ABADF74A    ; 	lda.w wordtablefull_012
(1297) 0A19 ABC90100    ; 	cmp.w #1
(1298) 0A1D F003        ; 	beq L_111
(1299) 0A1F 4C3C0A      ; 	jmp L_112
(1300)                  ; L_111
(1301)                  ; ;  271:         writeln;
(1302) 0A22 20310B      ; 	jsr _writeln
(1303)                  ; ;  272:     writeln('*** The word table is not large enough. ***');
(1304) 0A25 ABE2180C    ; 	psh.w #S_113
(1305) 0A29 ABE20000    ; 	psh.w #0
(1306) 0A2D ABE22B00    ; 	psh.w #43
(1307) 0A31 20370B      ; 	jsr _swrite
(1308) 0A34 C206        ; 	adj #6
(1309) 0A36 20310B      ; 	jsr _writeln
(1310)                  ; ;  273:     END
(1311)                  ; ;  274:     ELSE IF numbertablefull THEN BEGIN
(1312) 0A39 4C6A0A      ; 	jmp L_114
(1313)                  ; L_112
(1314) 0A3C ABADF94A    ; 	lda.w numbertablefull_013
(1315) 0A40 ABC90100    ; 	cmp.w #1
(1316) 0A44 F003        ; 	beq L_115
(1317) 0A46 4C630A      ; 	jmp L_116
(1318)                  ; L_115
(1319)                  ; ;  275:         writeln;
(1320) 0A49 20310B      ; 	jsr _writeln
(1321)                  ; ;  276:     writeln('*** The number table is not large enough. ***');
(1322) 0A4C ABE2EB0B    ; 	psh.w #S_117
(1323) 0A50 ABE20000    ; 	psh.w #0
(1324) 0A54 ABE22D00    ; 	psh.w #45
(1325) 0A58 20370B      ; 	jsr _swrite
(1326) 0A5B C206        ; 	adj #6
(1327) 0A5D 20310B      ; 	jsr _writeln
(1328)                  ; ;  277:     END
(1329)                  ; ;  278:     ELSE BEGIN
(1330) 0A60 4C6A0A      ; 	jmp L_118
(1331)                  ; L_116
(1332)                  ; ;  279:     printxref;
(1333) 0A63 ABDA        ; 	phx.w
(1334) 0A65 20AB08      ; 	jsr printxref_098
(1335) 0A68 C202        ; 	adj #2
(1336)                  ; ;  280:     END;
(1337)                  ; L_118
(1338)                  ; L_114
(1339)                  ; ;  281: 
(1340)                  ; ;  282:     {Print final stats.}
(1341)                  ; ;  283:     writeln;
(1342) 0A6A 20310B      ; 	jsr _writeln
(1343)                  ; ;  284:     writeln((nextwordindex - 1):5,   ' word entries.');
(1344) 0A6D ABADF14A    ; 	lda.w nextwordindex_009
(1345) 0A71 AB48        ; 	pha.w
(1346) 0A73 A901        ; 	lda #1
(1347) 0A75 CB4401      ; 	xma.w 1,S
(1348) 0A78 38          ; 	sec
(1349) 0A79 CBF501      ; 	sbc.w 1,S
(1350) 0A7C C202        ; 	adj #2
(1351) 0A7E AB48        ; 	pha.w
(1352)                  ; 	lda #5
(1353) 0A80 ABE20500    ; 	psh.w #5
(1354) 0A84 20490B      ; 	jsr _iwrite
(1355) 0A87 C204        ; 	adj #4
(1356) 0A89 ABE2DD0B    ; 	psh.w #S_119
(1357) 0A8D ABE20000    ; 	psh.w #0
(1358) 0A91 ABE20E00    ; 	psh.w #14
(1359) 0A95 20370B      ; 	jsr _swrite
(1360) 0A98 C206        ; 	adj #6
(1361) 0A9A 20310B      ; 	jsr _writeln
(1362)                  ; ;  285:     writeln((nextnumberindex - 1):5, ' line number entries.');
(1363) 0A9D ABADF34A    ; 	lda.w nextnumberindex_010
(1364) 0AA1 AB48        ; 	pha.w
(1365) 0AA3 A901        ; 	lda #1
(1366) 0AA5 CB4401      ; 	xma.w 1,S
(1367) 0AA8 38          ; 	sec
(1368) 0AA9 CBF501      ; 	sbc.w 1,S
(1369) 0AAC C202        ; 	adj #2
(1370) 0AAE AB48        ; 	pha.w
(1371)                  ; 	lda #5
(1372) 0AB0 ABE20500    ; 	psh.w #5
(1373) 0AB4 20490B      ; 	jsr _iwrite
(1374) 0AB7 C204        ; 	adj #4
(1375) 0AB9 ABE2C80B    ; 	psh.w #S_120
(1376) 0ABD ABE20000    ; 	psh.w #0
(1377) 0AC1 ABE21500    ; 	psh.w #21
(1378) 0AC5 20370B      ; 	jsr _swrite
(1379) 0AC8 C206        ; 	adj #6
(1380) 0ACA 20310B      ; 	jsr _writeln
(1381)                  ; ;  286: END {xref}.
(1382)                  ; ;  287: 
(1383) 0ACD ABFA        ; 	plx.w
(1384) 0ACF 60          ; 	rts
(1385)                  ; 	.end _pc65_main
(1386)                  ; 
(1387)                  ; ;
(1388)                  ; ;   unsigned division 16 x 16
(1389)                  ; ;
(1390)                  ;             .cod
(1391)                  ; ;
(1392)                  ; _Q          .equ    5
(1393)                  ; _D          .equ    3
(1394)                  ; ;
(1395)                  ; _idiv       .proc
(1396) 0AD0 A900        ;             lda #0          ; clear remainder (A)
(1397) 0AD2 0B          ;             dup a           ; push
(1398) 0AD3 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
(1399) 0AD6 A010        ;             ldy #16         ; bit counter
(1400)                  ; ;
(1401)                  ; _idiv_Lp    
(1402) 0AD8 18          ;             clc
(1403) 0AD9 AB0A        ;             asl.w a         ; shift AQ left
(1404) 0ADB 1B          ;             swp a
(1405) 0ADC AB2A        ;             rol.w a
(1406)                  ; ;
(1407) 0ADE B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
(1408)                  ; ;
(1409)                  ; _idiv_Minus
(1410) 0AE0 38          ;             sec
(1411) 0AE1 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
(1412)                  ; ;
(1413) 0AE4 8004        ;             bra _idiv_Next
(1414)                  ; ;
(1415)                  ; _idiv_Plus
(1416) 0AE6 18          ;             clc
(1417) 0AE7 CB7503      ;             adc.w _D,S      ; add divisor (D)
(1418)                  ; ;
(1419)                  ; _idiv_Next    
(1420) 0AEA 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
(1421) 0AEB 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
(1422) 0AED AB1A        ;             inc.w a
(1423)                  ; ;
(1424)                  ; _idiv_Dec
(1425) 0AEF 88          ;             dey             ; loop until loop counter == 0
(1426) 0AF0 D0E6        ;             bne _idiv_Lp
(1427)                  ; ;
(1428)                  ; _idiv_Exit
(1429) 0AF2 1B          ;             swp a           ; Test remainder
(1430) 0AF3 AB090000    ;             ora.w #0
(1431) 0AF7 1004        ;             bpl _idiv_Finish
(1432) 0AF9 18          ;             clc
(1433) 0AFA CB7503      ;             adc.w 3,S
(1434)                  ; _idiv_Finish
(1435) 0AFD 1B          ;             swp a
(1436)                  ; ;
(1437) 0AFE 60          ;             rts
(1438)                  ; ;
(1439)                  ;             .endp _idiv
(1440)                  ; 
(1441)                  ; ;
(1442)                  ; ; signed multiplication: 16 x 16 => 32
(1443)                  ; ;
(1444)                  ;             .cod
(1445)                  ; ;
(1446)                  ; _M          .equ    5
(1447)                  ; _R          .equ    3
(1448)                  ; ;
(1449)                  ; _imul       .proc
(1450) 0AFF A010        ;             ldy #16             ; y = bit count
(1451) 0B01 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
(1452) 0B03 0B          ;             dup a               ; A = { 0,  0,  x}
(1453) 0B04 0B          ;             dup a               ; A = { 0,  0,  0}
(1454) 0B05 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
(1455) 0B08 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
(1456) 0B0A AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
(1457) 0B0E 18          ;             clc                 ; initialize Booth recoding bit
(1458) 0B0F 2B          ;             rot a               ; A = {PH, PL, `R}
(1459)                  ; ;
(1460) 0B10 8003        ;             bra _imul_TstB
(1461)                  ; ;
(1462)                  ; _imul_Lp
(1463) 0B12 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
(1464) 0B14 2B          ;             rot a               ; A = {PH, PL, `R}
(1465)                  ; _imul_TstB
(1466) 0B15 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
(1467)                  ; ;
(1468)                  ; _imul_AddShft
(1469) 0B17 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
(1470)                  ; _imul_AddM
(1471) 0B19 18          ;             clc
(1472) 0B1A CB7505      ;             adc.w _M,S          ; PH += M
(1473) 0B1D 8006        ;             bra _imul_ShftP
(1474)                  ; ;
(1475)                  ; _imul_SubShft
(1476) 0B1F 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
(1477)                  ; _imul_SubM
(1478) 0B21 38          ;             sec
(1479) 0B22 CBF505      ;             sbc.w _M,S          ; PH -= M
(1480)                  ; ;
(1481)                  ; _imul_ShftP
(1482) 0B25 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
(1483) 0B27 2B          ;             rot a               ; A = {PL, `R, PH}
(1484) 0B28 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
(1485) 0B2A 2B          ;             rot a               ; A = {`R, PH, PL}
(1486)                  ; ;
(1487)                  ; _imul_Dec
(1488) 0B2B 88          ;             dey
(1489) 0B2C D0E4        ;             bne _imul_Lp
(1490)                  ; ;
(1491)                  ; _imul_Exit
(1492) 0B2E 2B          ;             rot a               ; A = {PH, PL, `R}
(1493) 0B2F 1B          ;             swp a               ; A = {PL, PH, `R}
(1494)                  ; ;
(1495) 0B30 60          ;             rts
(1496)                  ; ;
(1497)                  ;             .endp _imul
(1498)                  ; 
(1499)                  ; ;
(1500)                  ; ; put <newLine> to output
(1501)                  ; ;
(1502)                  ;             .cod
(1503)                  ; ;
(1504)                  ; _newLine    .equ    0x0A
(1505)                  ; _putChar    .equ    0xF001
(1506)                  ; ;
(1507)                  ; _writeln    .proc
(1508) 0B31 A90A        ;             lda #_newLine
(1509) 0B33 8D01F0      ;             sta _putChar
(1510)                  ; ;
(1511) 0B36 60          ;             rts
(1512)                  ; ;
(1513)                  ;             .endp _writeln
(1514)                  ; ;
(1515)                  ; ; put string to output
(1516)                  ; ;
(1517)                  ;             .cod
(1518)                  ; ;
(1519)                  ; _sPtrOff    .equ    7
(1520)                  ; _sLenOff    .equ    3
(1521)                  ; ;
(1522)                  ; _swrite     .proc
(1523) 0B37 CBB403      ;             ldy.w _sLenOff,S        ; load string length
(1524) 0B3A CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
(1525) 0B3D 9B0B        ;             tai                     ; transfer sptr to IP
(1526)                  ; ;
(1527)                  ; _swrite_Lp
(1528) 0B3F A300        ;             lda 0,I++               ; load char from strig
(1529) 0B41 8D01F0      ;             sta _putChar            ; write char to output
(1530)                  ; ;
(1531) 0B44 AB88        ;             dey.w                   ; loop while string length <> 0
(1532) 0B46 D0F7        ;             bne _swrite_Lp
(1533)                  ; ;
(1534) 0B48 60          ;             rts
(1535)                  ; ;
(1536)                  ;             .endp _swrite
(1537)                  ; ;
(1538)                  ; ; put integer to output
(1539)                  ; ;
(1540)                  ;             .cod
(1541)                  ; ;
(1542)                  ; _iValOff    .equ    7
(1543)                  ; _fLenOff    .equ    5
(1544)                  ; _iCntOff    .equ    -1
(1545)                  ; ;
(1546)                  ; _iwrite     .proc
(1547) 0B49 ABDA        ;             phx.w                   ; save current base pointer
(1548) 0B4B ABBA        ;             tsx.w                   ; assign new base pointer
(1549)                  ; ;
(1550) 0B4D B505        ;             lda _fLenOff,X          ; load field width specifier
(1551) 0B4F C905        ;             cmp #5                  ; compare against max integer digit count
(1552) 0B51 AB3002      ;             ble _iwrite_SetCnt
(1553) 0B54 A905        ;             lda #5
(1554)                  ; ;
(1555)                  ; _iwrite_SetCnt
(1556) 0B56 AB48        ;             pha.w                   ; set iteration count to fld width
(1557) 0B58 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
(1558)                  ; ;
(1559)                  ; _iwrite_Lp
(1560) 0B5B AB48        ;             pha.w                   ; push dividend argument to _idiv
(1561) 0B5D ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
(1562) 0B61 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
(1563) 0B65 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
(1564) 0B67 1B          ;             swp a                   ; put the remainder into ATOS
(1565)                  ; ;
(1566) 0B68 18          ;             clc                     ; convert remainder into ASCII character
(1567) 0B69 6930        ;             adc #48
(1568) 0B6B 48          ;             pha                     ; push LS digit of integer onto stack
(1569)                  ; ;
(1570) 0B6C 2B          ;             rot a                   ; rotate quotient into ATOS position
(1571)                  ; ;
(1572) 0B6D ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
(1573) 0B70 D0E9        ;             bne _iwrite_Lp
(1574)                  ; ;-------------------------------------------------------------------------------
(1575) 0B72 0B          ;             dup a                   ; save integer part of the conversion
(1576)                  ; ;-------------------------------------------------------------------------------
(1577)                  ; _iwrite_Fill
(1578) 0B73 B505        ;             lda _fLenOff,X          ; load field width specifier
(1579) 0B75 C905        ;             cmp #5                  ; compare against max integer digit count
(1580) 0B77 AB300A      ;             ble _iwrite_GenPtr
(1581) 0B7A 38          ;             sec                     ; subtract max integer length from fld len
(1582) 0B7B E905        ;             sbc #5
(1583) 0B7D A8          ;             tay                     ; set difference as loop counter
(1584) 0B7E A930        ;             lda #48                 ; fill remaining field with '0'
(1585)                  ; ;
(1586)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
(1587) 0B80 48          ;             pha
(1588) 0B81 88          ;             dey
(1589) 0B82 D0FC        ;             bne _iwrite_Fill_Lp
(1590)                  ; ;-------------------------------------------------------------------------------
(1591)                  ; _iwrite_GenPtr
(1592) 0B84 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
(1593) 0B87 AB1A        ;             inc.w a                 ; remove stack pointer write bias
(1594) 0B89 AB48        ;             pha.w                   ; push string pointer to stack
(1595)                  ; ;-------------------------------------------------------------------------------
(1596) 0B8B 2B          ;             rot a                   ; restore integer part of the conversion
(1597)                  ; ;-------------------------------------------------------------------------------
(1598) 0B8C ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
(1599) 0B90 F00F        ;             beq _iwrite_Sup0
(1600) 0B92 A000        ;             ldy #0
(1601)                  ; _iwrite_ErrLp
(1602) 0B94 A92A        ;             lda #0x2A               ; fill integer field with '*'
(1603) 0B96 8B9101      ;             sta (1,S),Y
(1604) 0B99 C8          ;             iny
(1605) 0B9A FBD505      ;             cmp.y _fLenOff,X
(1606) 0B9D D0F5        ;             bne _iwrite_ErrLp
(1607) 0B9F 8014        ;             bra _iwrite_Exit
(1608)                  ; ;-------------------------------------------------------------------------------
(1609)                  ; _iwrite_Sup0
(1610) 0BA1 A000        ;             ldy #0                  ; initialize string index
(1611)                  ; _iwrite_Sup0_Lp
(1612) 0BA3 8BB101      ;             lda (1,S),Y
(1613) 0BA6 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
(1614) 0BA8 D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
(1615) 0BAA A920        ;             lda #32                 ; replace leading 0 with ' '
(1616) 0BAC 8B9101      ;             sta (1,S),Y
(1617) 0BAF C8          ;             iny                     ; increment string index and compare to fLen
(1618) 0BB0 FBD505      ;             cmp.y _fLenOff,X
(1619) 0BB3 D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
(1620)                  ; ;-------------------------------------------------------------------------------
(1621)                  ; _iwrite_Exit
(1622) 0BB5 ABE20000    ;             psh.w #0                ; NULL argument
(1623) 0BB9 B505        ;             lda _fLenOff,X          ; push field width specifier
(1624) 0BBB AB48        ;             pha.w
(1625) 0BBD 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
(1626) 0BC1 C206        ;             adj #6                  ; remove parameters to _swrite() from stack
(1627)                  ; ;
(1628) 0BC3 AB9A        ;             txs.w                   ; deallocate stack variables
(1629) 0BC5 ABFA        ;             plx.w                   ; restore previous base pointer
(1630) 0BC7 60          ;             rts
(1631)                  ; ;
(1632)                  ;             .endp _iwrite
(1633)                  ; 
(1634)                  ; 	.dat
(1635)                  ; 
(1636) 0BC8 206C696E    ; S_120 .str " line number entries."
       0BCC 65206E756D62657220656E74726965732E
(1637) 0BDD 20776F72    ; S_119 .str " word entries."
       0BE1 6420656E74726965732E
(1638) 0BEB 2A2A2A20    ; S_117 .str "*** The number table is not large enough. ***"
       0BEF 546865206E756D626572207461626C65206973206E6F74206C6172676520656E
       0C0F 6F7567682E202A2A2A
(1639) 0C18 2A2A2A20    ; S_113 .str "*** The word table is not large enough. ***"
       0C1C 54686520776F7264207461626C65206973206E6F74206C6172676520656E6F75
       0C3C 67682E202A2A2A
(1640) 0C43 20202020    ; S_105 .str "    1 : "
       0C47 31203A20
(1641) 0C4B 2D2D2D2D    ; S_101 .str "---------------"
       0C4F 2D2D2D2D2D2D2D2D2D2D2D
(1642) 0C5A 43726F73    ; S_100 .str "Cross-reference"
       0C5E 732D7265666572656E6365
(1643) 0C69 203A20      ; S_020 .str " : "
(1644) 0C6C 00          ; _bss_start .byt 0
(1645) 0C6D 00000000    ; wordtable_007 .byt 0[12000]
       0C71 0000000000000000000000000000000000000000000000000000000000000000
       0C91 0000000000000000000000000000000000000000000000000000000000000000
       0CB1 0000000000000000000000000000000000000000000000000000000000000000
       0CD1 0000000000000000000000000000000000000000000000000000000000000000
       0CF1 0000000000000000000000000000000000000000000000000000000000000000
       0D11 0000000000000000000000000000000000000000000000000000000000000000
       0D31 0000000000000000000000000000000000000000000000000000000000000000
       0D51 0000000000000000000000000000000000000000000000000000000000000000
       0D71 0000000000000000000000000000000000000000000000000000000000000000
       0D91 0000000000000000000000000000000000000000000000000000000000000000
       0DB1 0000000000000000000000000000000000000000000000000000000000000000
       0DD1 0000000000000000000000000000000000000000000000000000000000000000
       0DF1 0000000000000000000000000000000000000000000000000000000000000000
       0E11 0000000000000000000000000000000000000000000000000000000000000000
       0E31 0000000000000000000000000000000000000000000000000000000000000000
       0E51 0000000000000000000000000000000000000000000000000000000000000000
       0E71 0000000000000000000000000000000000000000000000000000000000000000
       0E91 0000000000000000000000000000000000000000000000000000000000000000
       0EB1 0000000000000000000000000000000000000000000000000000000000000000
       0ED1 0000000000000000000000000000000000000000000000000000000000000000
       0EF1 0000000000000000000000000000000000000000000000000000000000000000
       0F11 0000000000000000000000000000000000000000000000000000000000000000
       0F31 0000000000000000000000000000000000000000000000000000000000000000
       0F51 0000000000000000000000000000000000000000000000000000000000000000
       0F71 0000000000000000000000000000000000000000000000000000000000000000
       0F91 0000000000000000000000000000000000000000000000000000000000000000
       0FB1 0000000000000000000000000000000000000000000000000000000000000000
       0FD1 0000000000000000000000000000000000000000000000000000000000000000
       0FF1 0000000000000000000000000000000000000000000000000000000000000000
       1011 0000000000000000000000000000000000000000000000000000000000000000
       1031 0000000000000000000000000000000000000000000000000000000000000000
       1051 0000000000000000000000000000000000000000000000000000000000000000
       1071 0000000000000000000000000000000000000000000000000000000000000000
       1091 0000000000000000000000000000000000000000000000000000000000000000
       10B1 0000000000000000000000000000000000000000000000000000000000000000
       10D1 0000000000000000000000000000000000000000000000000000000000000000
       10F1 0000000000000000000000000000000000000000000000000000000000000000
       1111 0000000000000000000000000000000000000000000000000000000000000000
       1131 0000000000000000000000000000000000000000000000000000000000000000
       1151 0000000000000000000000000000000000000000000000000000000000000000
       1171 0000000000000000000000000000000000000000000000000000000000000000
       1191 0000000000000000000000000000000000000000000000000000000000000000
       11B1 0000000000000000000000000000000000000000000000000000000000000000
       11D1 0000000000000000000000000000000000000000000000000000000000000000
       11F1 0000000000000000000000000000000000000000000000000000000000000000
       1211 0000000000000000000000000000000000000000000000000000000000000000
       1231 0000000000000000000000000000000000000000000000000000000000000000
       1251 0000000000000000000000000000000000000000000000000000000000000000
       1271 0000000000000000000000000000000000000000000000000000000000000000
       1291 0000000000000000000000000000000000000000000000000000000000000000
       12B1 0000000000000000000000000000000000000000000000000000000000000000
       12D1 0000000000000000000000000000000000000000000000000000000000000000
       12F1 0000000000000000000000000000000000000000000000000000000000000000
       1311 0000000000000000000000000000000000000000000000000000000000000000
       1331 0000000000000000000000000000000000000000000000000000000000000000
       1351 0000000000000000000000000000000000000000000000000000000000000000
       1371 0000000000000000000000000000000000000000000000000000000000000000
       1391 0000000000000000000000000000000000000000000000000000000000000000
       13B1 0000000000000000000000000000000000000000000000000000000000000000
       13D1 0000000000000000000000000000000000000000000000000000000000000000
       13F1 0000000000000000000000000000000000000000000000000000000000000000
       1411 0000000000000000000000000000000000000000000000000000000000000000
       1431 0000000000000000000000000000000000000000000000000000000000000000
       1451 0000000000000000000000000000000000000000000000000000000000000000
       1471 0000000000000000000000000000000000000000000000000000000000000000
       1491 0000000000000000000000000000000000000000000000000000000000000000
       14B1 0000000000000000000000000000000000000000000000000000000000000000
       14D1 0000000000000000000000000000000000000000000000000000000000000000
       14F1 0000000000000000000000000000000000000000000000000000000000000000
       1511 0000000000000000000000000000000000000000000000000000000000000000
       1531 0000000000000000000000000000000000000000000000000000000000000000
       1551 0000000000000000000000000000000000000000000000000000000000000000
       1571 0000000000000000000000000000000000000000000000000000000000000000
       1591 0000000000000000000000000000000000000000000000000000000000000000
       15B1 0000000000000000000000000000000000000000000000000000000000000000
       15D1 0000000000000000000000000000000000000000000000000000000000000000
       15F1 0000000000000000000000000000000000000000000000000000000000000000
       1611 0000000000000000000000000000000000000000000000000000000000000000
       1631 0000000000000000000000000000000000000000000000000000000000000000
       1651 0000000000000000000000000000000000000000000000000000000000000000
       1671 0000000000000000000000000000000000000000000000000000000000000000
       1691 0000000000000000000000000000000000000000000000000000000000000000
       16B1 0000000000000000000000000000000000000000000000000000000000000000
       16D1 0000000000000000000000000000000000000000000000000000000000000000
       16F1 0000000000000000000000000000000000000000000000000000000000000000
       1711 0000000000000000000000000000000000000000000000000000000000000000
       1731 0000000000000000000000000000000000000000000000000000000000000000
       1751 0000000000000000000000000000000000000000000000000000000000000000
       1771 0000000000000000000000000000000000000000000000000000000000000000
       1791 0000000000000000000000000000000000000000000000000000000000000000
       17B1 0000000000000000000000000000000000000000000000000000000000000000
       17D1 0000000000000000000000000000000000000000000000000000000000000000
       17F1 0000000000000000000000000000000000000000000000000000000000000000
       1811 0000000000000000000000000000000000000000000000000000000000000000
       1831 0000000000000000000000000000000000000000000000000000000000000000
       1851 0000000000000000000000000000000000000000000000000000000000000000
       1871 0000000000000000000000000000000000000000000000000000000000000000
       1891 0000000000000000000000000000000000000000000000000000000000000000
       18B1 0000000000000000000000000000000000000000000000000000000000000000
       18D1 0000000000000000000000000000000000000000000000000000000000000000
       18F1 0000000000000000000000000000000000000000000000000000000000000000
       1911 0000000000000000000000000000000000000000000000000000000000000000
       1931 0000000000000000000000000000000000000000000000000000000000000000
       1951 0000000000000000000000000000000000000000000000000000000000000000
       1971 0000000000000000000000000000000000000000000000000000000000000000
       1991 0000000000000000000000000000000000000000000000000000000000000000
       19B1 0000000000000000000000000000000000000000000000000000000000000000
       19D1 0000000000000000000000000000000000000000000000000000000000000000
       19F1 0000000000000000000000000000000000000000000000000000000000000000
       1A11 0000000000000000000000000000000000000000000000000000000000000000
       1A31 0000000000000000000000000000000000000000000000000000000000000000
       1A51 0000000000000000000000000000000000000000000000000000000000000000
       1A71 0000000000000000000000000000000000000000000000000000000000000000
       1A91 0000000000000000000000000000000000000000000000000000000000000000
       1AB1 0000000000000000000000000000000000000000000000000000000000000000
       1AD1 0000000000000000000000000000000000000000000000000000000000000000
       1AF1 0000000000000000000000000000000000000000000000000000000000000000
       1B11 0000000000000000000000000000000000000000000000000000000000000000
       1B31 0000000000000000000000000000000000000000000000000000000000000000
       1B51 0000000000000000000000000000000000000000000000000000000000000000
       1B71 0000000000000000000000000000000000000000000000000000000000000000
       1B91 0000000000000000000000000000000000000000000000000000000000000000
       1BB1 0000000000000000000000000000000000000000000000000000000000000000
       1BD1 0000000000000000000000000000000000000000000000000000000000000000
       1BF1 0000000000000000000000000000000000000000000000000000000000000000
       1C11 0000000000000000000000000000000000000000000000000000000000000000
       1C31 0000000000000000000000000000000000000000000000000000000000000000
       1C51 0000000000000000000000000000000000000000000000000000000000000000
       1C71 0000000000000000000000000000000000000000000000000000000000000000
       1C91 0000000000000000000000000000000000000000000000000000000000000000
       1CB1 0000000000000000000000000000000000000000000000000000000000000000
       1CD1 0000000000000000000000000000000000000000000000000000000000000000
       1CF1 0000000000000000000000000000000000000000000000000000000000000000
       1D11 0000000000000000000000000000000000000000000000000000000000000000
       1D31 0000000000000000000000000000000000000000000000000000000000000000
       1D51 0000000000000000000000000000000000000000000000000000000000000000
       1D71 0000000000000000000000000000000000000000000000000000000000000000
       1D91 0000000000000000000000000000000000000000000000000000000000000000
       1DB1 0000000000000000000000000000000000000000000000000000000000000000
       1DD1 0000000000000000000000000000000000000000000000000000000000000000
       1DF1 0000000000000000000000000000000000000000000000000000000000000000
       1E11 0000000000000000000000000000000000000000000000000000000000000000
       1E31 0000000000000000000000000000000000000000000000000000000000000000
       1E51 0000000000000000000000000000000000000000000000000000000000000000
       1E71 0000000000000000000000000000000000000000000000000000000000000000
       1E91 0000000000000000000000000000000000000000000000000000000000000000
       1EB1 0000000000000000000000000000000000000000000000000000000000000000
       1ED1 0000000000000000000000000000000000000000000000000000000000000000
       1EF1 0000000000000000000000000000000000000000000000000000000000000000
       1F11 0000000000000000000000000000000000000000000000000000000000000000
       1F31 0000000000000000000000000000000000000000000000000000000000000000
       1F51 0000000000000000000000000000000000000000000000000000000000000000
       1F71 0000000000000000000000000000000000000000000000000000000000000000
       1F91 0000000000000000000000000000000000000000000000000000000000000000
       1FB1 0000000000000000000000000000000000000000000000000000000000000000
       1FD1 0000000000000000000000000000000000000000000000000000000000000000
       1FF1 0000000000000000000000000000000000000000000000000000000000000000
       2011 0000000000000000000000000000000000000000000000000000000000000000
       2031 0000000000000000000000000000000000000000000000000000000000000000
       2051 0000000000000000000000000000000000000000000000000000000000000000
       2071 0000000000000000000000000000000000000000000000000000000000000000
       2091 0000000000000000000000000000000000000000000000000000000000000000
       20B1 0000000000000000000000000000000000000000000000000000000000000000
       20D1 0000000000000000000000000000000000000000000000000000000000000000
       20F1 0000000000000000000000000000000000000000000000000000000000000000
       2111 0000000000000000000000000000000000000000000000000000000000000000
       2131 0000000000000000000000000000000000000000000000000000000000000000
       2151 0000000000000000000000000000000000000000000000000000000000000000
       2171 0000000000000000000000000000000000000000000000000000000000000000
       2191 0000000000000000000000000000000000000000000000000000000000000000
       21B1 0000000000000000000000000000000000000000000000000000000000000000
       21D1 0000000000000000000000000000000000000000000000000000000000000000
       21F1 0000000000000000000000000000000000000000000000000000000000000000
       2211 0000000000000000000000000000000000000000000000000000000000000000
       2231 0000000000000000000000000000000000000000000000000000000000000000
       2251 0000000000000000000000000000000000000000000000000000000000000000
       2271 0000000000000000000000000000000000000000000000000000000000000000
       2291 0000000000000000000000000000000000000000000000000000000000000000
       22B1 0000000000000000000000000000000000000000000000000000000000000000
       22D1 0000000000000000000000000000000000000000000000000000000000000000
       22F1 0000000000000000000000000000000000000000000000000000000000000000
       2311 0000000000000000000000000000000000000000000000000000000000000000
       2331 0000000000000000000000000000000000000000000000000000000000000000
       2351 0000000000000000000000000000000000000000000000000000000000000000
       2371 0000000000000000000000000000000000000000000000000000000000000000
       2391 0000000000000000000000000000000000000000000000000000000000000000
       23B1 0000000000000000000000000000000000000000000000000000000000000000
       23D1 0000000000000000000000000000000000000000000000000000000000000000
       23F1 0000000000000000000000000000000000000000000000000000000000000000
       2411 0000000000000000000000000000000000000000000000000000000000000000
       2431 0000000000000000000000000000000000000000000000000000000000000000
       2451 0000000000000000000000000000000000000000000000000000000000000000
       2471 0000000000000000000000000000000000000000000000000000000000000000
       2491 0000000000000000000000000000000000000000000000000000000000000000
       24B1 0000000000000000000000000000000000000000000000000000000000000000
       24D1 0000000000000000000000000000000000000000000000000000000000000000
       24F1 0000000000000000000000000000000000000000000000000000000000000000
       2511 0000000000000000000000000000000000000000000000000000000000000000
       2531 0000000000000000000000000000000000000000000000000000000000000000
       2551 0000000000000000000000000000000000000000000000000000000000000000
       2571 0000000000000000000000000000000000000000000000000000000000000000
       2591 0000000000000000000000000000000000000000000000000000000000000000
       25B1 0000000000000000000000000000000000000000000000000000000000000000
       25D1 0000000000000000000000000000000000000000000000000000000000000000
       25F1 0000000000000000000000000000000000000000000000000000000000000000
       2611 0000000000000000000000000000000000000000000000000000000000000000
       2631 0000000000000000000000000000000000000000000000000000000000000000
       2651 0000000000000000000000000000000000000000000000000000000000000000
       2671 0000000000000000000000000000000000000000000000000000000000000000
       2691 0000000000000000000000000000000000000000000000000000000000000000
       26B1 0000000000000000000000000000000000000000000000000000000000000000
       26D1 0000000000000000000000000000000000000000000000000000000000000000
       26F1 0000000000000000000000000000000000000000000000000000000000000000
       2711 0000000000000000000000000000000000000000000000000000000000000000
       2731 0000000000000000000000000000000000000000000000000000000000000000
       2751 0000000000000000000000000000000000000000000000000000000000000000
       2771 0000000000000000000000000000000000000000000000000000000000000000
       2791 0000000000000000000000000000000000000000000000000000000000000000
       27B1 0000000000000000000000000000000000000000000000000000000000000000
       27D1 0000000000000000000000000000000000000000000000000000000000000000
       27F1 0000000000000000000000000000000000000000000000000000000000000000
       2811 0000000000000000000000000000000000000000000000000000000000000000
       2831 0000000000000000000000000000000000000000000000000000000000000000
       2851 0000000000000000000000000000000000000000000000000000000000000000
       2871 0000000000000000000000000000000000000000000000000000000000000000
       2891 0000000000000000000000000000000000000000000000000000000000000000
       28B1 0000000000000000000000000000000000000000000000000000000000000000
       28D1 0000000000000000000000000000000000000000000000000000000000000000
       28F1 0000000000000000000000000000000000000000000000000000000000000000
       2911 0000000000000000000000000000000000000000000000000000000000000000
       2931 0000000000000000000000000000000000000000000000000000000000000000
       2951 0000000000000000000000000000000000000000000000000000000000000000
       2971 0000000000000000000000000000000000000000000000000000000000000000
       2991 0000000000000000000000000000000000000000000000000000000000000000
       29B1 0000000000000000000000000000000000000000000000000000000000000000
       29D1 0000000000000000000000000000000000000000000000000000000000000000
       29F1 0000000000000000000000000000000000000000000000000000000000000000
       2A11 0000000000000000000000000000000000000000000000000000000000000000
       2A31 0000000000000000000000000000000000000000000000000000000000000000
       2A51 0000000000000000000000000000000000000000000000000000000000000000
       2A71 0000000000000000000000000000000000000000000000000000000000000000
       2A91 0000000000000000000000000000000000000000000000000000000000000000
       2AB1 0000000000000000000000000000000000000000000000000000000000000000
       2AD1 0000000000000000000000000000000000000000000000000000000000000000
       2AF1 0000000000000000000000000000000000000000000000000000000000000000
       2B11 0000000000000000000000000000000000000000000000000000000000000000
       2B31 0000000000000000000000000000000000000000000000000000000000000000
       2B51 0000000000000000000000000000000000000000000000000000000000000000
       2B71 0000000000000000000000000000000000000000000000000000000000000000
       2B91 0000000000000000000000000000000000000000000000000000000000000000
       2BB1 0000000000000000000000000000000000000000000000000000000000000000
       2BD1 0000000000000000000000000000000000000000000000000000000000000000
       2BF1 0000000000000000000000000000000000000000000000000000000000000000
       2C11 0000000000000000000000000000000000000000000000000000000000000000
       2C31 0000000000000000000000000000000000000000000000000000000000000000
       2C51 0000000000000000000000000000000000000000000000000000000000000000
       2C71 0000000000000000000000000000000000000000000000000000000000000000
       2C91 0000000000000000000000000000000000000000000000000000000000000000
       2CB1 0000000000000000000000000000000000000000000000000000000000000000
       2CD1 0000000000000000000000000000000000000000000000000000000000000000
       2CF1 0000000000000000000000000000000000000000000000000000000000000000
       2D11 0000000000000000000000000000000000000000000000000000000000000000
       2D31 0000000000000000000000000000000000000000000000000000000000000000
       2D51 0000000000000000000000000000000000000000000000000000000000000000
       2D71 0000000000000000000000000000000000000000000000000000000000000000
       2D91 0000000000000000000000000000000000000000000000000000000000000000
       2DB1 0000000000000000000000000000000000000000000000000000000000000000
       2DD1 0000000000000000000000000000000000000000000000000000000000000000
       2DF1 0000000000000000000000000000000000000000000000000000000000000000
       2E11 0000000000000000000000000000000000000000000000000000000000000000
       2E31 0000000000000000000000000000000000000000000000000000000000000000
       2E51 0000000000000000000000000000000000000000000000000000000000000000
       2E71 0000000000000000000000000000000000000000000000000000000000000000
       2E91 0000000000000000000000000000000000000000000000000000000000000000
       2EB1 0000000000000000000000000000000000000000000000000000000000000000
       2ED1 0000000000000000000000000000000000000000000000000000000000000000
       2EF1 0000000000000000000000000000000000000000000000000000000000000000
       2F11 0000000000000000000000000000000000000000000000000000000000000000
       2F31 0000000000000000000000000000000000000000000000000000000000000000
       2F51 0000000000000000000000000000000000000000000000000000000000000000
       2F71 0000000000000000000000000000000000000000000000000000000000000000
       2F91 0000000000000000000000000000000000000000000000000000000000000000
       2FB1 0000000000000000000000000000000000000000000000000000000000000000
       2FD1 0000000000000000000000000000000000000000000000000000000000000000
       2FF1 0000000000000000000000000000000000000000000000000000000000000000
       3011 0000000000000000000000000000000000000000000000000000000000000000
       3031 0000000000000000000000000000000000000000000000000000000000000000
       3051 0000000000000000000000000000000000000000000000000000000000000000
       3071 0000000000000000000000000000000000000000000000000000000000000000
       3091 0000000000000000000000000000000000000000000000000000000000000000
       30B1 0000000000000000000000000000000000000000000000000000000000000000
       30D1 0000000000000000000000000000000000000000000000000000000000000000
       30F1 0000000000000000000000000000000000000000000000000000000000000000
       3111 0000000000000000000000000000000000000000000000000000000000000000
       3131 0000000000000000000000000000000000000000000000000000000000000000
       3151 0000000000000000000000000000000000000000000000000000000000000000
       3171 0000000000000000000000000000000000000000000000000000000000000000
       3191 0000000000000000000000000000000000000000000000000000000000000000
       31B1 0000000000000000000000000000000000000000000000000000000000000000
       31D1 0000000000000000000000000000000000000000000000000000000000000000
       31F1 0000000000000000000000000000000000000000000000000000000000000000
       3211 0000000000000000000000000000000000000000000000000000000000000000
       3231 0000000000000000000000000000000000000000000000000000000000000000
       3251 0000000000000000000000000000000000000000000000000000000000000000
       3271 0000000000000000000000000000000000000000000000000000000000000000
       3291 0000000000000000000000000000000000000000000000000000000000000000
       32B1 0000000000000000000000000000000000000000000000000000000000000000
       32D1 0000000000000000000000000000000000000000000000000000000000000000
       32F1 0000000000000000000000000000000000000000000000000000000000000000
       3311 0000000000000000000000000000000000000000000000000000000000000000
       3331 0000000000000000000000000000000000000000000000000000000000000000
       3351 0000000000000000000000000000000000000000000000000000000000000000
       3371 0000000000000000000000000000000000000000000000000000000000000000
       3391 0000000000000000000000000000000000000000000000000000000000000000
       33B1 0000000000000000000000000000000000000000000000000000000000000000
       33D1 0000000000000000000000000000000000000000000000000000000000000000
       33F1 0000000000000000000000000000000000000000000000000000000000000000
       3411 0000000000000000000000000000000000000000000000000000000000000000
       3431 0000000000000000000000000000000000000000000000000000000000000000
       3451 0000000000000000000000000000000000000000000000000000000000000000
       3471 0000000000000000000000000000000000000000000000000000000000000000
       3491 0000000000000000000000000000000000000000000000000000000000000000
       34B1 0000000000000000000000000000000000000000000000000000000000000000
       34D1 0000000000000000000000000000000000000000000000000000000000000000
       34F1 0000000000000000000000000000000000000000000000000000000000000000
       3511 0000000000000000000000000000000000000000000000000000000000000000
       3531 0000000000000000000000000000000000000000000000000000000000000000
       3551 0000000000000000000000000000000000000000000000000000000000000000
       3571 0000000000000000000000000000000000000000000000000000000000000000
       3591 0000000000000000000000000000000000000000000000000000000000000000
       35B1 0000000000000000000000000000000000000000000000000000000000000000
       35D1 0000000000000000000000000000000000000000000000000000000000000000
       35F1 0000000000000000000000000000000000000000000000000000000000000000
       3611 0000000000000000000000000000000000000000000000000000000000000000
       3631 0000000000000000000000000000000000000000000000000000000000000000
       3651 0000000000000000000000000000000000000000000000000000000000000000
       3671 0000000000000000000000000000000000000000000000000000000000000000
       3691 0000000000000000000000000000000000000000000000000000000000000000
       36B1 0000000000000000000000000000000000000000000000000000000000000000
       36D1 0000000000000000000000000000000000000000000000000000000000000000
       36F1 0000000000000000000000000000000000000000000000000000000000000000
       3711 0000000000000000000000000000000000000000000000000000000000000000
       3731 0000000000000000000000000000000000000000000000000000000000000000
       3751 0000000000000000000000000000000000000000000000000000000000000000
       3771 0000000000000000000000000000000000000000000000000000000000000000
       3791 0000000000000000000000000000000000000000000000000000000000000000
       37B1 0000000000000000000000000000000000000000000000000000000000000000
       37D1 0000000000000000000000000000000000000000000000000000000000000000
       37F1 0000000000000000000000000000000000000000000000000000000000000000
       3811 0000000000000000000000000000000000000000000000000000000000000000
       3831 0000000000000000000000000000000000000000000000000000000000000000
       3851 0000000000000000000000000000000000000000000000000000000000000000
       3871 0000000000000000000000000000000000000000000000000000000000000000
       3891 0000000000000000000000000000000000000000000000000000000000000000
       38B1 0000000000000000000000000000000000000000000000000000000000000000
       38D1 0000000000000000000000000000000000000000000000000000000000000000
       38F1 0000000000000000000000000000000000000000000000000000000000000000
       3911 0000000000000000000000000000000000000000000000000000000000000000
       3931 0000000000000000000000000000000000000000000000000000000000000000
       3951 0000000000000000000000000000000000000000000000000000000000000000
       3971 0000000000000000000000000000000000000000000000000000000000000000
       3991 0000000000000000000000000000000000000000000000000000000000000000
       39B1 0000000000000000000000000000000000000000000000000000000000000000
       39D1 0000000000000000000000000000000000000000000000000000000000000000
       39F1 0000000000000000000000000000000000000000000000000000000000000000
       3A11 0000000000000000000000000000000000000000000000000000000000000000
       3A31 0000000000000000000000000000000000000000000000000000000000000000
       3A51 0000000000000000000000000000000000000000000000000000000000000000
       3A71 0000000000000000000000000000000000000000000000000000000000000000
       3A91 0000000000000000000000000000000000000000000000000000000000000000
       3AB1 0000000000000000000000000000000000000000000000000000000000000000
       3AD1 0000000000000000000000000000000000000000000000000000000000000000
       3AF1 0000000000000000000000000000000000000000000000000000000000000000
       3B11 0000000000000000000000000000000000000000000000000000000000000000
       3B31 00000000000000000000000000000000000000000000000000000000
(1646) 3B4D 00000000    ; numbertable_008 .byt 0[4004]
       3B51 0000000000000000000000000000000000000000000000000000000000000000
       3B71 0000000000000000000000000000000000000000000000000000000000000000
       3B91 0000000000000000000000000000000000000000000000000000000000000000
       3BB1 0000000000000000000000000000000000000000000000000000000000000000
       3BD1 0000000000000000000000000000000000000000000000000000000000000000
       3BF1 0000000000000000000000000000000000000000000000000000000000000000
       3C11 0000000000000000000000000000000000000000000000000000000000000000
       3C31 0000000000000000000000000000000000000000000000000000000000000000
       3C51 0000000000000000000000000000000000000000000000000000000000000000
       3C71 0000000000000000000000000000000000000000000000000000000000000000
       3C91 0000000000000000000000000000000000000000000000000000000000000000
       3CB1 0000000000000000000000000000000000000000000000000000000000000000
       3CD1 0000000000000000000000000000000000000000000000000000000000000000
       3CF1 0000000000000000000000000000000000000000000000000000000000000000
       3D11 0000000000000000000000000000000000000000000000000000000000000000
       3D31 0000000000000000000000000000000000000000000000000000000000000000
       3D51 0000000000000000000000000000000000000000000000000000000000000000
       3D71 0000000000000000000000000000000000000000000000000000000000000000
       3D91 0000000000000000000000000000000000000000000000000000000000000000
       3DB1 0000000000000000000000000000000000000000000000000000000000000000
       3DD1 0000000000000000000000000000000000000000000000000000000000000000
       3DF1 0000000000000000000000000000000000000000000000000000000000000000
       3E11 0000000000000000000000000000000000000000000000000000000000000000
       3E31 0000000000000000000000000000000000000000000000000000000000000000
       3E51 0000000000000000000000000000000000000000000000000000000000000000
       3E71 0000000000000000000000000000000000000000000000000000000000000000
       3E91 0000000000000000000000000000000000000000000000000000000000000000
       3EB1 0000000000000000000000000000000000000000000000000000000000000000
       3ED1 0000000000000000000000000000000000000000000000000000000000000000
       3EF1 0000000000000000000000000000000000000000000000000000000000000000
       3F11 0000000000000000000000000000000000000000000000000000000000000000
       3F31 0000000000000000000000000000000000000000000000000000000000000000
       3F51 0000000000000000000000000000000000000000000000000000000000000000
       3F71 0000000000000000000000000000000000000000000000000000000000000000
       3F91 0000000000000000000000000000000000000000000000000000000000000000
       3FB1 0000000000000000000000000000000000000000000000000000000000000000
       3FD1 0000000000000000000000000000000000000000000000000000000000000000
       3FF1 0000000000000000000000000000000000000000000000000000000000000000
       4011 0000000000000000000000000000000000000000000000000000000000000000
       4031 0000000000000000000000000000000000000000000000000000000000000000
       4051 0000000000000000000000000000000000000000000000000000000000000000
       4071 0000000000000000000000000000000000000000000000000000000000000000
       4091 0000000000000000000000000000000000000000000000000000000000000000
       40B1 0000000000000000000000000000000000000000000000000000000000000000
       40D1 0000000000000000000000000000000000000000000000000000000000000000
       40F1 0000000000000000000000000000000000000000000000000000000000000000
       4111 0000000000000000000000000000000000000000000000000000000000000000
       4131 0000000000000000000000000000000000000000000000000000000000000000
       4151 0000000000000000000000000000000000000000000000000000000000000000
       4171 0000000000000000000000000000000000000000000000000000000000000000
       4191 0000000000000000000000000000000000000000000000000000000000000000
       41B1 0000000000000000000000000000000000000000000000000000000000000000
       41D1 0000000000000000000000000000000000000000000000000000000000000000
       41F1 0000000000000000000000000000000000000000000000000000000000000000
       4211 0000000000000000000000000000000000000000000000000000000000000000
       4231 0000000000000000000000000000000000000000000000000000000000000000
       4251 0000000000000000000000000000000000000000000000000000000000000000
       4271 0000000000000000000000000000000000000000000000000000000000000000
       4291 0000000000000000000000000000000000000000000000000000000000000000
       42B1 0000000000000000000000000000000000000000000000000000000000000000
       42D1 0000000000000000000000000000000000000000000000000000000000000000
       42F1 0000000000000000000000000000000000000000000000000000000000000000
       4311 0000000000000000000000000000000000000000000000000000000000000000
       4331 0000000000000000000000000000000000000000000000000000000000000000
       4351 0000000000000000000000000000000000000000000000000000000000000000
       4371 0000000000000000000000000000000000000000000000000000000000000000
       4391 0000000000000000000000000000000000000000000000000000000000000000
       43B1 0000000000000000000000000000000000000000000000000000000000000000
       43D1 0000000000000000000000000000000000000000000000000000000000000000
       43F1 0000000000000000000000000000000000000000000000000000000000000000
       4411 0000000000000000000000000000000000000000000000000000000000000000
       4431 0000000000000000000000000000000000000000000000000000000000000000
       4451 0000000000000000000000000000000000000000000000000000000000000000
       4471 0000000000000000000000000000000000000000000000000000000000000000
       4491 0000000000000000000000000000000000000000000000000000000000000000
       44B1 0000000000000000000000000000000000000000000000000000000000000000
       44D1 0000000000000000000000000000000000000000000000000000000000000000
       44F1 0000000000000000000000000000000000000000000000000000000000000000
       4511 0000000000000000000000000000000000000000000000000000000000000000
       4531 0000000000000000000000000000000000000000000000000000000000000000
       4551 0000000000000000000000000000000000000000000000000000000000000000
       4571 0000000000000000000000000000000000000000000000000000000000000000
       4591 0000000000000000000000000000000000000000000000000000000000000000
       45B1 0000000000000000000000000000000000000000000000000000000000000000
       45D1 0000000000000000000000000000000000000000000000000000000000000000
       45F1 0000000000000000000000000000000000000000000000000000000000000000
       4611 0000000000000000000000000000000000000000000000000000000000000000
       4631 0000000000000000000000000000000000000000000000000000000000000000
       4651 0000000000000000000000000000000000000000000000000000000000000000
       4671 0000000000000000000000000000000000000000000000000000000000000000
       4691 0000000000000000000000000000000000000000000000000000000000000000
       46B1 0000000000000000000000000000000000000000000000000000000000000000
       46D1 0000000000000000000000000000000000000000000000000000000000000000
       46F1 0000000000000000000000000000000000000000000000000000000000000000
       4711 0000000000000000000000000000000000000000000000000000000000000000
       4731 0000000000000000000000000000000000000000000000000000000000000000
       4751 0000000000000000000000000000000000000000000000000000000000000000
       4771 0000000000000000000000000000000000000000000000000000000000000000
       4791 0000000000000000000000000000000000000000000000000000000000000000
       47B1 0000000000000000000000000000000000000000000000000000000000000000
       47D1 0000000000000000000000000000000000000000000000000000000000000000
       47F1 0000000000000000000000000000000000000000000000000000000000000000
       4811 0000000000000000000000000000000000000000000000000000000000000000
       4831 0000000000000000000000000000000000000000000000000000000000000000
       4851 0000000000000000000000000000000000000000000000000000000000000000
       4871 0000000000000000000000000000000000000000000000000000000000000000
       4891 0000000000000000000000000000000000000000000000000000000000000000
       48B1 0000000000000000000000000000000000000000000000000000000000000000
       48D1 0000000000000000000000000000000000000000000000000000000000000000
       48F1 0000000000000000000000000000000000000000000000000000000000000000
       4911 0000000000000000000000000000000000000000000000000000000000000000
       4931 0000000000000000000000000000000000000000000000000000000000000000
       4951 0000000000000000000000000000000000000000000000000000000000000000
       4971 0000000000000000000000000000000000000000000000000000000000000000
       4991 0000000000000000000000000000000000000000000000000000000000000000
       49B1 0000000000000000000000000000000000000000000000000000000000000000
       49D1 0000000000000000000000000000000000000000000000000000000000000000
       49F1 0000000000000000000000000000000000000000000000000000000000000000
       4A11 0000000000000000000000000000000000000000000000000000000000000000
       4A31 0000000000000000000000000000000000000000000000000000000000000000
       4A51 0000000000000000000000000000000000000000000000000000000000000000
       4A71 0000000000000000000000000000000000000000000000000000000000000000
       4A91 0000000000000000000000000000000000000000000000000000000000000000
       4AB1 0000000000000000000000000000000000000000000000000000000000000000
       4AD1 0000000000000000000000000000000000000000000000000000000000000000
(1647) 4AF1 0000        ; nextwordindex_009 .wrd 0
(1648) 4AF3 0000        ; nextnumberindex_010 .wrd 0
(1649) 4AF5 0000        ; linenumber_011 .wrd 0
(1650) 4AF7 0000        ; wordtablefull_012 .wrd 0
(1651) 4AF9 0000        ; numbertablefull_013 .wrd 0
(1652) 4AFB 0000        ; newline_014 .wrd 0
(1653) 4AFD 0000        ; gotword_015 .wrd 0
(1654) 4AFF 00          ; _bss_end .byt 0
(1655) 4B00 00000000    ; _stk .byt 0[1023]
       4B04 0000000000000000000000000000000000000000000000000000000000000000
       4B24 0000000000000000000000000000000000000000000000000000000000000000
       4B44 0000000000000000000000000000000000000000000000000000000000000000
       4B64 0000000000000000000000000000000000000000000000000000000000000000
       4B84 0000000000000000000000000000000000000000000000000000000000000000
       4BA4 0000000000000000000000000000000000000000000000000000000000000000
       4BC4 0000000000000000000000000000000000000000000000000000000000000000
       4BE4 0000000000000000000000000000000000000000000000000000000000000000
       4C04 0000000000000000000000000000000000000000000000000000000000000000
       4C24 0000000000000000000000000000000000000000000000000000000000000000
       4C44 0000000000000000000000000000000000000000000000000000000000000000
       4C64 0000000000000000000000000000000000000000000000000000000000000000
       4C84 0000000000000000000000000000000000000000000000000000000000000000
       4CA4 0000000000000000000000000000000000000000000000000000000000000000
       4CC4 0000000000000000000000000000000000000000000000000000000000000000
       4CE4 0000000000000000000000000000000000000000000000000000000000000000
       4D04 0000000000000000000000000000000000000000000000000000000000000000
       4D24 0000000000000000000000000000000000000000000000000000000000000000
       4D44 0000000000000000000000000000000000000000000000000000000000000000
       4D64 0000000000000000000000000000000000000000000000000000000000000000
       4D84 0000000000000000000000000000000000000000000000000000000000000000
       4DA4 0000000000000000000000000000000000000000000000000000000000000000
       4DC4 0000000000000000000000000000000000000000000000000000000000000000
       4DE4 0000000000000000000000000000000000000000000000000000000000000000
       4E04 0000000000000000000000000000000000000000000000000000000000000000
       4E24 0000000000000000000000000000000000000000000000000000000000000000
       4E44 0000000000000000000000000000000000000000000000000000000000000000
       4E64 0000000000000000000000000000000000000000000000000000000000000000
       4E84 0000000000000000000000000000000000000000000000000000000000000000
       4EA4 0000000000000000000000000000000000000000000000000000000000000000
       4EC4 0000000000000000000000000000000000000000000000000000000000000000
       4EE4 000000000000000000000000000000000000000000000000000000
(1656) 4EFF FF          ; _stk_top .byt -1
(1657)                  ; 
(1658)                  ; 	.end
