   2 	.stk 1024
   3 	.cod 512
   4 STATIC_LINK .equ +5
   5 RETURN_VALUE .equ -3
   6 HIGH_RETURN_VALUE .equ -1
   7 _start
   8 	tsx.w		; Preserve original stack pointer
   9 	lds.w #_stk_top	; Initialize program stack pointer
  10 	stz _bss_start
  11 	ldx.w #_bss_start
  12 	ldy.w #_bss_start+1
  13 	lda.w #_stk_top
  14 	sec
  15 	sbc.w #_bss_start
  16 	mov #10
  17 	jmp _pc65_main
  27 _pc65_main .sub
  28 	phx.w
  29 	tsx.w
  31 	lda #1
  32 	sta.w fn1_002
  34 	lda #0
  35 	sta.w fn2_003
  38 	lda #2
  39 	sta.w i_005
  40 L_006
  41 	lda #24
  42 	cmp.w i_005
  43 	bge L_007
  44 	jmp L_008
  45 L_007
  47 	lda.w fn1_002
  48 	pha.w
  49 	lda.w fn2_003
  50 	clc
  51 	adc.w 1,S
  52 	adj #2
  53 	sta.w tmp_004
  55 	lda.w fn1_002
  56 	sta.w fn2_003
  58 	lda.w tmp_004
  59 	sta.w fn1_002
  61 	inc.w i_005
  62 	jmp L_006
  63 L_008
  64 	dec.w i_005
  66 	psh.w #S_009
  67 	psh.w #0
  68 	psh.w #4
  69 	jsr _swrite
  70 	adj #6
  72 	lda.w i_005
  73 	pha.w
  74 	lda #2
  75 	pha.w
  76 	jsr _iwrite
  77 	adj #4
  79 	psh.w #S_010
  80 	psh.w #0
  81 	psh.w #4
  82 	jsr _swrite
  83 	adj #6
  85 	lda.w fn1_002
  86 	pha.w
  87 	lda #5
  88 	pha.w
  89 	jsr _iwrite
  90 	adj #4
  92 	jsr _writeln
  94 	plx.w
  95 	rts
  96 	.end _pc65_main
 101             .cod
 103 _Q          .equ    5
 104 _D          .equ    3
 106 _idiv       .proc
 107             lda #0          ; clear remainder (A)
 108             dup a           ; push
 109             lda.w _Q,S      ; load dividend (Q)
 110             ldy #16         ; bit counter
 112 _idiv_Lp
 113             clc
 114             asl.w a         ; shift AQ left
 115             swp a
 116             rol.w a
 118             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
 120 _idiv_Minus
 121             sec
 122             sbc.w _D,S      ; subtract divisor (D)
 124             bra _idiv_Next
 126 _idiv_Plus
 127             clc
 128             adc.w _D,S      ; add divisor (D)
 130 _idiv_Next
 131             swp a           ; restore order of Acc stack {Q, A, -}
 132             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
 133             inc.w a
 135 _idiv_Dec
 136             dey             ; loop until loop counter == 0
 137             bne _idiv_Lp
 139 _idiv_Exit
 140             swp a           ; Test remainder
 141             ora.w #0
 142             bpl _idiv_Finish
 143             clc
 144             adc.w 3,S
 145 _idiv_Finish
 146             swp a
 148             rts
 150             .endp _idiv
 155             .cod
 157 _M          .equ    5
 158 _R          .equ    3
 160 _imul       .proc
 161             ldy #16             ; y = bit count
 162             lda #0              ; A = { 0,  x,  x} - clear product
 163             dup a               ; A = { 0,  0,  x}
 164             dup a               ; A = { 0,  0,  0}
 165             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
 166             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
 167             ora.w #0            ; set N flag if msb ATOS == 1
 168             clc                 ; initialize Booth recoding bit
 169             rot a               ; A = {PH, PL, `R}
 171             bra _imul_TstB
 173 _imul_Lp
 174             asl.w a             ; A = {`R << 1, PH, PL}
 175             rot a               ; A = {PH, PL, `R}
 176 _imul_TstB
 177             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
 179 _imul_AddShft
 180             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
 181 _imul_AddM
 182             clc
 183             adc.w _M,S          ; PH += M
 184             bra _imul_ShftP
 186 _imul_SubShft
 187             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
 188 _imul_SubM
 189             sec
 190             sbc.w _M,S          ; PH -= M
 192 _imul_ShftP
 193             asr.w a             ; A = {PH >> 1, PL, `R}
 194             rot a               ; A = {PL, `R, PH}
 195             ror.w a             ; A = {PL >> 2, `R, PH}
 196             rot a               ; A = {`R, PH, PL}
 198 _imul_Dec
 199             dey
 200             bne _imul_Lp
 202 _imul_Exit
 203             rot a               ; A = {PH, PL, `R}
 204             swp a               ; A = {PL, PH, `R}
 206             rts
 208             .endp _imul
 213             .cod
 215 _newLine    .equ    0x0A
 216 _putChar    .equ    0xF001
 218 _writeln    .proc
 219             lda #_newLine
 220             sta _putChar
 222             rts
 224             .endp _writeln
 228             .cod
 230 _sPtrOff    .equ    7
 231 _sLenOff    .equ    3
 233 _swrite     .proc
 234             ldy.w _sLenOff,S        ; load string length
 235             lda.w _sPtrOff,S        ; load string pointer
 236             tai                     ; transfer sptr to IP
 238 _swrite_Lp
 239             lda 0,I++               ; load char from strig
 240             sta _putChar            ; write char to output
 242             dey.w                   ; loop while string length <> 0
 243             bne _swrite_Lp
 245             rts
 247             .endp _swrite
 251             .cod
 253 _iValOff    .equ    7
 254 _fLenOff    .equ    5
 255 _iCntOff    .equ    -1
 257 _iwrite     .proc
 258             phx.w                   ; save current base pointer
 259             tsx.w                   ; assign new base pointer
 261             lda _fLenOff,X          ; load field width specifier
 262             cmp #5                  ; compare against max integer digit count
 263             ble _iwrite_SetCnt
 264             lda #5
 266 _iwrite_SetCnt
 267             pha.w                   ; set iteration count to fld width
 268             lda.w _iValOff,X        ; load a with integer value
 270 _iwrite_Lp
 271             pha.w                   ; push dividend argument to _idiv
 272             psh.w #10               ; push divisor argument to _idiv
 273             csr _idiv               ; determine the remainder,
 274             adj #4                  ; remove arguments passed to _idiv from stk
 275             swp a                   ; put the remainder into ATOS
 277             clc                     ; convert remainder into ASCII character
 278             adc #48
 279             pha                     ; push LS digit of integer onto stack
 281             rot a                   ; rotate quotient into ATOS position
 283             dec.w _iCntOff,X        ; decrement digit iteration count
 284             bne _iwrite_Lp
 286             dup a                   ; save integer part of the conversion
 288 _iwrite_Fill
 289             lda _fLenOff,X          ; load field width specifier
 290             cmp #5                  ; compare against max integer digit count
 291             ble _iwrite_GenPtr
 292             sec                     ; subtract max integer length from fld len
 293             sbc #5
 294             tay                     ; set difference as loop counter
 295             lda #48                 ; fill remaining field with '0'
 297 _iwrite_Fill_Lp                     ; increase string on stack with fill data
 298             pha
 299             dey
 300             bne _iwrite_Fill_Lp
 302 _iwrite_GenPtr
 303             tsa.w                   ; transfer current stk pointer to A
 304             inc.w a                 ; remove stack pointer write bias
 305             pha.w                   ; push string pointer to stack
 307             rot a                   ; restore integer part of the conversion
 309             cmp.w #0                ; test for 0. If not 0, int > 10^fld
 310             beq _iwrite_Sup0
 311             ldy #0
 312 _iwrite_ErrLp
 313             lda #0x2A               ; fill integer field with '*'
 314             sta (1,S),Y
 315             iny
 316             cmp.y _fLenOff,X
 317             bne _iwrite_ErrLp
 318             bra _iwrite_Exit
 320 _iwrite_Sup0
 321             ldy #0                  ; initialize string index
 322 _iwrite_Sup0_Lp
 323             lda (1,S),Y
 324             cmp #48                 ; if leading position == 0, replace with ' '
 325             bne _iwrite_Exit        ; exit loop on first non-0 digit
 326             lda #32                 ; replace leading 0 with ' '
 327             sta (1,S),Y
 328             iny                     ; increment string index and compare to fLen
 329             cmp.y _fLenOff,X
 330             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
 332 _iwrite_Exit
 333             psh.w #0                ; NULL argument
 334             lda _fLenOff,X          ; push field width specifier
 335             pha.w
 336             csr _swrite             ; write integer value string using _swrite()
 337             adj #6                  ; remove parameters to _swrite() from stack
 339             txs.w                   ; deallocate stack variables
 340             plx.w                   ; restore previous base pointer
 341             rts
 343             .endp _iwrite
 345 	.dat
 347 S_010 .str "] = "
 348 S_009 .str "Fib["
 349 _bss_start .byt 0
 350 fn1_002 .wrd 0
 351 fn2_003 .wrd 0
 352 tmp_004 .wrd 0
 353 i_005 .wrd 0
 354 _bss_end .byt 0
 355 _stk .byt 0[1023]
 356 _stk_top .byt -1
 358 	.end
