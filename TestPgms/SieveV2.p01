   2 	.stk 1024
   3 	.cod 512
   4 STATIC_LINK .equ +5
   5 RETURN_VALUE .equ -3
   6 HIGH_RETURN_VALUE .equ -1
   7 _start
   8 	tsx.w		; Preserve original stack pointer
   9 	lds.w #_stk_top	; Initialize program stack pointer
  17 	jmp _pc65_main
  27 _pc65_main .sub
  28 	phx.w
  29 	tsx.w
  31 	lda.w #1000
  32 	pha.w
  33 	lda #2
  34 	pha.w
  35 	jsr _idiv
  36 	adj #4
  37 	sta.w limit_005
  39 	psh.w #sieve_002
  40 	lda #1
  41 	dec.w a
  42 	asl.w a
  43 	clc
  44 	adc.w 1,S
  45 	sta.w 1,S
  46 	lda #0
  47 	pli.s
  48 	sta.w 0,I++
  54 	lda #1
  55 	sta.w prime_006
  58 L_008
  60 	lda.w prime_006
  61 	pha.w
  62 	lda #1
  63 	clc
  64 	adc.w 1,S
  65 	adj #2
  66 	sta.w prime_006
  68 L_010
  69 	psh.w #sieve_002
  70 	lda.w prime_006
  71 	dec.w a
  72 	asl.w a
  73 	clc
  74 	adc.w 1,S
  75 	sta.w 1,S
  76 	pli.s
  77 	lda.w 0,I++
  78 	eor #1
  79 	cmp.w #1
  80 	beq L_011
  81 	jmp L_012
  82 L_011
  84 	lda.w prime_006
  85 	pha.w
  86 	lda #1
  87 	clc
  88 	adc.w 1,S
  89 	adj #2
  90 	sta.w prime_006
  91 	jmp L_010
  92 L_012
  95 	lda.w prime_006
  96 	pha.w
  97 	lda #2
  98 	pha.w
  99 	jsr _imul
 100 	adj #4
 101 	sta.w factor_007
 104 L_013
 105 	lda.w factor_007
 106 	pha.w
 107 	lda.w #1000
 108 	xma.w 1,S
 109 	cmp.w 1,S
 110 	adj #2
 111 	php
 112 	lda #1
 113 	plp
 114 	ble L_016
 115 	lda #0
 116 L_016
 117 	cmp.w #1
 118 	beq L_014
 119 	jmp L_015
 120 L_014
 122 	psh.w #sieve_002
 123 	lda.w factor_007
 124 	dec.w a
 125 	asl.w a
 126 	clc
 127 	adc.w 1,S
 128 	sta.w 1,S
 129 	lda #0
 130 	pli.s
 131 	sta.w 0,I++
 133 	lda.w factor_007
 134 	pha.w
 135 	lda.w prime_006
 136 	clc
 137 	adc.w 1,S
 138 	adj #2
 139 	sta.w factor_007
 142 	jmp L_013
 143 L_015
 144 	lda.w prime_006
 145 	pha.w
 146 	lda.w limit_005
 147 	xma.w 1,S
 148 	cmp.w 1,S
 149 	adj #2
 150 	php
 151 	lda #1
 152 	plp
 153 	bgt L_017
 154 	lda #0
 155 L_017
 156 	cmp.w #1
 157 	beq L_009
 158 	jmp L_008
 159 L_009
 162 	psh.w #S_018
 163 	psh.w #0
 164 	psh.w #21
 165 	jsr _swrite
 166 	adj #6
 167 	jsr _writeln
 169 	jsr _writeln
 172 	lda #1
 173 	sta.w i_003
 175 L_019
 177 	lda #0
 178 	sta.w j_004
 179 L_021
 180 	lda #19
 181 	cmp.w j_004
 182 	bge L_022
 183 	jmp L_023
 184 L_022
 186 	lda.w i_003
 187 	pha.w
 188 	lda.w j_004
 189 	clc
 190 	adc.w 1,S
 191 	adj #2
 192 	sta.w prime_006
 194 	psh.w #sieve_002
 195 	lda.w prime_006
 196 	dec.w a
 197 	asl.w a
 198 	clc
 199 	adc.w 1,S
 200 	sta.w 1,S
 201 	pli.s
 202 	lda.w 0,I++
 203 	cmp.w #1
 204 	beq L_024
 205 	jmp L_025
 206 L_024
 208 	lda.w prime_006
 209 	pha.w
 210 	lda #3
 211 	pha.w
 212 	jsr _iwrite
 213 	adj #4
 215 	jmp L_026
 216 L_025
 218 	psh.w #S_027
 219 	psh.w #0
 220 	psh.w #3
 221 	jsr _swrite
 222 	adj #6
 223 L_026
 225 	inc.w j_004
 226 	jmp L_021
 227 L_023
 228 	dec.w j_004
 230 	jsr _writeln
 232 	lda.w i_003
 233 	pha.w
 234 	lda #20
 236 	clc
 237 	adc.w 1,S
 238 	adj #2
 239 	sta.w i_003
 240 	lda.w i_003
 241 	pha.w
 243 	lda.w #1000
 244 	xma.w 1,S
 245 	cmp.w 1,S
 246 	adj #2
 247 	php
 248 	lda #1
 249 	plp
 250 	bgt L_028
 251 	lda #0
 252 L_028
 253 	cmp.w #1
 254 	beq L_020
 255 	jmp L_019
 256 L_020
 257 	plx.w
 258 	rts
 259 	.end _pc65_main
 264             .cod
 266 _Q          .equ    5
 267 _D          .equ    3
 269 _idiv       .proc
 270             lda #0          ; clear remainder (A)
 271             dup a           ; push
 272             lda.w _Q,S      ; load dividend (Q)
 273             ldy #16         ; bit counter
 275 _idiv_Lp
 276             clc
 277             asl.w a         ; shift AQ left
 278             swp a
 279             rol.w a
 281             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
 283 _idiv_Minus
 284             sec
 285             sbc.w _D,S      ; subtract divisor (D)
 287             bra _idiv_Next
 289 _idiv_Plus
 290             clc
 291             adc.w _D,S      ; add divisor (D)
 293 _idiv_Next
 294             swp a           ; restore order of Acc stack {Q, A, -}
 295             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
 296             inc.w a
 298 _idiv_Dec
 299             dey             ; loop until loop counter == 0
 300             bne _idiv_Lp
 302 _idiv_Exit
 303             swp a           ; Test remainder
 304             ora.w #0
 305             bpl _idiv_Finish
 306             clc
 307             adc.w 3,S
 308 _idiv_Finish
 309             swp a
 311             rts
 313             .endp _idiv
 318             .cod
 320 _M          .equ    5
 321 _R          .equ    3
 323 _imul       .proc
 324             ldy #16             ; y = bit count
 325             lda #0              ; A = { 0,  x,  x} - clear product
 326             dup a               ; A = { 0,  0,  x}
 327             dup a               ; A = { 0,  0,  0}
 328             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
 329             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
 330             ora.w #0            ; set N flag if msb ATOS == 1
 331             clc                 ; initialize Booth recoding bit
 332             rot a               ; A = {PH, PL, `R}
 334             bra _imul_TstB
 336 _imul_Lp
 337             asl.w a             ; A = {`R << 1, PH, PL}
 338             rot a               ; A = {PH, PL, `R}
 339 _imul_TstB
 340             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
 342 _imul_AddShft
 343             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
 344 _imul_AddM
 345             clc
 346             adc.w _M,S          ; PH += M
 347             bra _imul_ShftP
 349 _imul_SubShft
 350             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
 351 _imul_SubM
 352             sec
 353             sbc.w _M,S          ; PH -= M
 355 _imul_ShftP
 356             asr.w a             ; A = {PH >> 1, PL, `R}
 357             rot a               ; A = {PL, `R, PH}
 358             ror.w a             ; A = {PL >> 2, `R, PH}
 359             rot a               ; A = {`R, PH, PL}
 361 _imul_Dec
 362             dey
 363             bne _imul_Lp
 365 _imul_Exit
 366             rot a               ; A = {PH, PL, `R}
 367             swp a               ; A = {PL, PH, `R}
 369             rts
 371             .endp _imul
 376             .cod
 378 _newLine    .equ    0x0A
 379 _putChar    .equ    0xF001
 381 _writeln    .proc
 382             lda #_newLine
 383             sta _putChar
 385             rts
 387             .endp _writeln
 391             .cod
 393 _sPtrOff    .equ    7
 394 _sLenOff    .equ    3
 396 _swrite     .proc
 397             ldy.w _sLenOff,S        ; load string length
 398             lda.w _sPtrOff,S        ; load string pointer
 399             tai                     ; transfer sptr to IP
 401 _swrite_Lp
 402             lda 0,I++               ; load char from strig
 403             sta _putChar            ; write char to output
 405             dey.w                   ; loop while string length <> 0
 406             bne _swrite_Lp
 408             rts
 410             .endp _swrite
 414             .cod
 416 _iValOff    .equ    7
 417 _fLenOff    .equ    5
 418 _iCntOff    .equ    -1
 420 _iwrite     .proc
 421             phx.w                   ; save current base pointer
 422             tsx.w                   ; assign new base pointer
 424             lda _fLenOff,X          ; load field width specifier
 425             cmp #5                  ; compare against max integer digit count
 426             ble _iwrite_SetCnt
 427             lda #5
 429 _iwrite_SetCnt
 430             pha.w                   ; set iteration count to fld width
 431             lda.w _iValOff,X        ; load a with integer value
 433 _iwrite_Lp
 434             pha.w                   ; push dividend argument to _idiv
 435             psh.w #10               ; push divisor argument to _idiv
 436             csr _idiv               ; determine the remainder,
 437             adj #4                  ; remove arguments passed to _idiv from stk
 438             swp a                   ; put the remainder into ATOS
 440             clc                     ; convert remainder into ASCII character
 441             adc #48
 442             pha                     ; push LS digit of integer onto stack
 444             rot a                   ; rotate quotient into ATOS position
 446             dec.w _iCntOff,X        ; decrement digit iteration count
 447             bne _iwrite_Lp
 449             dup a                   ; save integer part of the conversion
 451 _iwrite_Fill
 452             lda _fLenOff,X          ; load field width specifier
 453             cmp #5                  ; compare against max integer digit count
 454             ble _iwrite_GenPtr
 455             sec                     ; subtract max integer length from fld len
 456             sbc #5
 457             tay                     ; set difference as loop counter
 458             lda #48                 ; fill remaining field with '0'
 460 _iwrite_Fill_Lp                     ; increase string on stack with fill data
 461             pha
 462             dey
 463             bne _iwrite_Fill_Lp
 465 _iwrite_GenPtr
 466             tsa.w                   ; transfer current stk pointer to A
 467             inc.w a                 ; remove stack pointer write bias
 468             pha.w                   ; push string pointer to stack
 470             rot a                   ; restore integer part of the conversion
 472             cmp.w #0                ; test for 0. If not 0, int > 10^fld
 473             beq _iwrite_Sup0
 474             ldy #0
 475 _iwrite_ErrLp
 476             lda #0x2A               ; fill integer field with '*'
 477             sta (1,S),Y
 478             iny
 479             cmp.y _fLenOff,X
 480             bne _iwrite_ErrLp
 481             bra _iwrite_Exit
 483 _iwrite_Sup0
 484             ldy #0                  ; initialize string index
 485 _iwrite_Sup0_Lp
 486             lda (1,S),Y
 487             cmp #48                 ; if leading position == 0, replace with ' '
 488             bne _iwrite_Exit        ; exit loop on first non-0 digit
 489             lda #32                 ; replace leading 0 with ' '
 490             sta (1,S),Y
 491             iny                     ; increment string index and compare to fLen
 492             cmp.y _fLenOff,X
 493             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
 495 _iwrite_Exit
 496             psh.w #0                ; NULL argument
 497             lda _fLenOff,X          ; push field width specifier
 498             pha.w
 499             csr _swrite             ; write integer value string using _swrite()
 500             adj #6                  ; remove parameters to _swrite() from stack
 502             txs.w                   ; deallocate stack variables
 503             plx.w                   ; restore previous base pointer
 504             rts
 506             .endp _iwrite
 508 	.dat
 510 S_027 .str "   "
 511 S_018 .str "Sieve of Eratosthenes"
 512 _bss_start .byt 0
 513 sieve_002 .wrd 1[1000]
 514 i_003 .wrd 0
 515 j_004 .wrd 0
 516 limit_005 .wrd 0
 517 prime_006 .wrd 0
 518 factor_007 .wrd 0
 519 _bss_end .byt 0
 520 _stk .byt 0[1023]
 521 _stk_top .byt -1
 523 	.end
