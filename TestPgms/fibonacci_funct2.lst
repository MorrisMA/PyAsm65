(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA2F307    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9CEE03      ; 	stz _bss_start
(  11) 0209 ABA2EE03    ; 	ldx.w #_bss_start
(  12) 020D ABA0EF03    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9F307    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE9EE03    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4C8D02      ; 	jmp _pc65_main
(  35) 021F ABDA        ; 	phx.w
(  36) 0221 ABBA        ; 	tsx.w
(  37) 0223 C2FC        ; 	adj #-4
(  38) 0225 C2F8        ; 	adj #-8
(  40) 0227 A901        ; 	lda #1
(  41) 0229 AB95F7      ; 	sta.w fn1_008,X
(  44) 022C AB74F5      ; 	stz.w fn2_009,X
(  47) 022F ABB507      ; 	lda.w n_005,X
(  51) 0232 ABC90100    ; 	cmp.w #1
(  53) 0236 AB7004      ; 	blt L_012-2
(  54) 0239 A900        ; 	lda #0
(  55) 023B 8002        ; 	bra L_012
(  57) 023D A901        ; 	lda #1
(  60) 023F D003        ; 	bne L_010
(  61) 0241 4C4D02      ; 	jmp L_011
(  65) 0244 ABB5F5      ; 	lda.w fn2_009,X
(  66) 0247 AB95FD      ; 	sta.w RETURN_VALUE,X
(  67) 024A 4C8502      ; 	jmp L_013
(  70) 024D A901        ; 	lda #1
(  71) 024F AB95FB      ; 	sta.w i_006,X
(  75) 0252 ABB5F7      ; 	lda.w fn1_008,X
(  78) 0255 18          ; 	clc
(  79) 0256 AB75F5      ; 	adc.w fn2_009,X
(  81) 0259 AB95F9      ; 	sta.w tmp_007,X
(  83) 025C ABB5F7      ; 	lda.w fn1_008,X
(  84) 025F AB95F5      ; 	sta.w fn2_009,X
(  86) 0262 ABB5F9      ; 	lda.w tmp_007,X
(  87) 0265 AB95F7      ; 	sta.w fn1_008,X
(  97) 0268 ABF6FB      ; 	inc.w i_006,X
(  98) 026B ABB5FB      ; 	lda.w i_006,X
( 102) 026E ABD507      ; 	cmp.w n_005,X
( 104) 0271 AB5004      ; 	bge L_016-2
( 105) 0274 A900        ; 	lda #0
( 106) 0276 8002        ; 	bra L_016
( 108) 0278 A901        ; 	lda #1
( 111) 027A D003        ; 	bne L_015
( 112) 027C 4C5202      ; 	jmp L_014
( 117) 027F ABB5F7      ; 	lda.w fn1_008,X
( 118) 0282 AB95FD      ; 	sta.w RETURN_VALUE,X
( 121) 0285 ABB5FD      ; 	lda.w RETURN_VALUE,X
( 122) 0288 AB9A        ; 	txs.w
( 123) 028A ABFA        ; 	plx.w
( 124) 028C 60          ; 	rts
( 129) 028D ABDA        ; 	phx.w
( 130) 028F ABBA        ; 	tsx.w
( 137) 0291 A917        ; 	lda #23
( 138) 0293 AB8DEF03    ; 	sta.w i_002
( 140) 0297 ABADEF03    ; 	lda.w i_002
( 141) 029B AB48        ; 	pha.w
( 142) 029D ABDA        ; 	phx.w
( 143) 029F 201F02      ; 	jsr fib_004
( 144) 02A2 C204        ; 	adj #4
( 145) 02A4 AB8DF103    ; 	sta.w j_003
( 147) 02A8 ABE2EA03    ; 	psh.w #S_017
( 148) 02AC ABE20000    ; 	psh.w #0
( 149) 02B0 ABE20400    ; 	psh.w #4
( 150) 02B4 205503      ; 	jsr _swrite
( 151) 02B7 C206        ; 	adj #6
( 153) 02B9 ABADEF03    ; 	lda.w i_002
( 154) 02BD AB48        ; 	pha.w
( 156) 02BF ABE20200    ; 	psh.w #2
( 157) 02C3 206703      ; 	jsr _iwrite
( 158) 02C6 C204        ; 	adj #4
( 160) 02C8 ABE2E603    ; 	psh.w #S_018
( 161) 02CC ABE20000    ; 	psh.w #0
( 162) 02D0 ABE20400    ; 	psh.w #4
( 163) 02D4 205503      ; 	jsr _swrite
( 164) 02D7 C206        ; 	adj #6
( 166) 02D9 ABADF103    ; 	lda.w j_003
( 167) 02DD AB48        ; 	pha.w
( 169) 02DF ABE20500    ; 	psh.w #5
( 170) 02E3 206703      ; 	jsr _iwrite
( 171) 02E6 C204        ; 	adj #4
( 174) 02E8 204F03      ; 	jsr _writeln
( 175) 02EB ABFA        ; 	plx.w
( 176) 02ED 60          ; 	rts
( 188) 02EE A900        ;             lda #0          ; clear remainder (A)
( 189) 02F0 0B          ;             dup a           ; push
( 190) 02F1 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 191) 02F4 A010        ;             ldy #16         ; bit counter
( 194) 02F6 18          ;             clc
( 195) 02F7 AB0A        ;             asl.w a         ; shift AQ left
( 196) 02F9 1B          ;             swp a
( 197) 02FA AB2A        ;             rol.w a
( 199) 02FC B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 202) 02FE 38          ;             sec
( 203) 02FF CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 205) 0302 8004        ;             bra _idiv_Next
( 208) 0304 18          ;             clc
( 209) 0305 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 212) 0308 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 213) 0309 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 214) 030B AB1A        ;             inc.w a
( 217) 030D 88          ;             dey             ; loop until loop counter == 0
( 218) 030E D0E6        ;             bne _idiv_Lp
( 221) 0310 1B          ;             swp a           ; Test remainder
( 222) 0311 AB090000    ;             ora.w #0
( 223) 0315 1004        ;             bpl _idiv_Finish
( 224) 0317 18          ;             clc
( 225) 0318 CB7503      ;             adc.w 3,S
( 227) 031B 1B          ;             swp a
( 229) 031C 60          ;             rts
( 242) 031D A010        ;             ldy #16             ; y = bit count
( 243) 031F A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 244) 0321 0B          ;             dup a               ; A = { 0,  0,  x}
( 245) 0322 0B          ;             dup a               ; A = { 0,  0,  0}
( 246) 0323 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 247) 0326 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 248) 0328 AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 249) 032C 18          ;             clc                 ; initialize Booth recoding bit
( 250) 032D 2B          ;             rot a               ; A = {PH, PL, `R}
( 252) 032E 8003        ;             bra _imul_TstB
( 255) 0330 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 256) 0332 2B          ;             rot a               ; A = {PH, PL, `R}
( 258) 0333 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 261) 0335 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 263) 0337 18          ;             clc
( 264) 0338 CB7505      ;             adc.w _M,S          ; PH += M
( 265) 033B 8006        ;             bra _imul_ShftP
( 268) 033D 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 270) 033F 38          ;             sec
( 271) 0340 CBF505      ;             sbc.w _M,S          ; PH -= M
( 274) 0343 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 275) 0345 2B          ;             rot a               ; A = {PL, `R, PH}
( 276) 0346 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 277) 0348 2B          ;             rot a               ; A = {`R, PH, PL}
( 280) 0349 88          ;             dey
( 281) 034A D0E4        ;             bne _imul_Lp
( 284) 034C 2B          ;             rot a               ; A = {PH, PL, `R}
( 285) 034D 1B          ;             swp a               ; A = {PL, PH, `R}
( 287) 034E 60          ;             rts
( 300) 034F A90A        ;             lda #_newLine
( 301) 0351 8D01F0      ;             sta _putChar
( 303) 0354 60          ;             rts
( 315) 0355 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 316) 0358 CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 317) 035B 9B0B        ;             tai                     ; transfer sptr to IP
( 320) 035D A300        ;             lda 0,I++               ; load char from strig
( 321) 035F 8D01F0      ;             sta _putChar            ; write char to output
( 323) 0362 AB88        ;             dey.w                   ; loop while string length <> 0
( 324) 0364 D0F7        ;             bne _swrite_Lp
( 326) 0366 60          ;             rts
( 339) 0367 ABDA        ;             phx.w                   ; save current base pointer
( 340) 0369 ABBA        ;             tsx.w                   ; assign new base pointer
( 342) 036B B505        ;             lda _fLenOff,X          ; load field width specifier
( 343) 036D C905        ;             cmp #5                  ; compare against max integer digit count
( 344) 036F AB3002      ;             ble _iwrite_SetCnt
( 345) 0372 A905        ;             lda #5
( 348) 0374 AB48        ;             pha.w                   ; set iteration count to fld width
( 349) 0376 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 352) 0379 AB48        ;             pha.w                   ; push dividend argument to _idiv
( 353) 037B ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 354) 037F 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 355) 0383 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 356) 0385 1B          ;             swp a                   ; put the remainder into ATOS
( 358) 0386 18          ;             clc                     ; convert remainder into ASCII character
( 359) 0387 6930        ;             adc #48
( 360) 0389 48          ;             pha                     ; push LS digit of integer onto stack
( 362) 038A 2B          ;             rot a                   ; rotate quotient into ATOS position
( 364) 038B ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 365) 038E D0E9        ;             bne _iwrite_Lp
( 367) 0390 0B          ;             dup a                   ; save integer part of the conversion
( 370) 0391 B505        ;             lda _fLenOff,X          ; load field width specifier
( 371) 0393 C905        ;             cmp #5                  ; compare against max integer digit count
( 372) 0395 AB300A      ;             ble _iwrite_GenPtr
( 373) 0398 38          ;             sec                     ; subtract max integer length from fld len
( 374) 0399 E905        ;             sbc #5
( 375) 039B A8          ;             tay                     ; set difference as loop counter
( 376) 039C A930        ;             lda #48                 ; fill remaining field with '0'
( 379) 039E 48          ;             pha
( 380) 039F 88          ;             dey
( 381) 03A0 D0FC        ;             bne _iwrite_Fill_Lp
( 384) 03A2 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 385) 03A5 AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 386) 03A7 AB48        ;             pha.w                   ; push string pointer to stack
( 388) 03A9 2B          ;             rot a                   ; restore integer part of the conversion
( 390) 03AA ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 391) 03AE F00F        ;             beq _iwrite_Sup0
( 392) 03B0 A000        ;             ldy #0
( 394) 03B2 A92A        ;             lda #0x2A               ; fill integer field with '*'
( 395) 03B4 8B9101      ;             sta (1,S),Y
( 396) 03B7 C8          ;             iny
( 397) 03B8 FBD505      ;             cmp.y _fLenOff,X
( 398) 03BB D0F5        ;             bne _iwrite_ErrLp
( 399) 03BD 8014        ;             bra _iwrite_Exit
( 402) 03BF A000        ;             ldy #0                  ; initialize string index
( 404) 03C1 8BB101      ;             lda (1,S),Y
( 405) 03C4 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 406) 03C6 D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 407) 03C8 A920        ;             lda #32                 ; replace leading 0 with ' '
( 408) 03CA 8B9101      ;             sta (1,S),Y
( 409) 03CD C8          ;             iny                     ; increment string index and compare to fLen
( 410) 03CE FBD505      ;             cmp.y _fLenOff,X
( 411) 03D1 D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 414) 03D3 ABE20000    ;             psh.w #0                ; NULL argument
( 415) 03D7 B505        ;             lda _fLenOff,X          ; push field width specifier
( 416) 03D9 AB48        ;             pha.w
( 417) 03DB 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
( 418) 03DF C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 420) 03E1 AB9A        ;             txs.w                   ; deallocate stack variables
( 421) 03E3 ABFA        ;             plx.w                   ; restore previous base pointer
( 422) 03E5 60          ;             rts
( 428) 03E6 5D203D20    ; S_018 .str "] = "
( 429) 03EA 4669625B    ; S_017 .str "Fib["
( 430) 03EE 00          ; _bss_start .byt 0
( 431) 03EF 0000        ; i_002 .wrd 0
( 432) 03F1 0000        ; j_003 .wrd 0
( 433) 03F3 00          ; _bss_end .byt 0
( 434) 03F4 00000000    ; _stk .byt 0[1023]
       03F8 0000000000000000000000000000000000000000000000000000000000000000
       0418 0000000000000000000000000000000000000000000000000000000000000000
       0438 0000000000000000000000000000000000000000000000000000000000000000
       0458 0000000000000000000000000000000000000000000000000000000000000000
       0478 0000000000000000000000000000000000000000000000000000000000000000
       0498 0000000000000000000000000000000000000000000000000000000000000000
       04B8 0000000000000000000000000000000000000000000000000000000000000000
       04D8 0000000000000000000000000000000000000000000000000000000000000000
       04F8 0000000000000000000000000000000000000000000000000000000000000000
       0518 0000000000000000000000000000000000000000000000000000000000000000
       0538 0000000000000000000000000000000000000000000000000000000000000000
       0558 0000000000000000000000000000000000000000000000000000000000000000
       0578 0000000000000000000000000000000000000000000000000000000000000000
       0598 0000000000000000000000000000000000000000000000000000000000000000
       05B8 0000000000000000000000000000000000000000000000000000000000000000
       05D8 0000000000000000000000000000000000000000000000000000000000000000
       05F8 0000000000000000000000000000000000000000000000000000000000000000
       0618 0000000000000000000000000000000000000000000000000000000000000000
       0638 0000000000000000000000000000000000000000000000000000000000000000
       0658 0000000000000000000000000000000000000000000000000000000000000000
       0678 0000000000000000000000000000000000000000000000000000000000000000
       0698 0000000000000000000000000000000000000000000000000000000000000000
       06B8 0000000000000000000000000000000000000000000000000000000000000000
       06D8 0000000000000000000000000000000000000000000000000000000000000000
       06F8 0000000000000000000000000000000000000000000000000000000000000000
       0718 0000000000000000000000000000000000000000000000000000000000000000
       0738 0000000000000000000000000000000000000000000000000000000000000000
       0758 0000000000000000000000000000000000000000000000000000000000000000
       0778 0000000000000000000000000000000000000000000000000000000000000000
       0798 0000000000000000000000000000000000000000000000000000000000000000
       07B8 0000000000000000000000000000000000000000000000000000000000000000
       07D8 000000000000000000000000000000000000000000000000000000
( 435) 07F3 FF          ; _stk_top .byt -1
