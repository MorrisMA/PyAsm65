   1    2 	DOSSEG
   2    3 	.MODEL  small
   3    4 	.STACK  1024
   4    6 	.CODE
   5    8 	PUBLIC	_pascal_main
   6    9 	INCLUDE	pasextrn.inc
   7   11 $STATIC_LINK		EQU	<WORD PTR [bp+4]>
   8   12 $RETURN_VALUE		EQU	<WORD PTR [bp-4]>
   9   13 $HIGH_RETURN_VALUE	EQU	<WORD PTR [bp-2]>
  10   24 _pascal_main	PROC
  11   26 	push	bp
  12   27 	mov		bp,sp
  13   29 $L_005:
  14   31 	call	_write_line
  15   33 	lea		ax,WORD PTR $S_007
  16   34 	push	ax
  17   35 	mov		ax,0
  18   36 	push	ax
  19   37 	mov		ax,30
  20   38 	push	ax
  21   39 	call	_write_string
  22   40 	add		sp,6
  23   42 	lea		ax,WORD PTR number_002
  24   43 	push	ax
  25   44 	call	_read_real
  26   45 	pop		bx
  27   46 	mov		WORD PTR [bx],ax
  28   47 	mov		WORD PTR [bx+2],dx
  29   50 	mov		ax,WORD PTR number_002
  30   51 	mov		dx,WORD PTR number_002+2
  31   52 	push	dx
  32   53 	push	ax
  33   54 	mov		ax,0
  34   55 	push	ax
  35   56 	call	_float_convert
  36   57 	add		sp,2
  37   58 	push	dx
  38   59 	push	ax
  39   60 	call	_float_compare
  40   61 	add		sp,8
  41   62 	cmp		ax,0
  42   63 	mov		ax,1
  43   64 	je		$L_010
  44   65 	sub		ax,ax
  45   66 $L_010:
  46   67 	cmp		ax,1
  47   68 	je		$L_008
  48   69 	jmp		$L_009
  49   70 $L_008:
  50   72 	mov		ax,WORD PTR number_002
  51   73 	mov		dx,WORD PTR number_002+2
  52   74 	push	dx
  53   75 	push	ax
  54   76 	mov		ax,12
  55   77 	push	ax
  56   78 	mov		ax,6
  57   79 	push	ax
  58   80 	call	_write_real
  59   81 	add		sp,8
  60   82 	mov		ax,WORD PTR $F_011
  61   83 	mov		dx,WORD PTR $F_011+2
  62   84 	push	dx
  63   85 	push	ax
  64   86 	mov		ax,12
  65   87 	push	ax
  66   88 	mov		ax,6
  67   89 	push	ax
  68   90 	call	_write_real
  69   91 	add		sp,8
  70   92 	call	_write_line
  71   95 	jmp		$L_012
  72   96 $L_009:
  73   97 	mov		ax,WORD PTR number_002
  74   98 	mov		dx,WORD PTR number_002+2
  75   99 	push	dx
  76  100 	push	ax
  77  101 	mov		ax,0
  78  102 	push	ax
  79  103 	call	_float_convert
  80  104 	add		sp,2
  81  105 	push	dx
  82  106 	push	ax
  83  107 	call	_float_compare
  84  108 	add		sp,8
  85  109 	cmp		ax,0
  86  110 	mov		ax,1
  87  111 	jl		$L_015
  88  112 	sub		ax,ax
  89  113 $L_015:
  90  114 	cmp		ax,1
  91  115 	je		$L_013
  92  116 	jmp		$L_014
  93  117 $L_013:
  94  119 	lea		ax,WORD PTR $S_016
  95  120 	push	ax
  96  121 	mov		ax,0
  97  122 	push	ax
  98  123 	mov		ax,22
  99  124 	push	ax
 100  125 	call	_write_string
 101  126 	add		sp,6
 102  127 	call	_write_line
 103  130 	jmp		$L_017
 104  131 $L_014:
 105  133 	mov		ax,WORD PTR number_002
 106  134 	mov		dx,WORD PTR number_002+2
 107  135 	push	dx
 108  136 	push	ax
 109  137 	call	_std_sqrt
 110  138 	add		sp,4
 111  139 	mov		WORD PTR sqroot_004,ax
 112  140 	mov		WORD PTR sqroot_004+2,dx
 113  142 	mov		ax,WORD PTR number_002
 114  143 	mov		dx,WORD PTR number_002+2
 115  144 	push	dx
 116  145 	push	ax
 117  146 	mov		ax,12
 118  147 	push	ax
 119  148 	mov		ax,6
 120  149 	push	ax
 121  150 	call	_write_real
 122  151 	add		sp,8
 123  152 	mov		ax,WORD PTR sqroot_004
 124  153 	mov		dx,WORD PTR sqroot_004+2
 125  154 	push	dx
 126  155 	push	ax
 127  156 	mov		ax,12
 128  157 	push	ax
 129  158 	mov		ax,6
 130  159 	push	ax
 131  160 	call	_write_real
 132  161 	add		sp,8
 133  162 	call	_write_line
 134  164 	call	_write_line
 135  167 	mov		ax,1
 136  168 	push	ax
 137  169 	call	_float_convert
 138  170 	add		sp,2
 139  171 	mov		WORD PTR root_003,ax
 140  172 	mov		WORD PTR root_003+2,dx
 141  174 $L_018:
 142  176 	mov		ax,WORD PTR number_002
 143  177 	mov		dx,WORD PTR number_002+2
 144  178 	push	dx
 145  179 	push	ax
 146  180 	mov		ax,WORD PTR root_003
 147  181 	mov		dx,WORD PTR root_003+2
 148  182 	push	dx
 149  183 	push	ax
 150  184 	call	_float_divide
 151  185 	add		sp,8
 152  186 	push	dx
 153  187 	push	ax
 154  188 	mov		ax,WORD PTR root_003
 155  189 	mov		dx,WORD PTR root_003+2
 156  190 	push	dx
 157  191 	push	ax
 158  192 	call	_float_add
 159  193 	add		sp,8
 160  194 	push	dx
 161  195 	push	ax
 162  196 	mov		ax,2
 163  197 	push	ax
 164  198 	call	_float_convert
 165  199 	add		sp,2
 166  200 	push	dx
 167  201 	push	ax
 168  202 	call	_float_divide
 169  203 	add		sp,8
 170  204 	mov		WORD PTR root_003,ax
 171  205 	mov		WORD PTR root_003+2,dx
 172  207 	mov		ax,WORD PTR root_003
 173  208 	mov		dx,WORD PTR root_003+2
 174  209 	push	dx
 175  210 	push	ax
 176  211 	mov		ax,24
 177  212 	push	ax
 178  213 	mov		ax,6
 179  214 	push	ax
 180  215 	call	_write_real
 181  216 	add		sp,8
 182  218 	mov		ax,100
 183  219 	push	ax
 184  220 	mov		ax,WORD PTR root_003
 185  221 	mov		dx,WORD PTR root_003+2
 186  222 	push	dx
 187  223 	push	ax
 188  224 	mov		ax,WORD PTR sqroot_004
 189  225 	mov		dx,WORD PTR sqroot_004+2
 190  226 	push	dx
 191  227 	push	ax
 192  228 	call	_float_subtract
 193  229 	add		sp,8
 194  230 	push	dx
 195  231 	push	ax
 196  232 	call	_std_abs
 197  233 	add		sp,4
 198  234 	push	dx
 199  235 	push	ax
 200  236 	pop		ax
 201  237 	pop		dx
 202  238 	pop		bx
 203  239 	push	dx
 204  240 	push	ax
 205  241 	push	bx
 206  242 	call	_float_convert
 207  243 	add		sp,2
 208  244 	pop		bx
 209  245 	pop		cx
 210  246 	push	dx
 211  247 	push	ax
 212  248 	push	cx
 213  249 	push	bx
 214  250 	call	_float_multiply
 215  251 	add		sp,8
 216  252 	push	dx
 217  253 	push	ax
 218  254 	mov		ax,WORD PTR sqroot_004
 219  255 	mov		dx,WORD PTR sqroot_004+2
 220  256 	push	dx
 221  257 	push	ax
 222  258 	call	_float_divide
 223  259 	add		sp,8
 224  260 	push	dx
 225  261 	push	ax
 226  262 	mov		ax,12
 227  263 	push	ax
 228  264 	mov		ax,2
 229  265 	push	ax
 230  266 	call	_write_real
 231  267 	add		sp,8
 232  269 	mov		ax,'%'
 233  270 	push	ax
 234  271 	mov		ax,0
 235  272 	push	ax
 236  273 	call	_write_char
 237  274 	add		sp,4
 238  276 	call	_write_line
 239  277 	mov		ax,WORD PTR number_002
 240  278 	mov		dx,WORD PTR number_002+2
 241  279 	push	dx
 242  280 	push	ax
 243  281 	mov		ax,WORD PTR root_003
 244  282 	mov		dx,WORD PTR root_003+2
 245  283 	push	dx
 246  284 	push	ax
 247  285 	push	dx
 248  286 	push	ax
 249  287 	call	_float_multiply
 250  288 	add		sp,8
 251  289 	push	dx
 252  290 	push	ax
 253  291 	call	_float_divide
 254  292 	add		sp,8
 255  293 	push	dx
 256  294 	push	ax
 257  295 	mov		ax,1
 258  296 	push	ax
 259  297 	call	_float_convert
 260  298 	add		sp,2
 261  299 	push	dx
 262  300 	push	ax
 263  301 	call	_float_subtract
 264  302 	add		sp,8
 265  303 	push	dx
 266  304 	push	ax
 267  305 	call	_std_abs
 268  306 	add		sp,4
 269  307 	push	dx
 270  308 	push	ax
 271  309 	mov		ax,WORD PTR $F_020
 272  310 	mov		dx,WORD PTR $F_020+2
 273  311 	push	dx
 274  312 	push	ax
 275  313 	call	_float_compare
 276  314 	add		sp,8
 277  315 	cmp		ax,0
 278  316 	mov		ax,1
 279  317 	jl		$L_021
 280  318 	sub		ax,ax
 281  319 $L_021:
 282  320 	cmp		ax,1
 283  321 	je		$L_019
 284  322 	jmp		$L_018
 285  323 $L_019:
 286  326 $L_017:
 287  327 $L_012:
 288  328 	mov		ax,WORD PTR number_002
 289  329 	mov		dx,WORD PTR number_002+2
 290  330 	push	dx
 291  331 	push	ax
 292  332 	mov		ax,0
 293  334 	push	ax
 294  335 	call	_float_convert
 295  336 	add		sp,2
 296  337 	push	dx
 297  338 	push	ax
 298  339 	call	_float_compare
 299  340 	add		sp,8
 300  341 	cmp		ax,0
 301  342 	mov		ax,1
 302  343 	je		$L_022
 303  344 	sub		ax,ax
 304  345 $L_022:
 305  346 	cmp		ax,1
 306  347 	je		$L_006
 307  348 	jmp		$L_005
 308  349 $L_006:
 309  351 	pop		bp
 310  352 	ret
 311  354 _pascal_main	ENDP
 312  356 	.DATA
 313  358 number_002	DD	0.0
 314  359 root_003	DD	0.0
 315  360 sqroot_004	DD	0.0
 316  361 $F_020	DD	1.000000e-006
 317  362 $F_011	DD	0.000000e+000
 318  363 $S_016	DB	"*** ERROR:  number < 0"
 319  364 $S_007	DB	"Enter new number (0 to quit): "
 320  366 	END
