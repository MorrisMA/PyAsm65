   2 	.stk 1024
   3 	.cod 512
   4 STATIC_LINK .equ +5
   5 RETURN_VALUE .equ -3
   6 HIGH_RETURN_VALUE .equ -1
   7 _start
   8 	tsx.w		; Preserve original stack pointer
   9 	lds.w #_stk_top	; Initialize program stack pointer
  10 	stz _bss_start
  11 	ldx.w #_bss_start
  12 	ldy.w #_bss_start+1
  13 	lda.w #_stk_top
  14 	sec
  15 	sbc.w #_bss_start
  16 	mov #10
  17 	jmp _pc65_main
  26 _pc65_main .sub
  27 	phx.w
  28 	tsx.w
  30 L_005
  32 	jsr _writeln
  34 	psh.w #S_007
  35 	psh.w #0
  36 	psh.w #30
  37 	jsr _swrite
  38 	adj #6
  40 	psh.w #number_002
  41 	jsr _fread
  42 	pli.s
  43 	sta.w 0,I++
  44 	swp a
  45 	sta.w 0,I++
  48 	lda.w number_002+2	;emit_load_value
  49 	swp a
  50 	lda.w number_002
  51 	swp a
  52 	pha.w
  53 	swp a
  54 	pha.w
  55 	lda #0
  56 	pha.w
  57 	jsr _fconv
  58 	adj #2
  59 	swp a
  60 	pha.w
  61 	swp a
  62 	pha.w
  63 	jsr _fcmp
  64 	adj #8
  65 	cmp.w #0
  66 	php
  67 	lda #1
  68 	plp
  69 	beq L_010
  70 	lda #0
  71 L_010
  72 	cmp.w #1
  73 	beq L_008
  74 	jmp L_009
  75 L_008
  77 	lda.w number_002+2	;emit_load_value
  78 	swp a
  79 	lda.w number_002
  80 	swp a
  81 	pha.w
  82 	swp a
  83 	pha.w
  84 	lda #12
  85 	pha.w
  86 	lda #6
  87 	pha.w
  88 	jsr _fwrite
  89 	adj #8
  90 	lda.w F_011+2	;float_literal
  91 	swp a
  92 	lda.w F_011
  93 	swp a
  94 	pha.w
  95 	swp a
  96 	pha.w
  97 	lda #12
  98 	pha.w
  99 	lda #6
 100 	pha.w
 101 	jsr _fwrite
 102 	adj #8
 103 	jsr _writeln
 106 	jmp L_012
 107 L_009
 108 	lda.w number_002+2	;emit_load_value
 109 	swp a
 110 	lda.w number_002
 111 	swp a
 112 	pha.w
 113 	swp a
 114 	pha.w
 115 	lda #0
 116 	pha.w
 117 	jsr _fconv
 118 	adj #2
 119 	swp a
 120 	pha.w
 121 	swp a
 122 	pha.w
 123 	jsr _fcmp
 124 	adj #8
 125 	cmp.w #0
 126 	php
 127 	lda #1
 128 	plp
 129 	blt L_015
 130 	lda #0
 131 L_015
 132 	cmp.w #1
 133 	beq L_013
 134 	jmp L_014
 135 L_013
 137 	psh.w #S_016
 138 	psh.w #0
 139 	psh.w #22
 140 	jsr _swrite
 141 	adj #6
 142 	jsr _writeln
 145 	jmp L_017
 146 L_014
 148 	lda.w number_002+2	;emit_load_value
 149 	swp a
 150 	lda.w number_002
 151 	swp a
 152 	pha.w
 153 	swp a
 154 	pha.w
 155 	jsr _fsqrt
 156 	adj #4
 157 	sta.w sqroot_004
 158 	swp a
 159 	sta.w sqroot_004+2	;assgnment_statement
 161 	lda.w number_002+2	;emit_load_value
 162 	swp a
 163 	lda.w number_002
 164 	swp a
 165 	pha.w
 166 	swp a
 167 	pha.w
 168 	lda #12
 169 	pha.w
 170 	lda #6
 171 	pha.w
 172 	jsr _fwrite
 173 	adj #8
 174 	lda.w sqroot_004+2	;emit_load_value
 175 	swp a
 176 	lda.w sqroot_004
 177 	swp a
 178 	pha.w
 179 	swp a
 180 	pha.w
 181 	lda #12
 182 	pha.w
 183 	lda #6
 184 	pha.w
 185 	jsr _fwrite
 186 	adj #8
 187 	jsr _writeln
 189 	jsr _writeln
 192 	lda #1
 193 	pha.w
 194 	jsr _fconv
 195 	adj #2
 196 	sta.w root_003
 197 	swp a
 198 	sta.w root_003+2	;assgnment_statement
 200 L_018
 202 	lda.w number_002+2	;emit_load_value
 203 	swp a
 204 	lda.w number_002
 205 	swp a
 206 	pha.w
 207 	swp a
 208 	pha.w
 209 	lda.w root_003+2	;emit_load_value
 210 	swp a
 211 	lda.w root_003
 212 	swp a
 213 	pha.w
 214 	swp a
 215 	pha.w
 216 	jsr _fdiv
 217 	adj #8
 218 	swp a
 219 	pha.w
 220 	swp a
 221 	pha.w
 222 	lda.w root_003+2	;emit_load_value
 223 	swp a
 224 	lda.w root_003
 225 	swp a
 226 	pha.w
 227 	swp a
 228 	pha.w
 229 	jsr _fadd
 230 	adj #8
 231 	swp a
 232 	pha.w
 233 	swp a
 234 	pha.w
 235 	lda #2
 236 	pha.w
 237 	jsr _fconv
 238 	adj #2
 239 	swp a
 240 	pha.w
 241 	swp a
 242 	pha.w
 243 	jsr _fdiv
 244 	adj #8
 245 	sta.w root_003
 246 	swp a
 247 	sta.w root_003+2	;assgnment_statement
 249 	lda.w root_003+2	;emit_load_value
 250 	swp a
 251 	lda.w root_003
 252 	swp a
 253 	pha.w
 254 	swp a
 255 	pha.w
 256 	lda #24
 257 	pha.w
 258 	lda #6
 259 	pha.w
 260 	jsr _fwrite
 261 	adj #8
 263 	lda #100
 264 	pha.w
 265 	lda.w root_003+2	;emit_load_value
 266 	swp a
 267 	lda.w root_003
 268 	swp a
 269 	pha.w
 270 	swp a
 271 	pha.w
 272 	lda.w sqroot_004+2	;emit_load_value
 273 	swp a
 274 	lda.w sqroot_004
 275 	swp a
 276 	pha.w
 277 	swp a
 278 	pha.w
 279 	jsr _fsub
 280 	adj #8
 281 	swp a
 282 	pha.w
 283 	swp a
 284 	pha.w
 285 	jsr _fabs
 286 	adj #4
 287 	swp a
 288 	pha.w
 289 	swp a
 290 	pha.w
 291 	pla.w
 292 	swp a
 293 	pla.w
 294 	ply.w
 295 	pha.w
 296 	swp a
 297 	pha.w
 298 	phy.w
 299 	jsr _fconv
 300 	adj #2
 301 	ply.w
 302 	swp y
 303 	ply.w
 304 	swp a
 305 	pha.w
 306 	swp a
 307 	pha.w
 308 	phy.w
 309 	swp y
 310 	phy.w
 311 	jsr _fmul
 312 	adj #8
 313 	swp a
 314 	pha.w
 315 	swp a
 316 	pha.w
 317 	lda.w sqroot_004+2	;emit_load_value
 318 	swp a
 319 	lda.w sqroot_004
 320 	swp a
 321 	pha.w
 322 	swp a
 323 	pha.w
 324 	jsr _fdiv
 325 	adj #8
 326 	swp a
 327 	pha.w
 328 	swp a
 329 	pha.w
 330 	lda #12
 331 	pha.w
 332 	lda #2
 333 	pha.w
 334 	jsr _fwrite
 335 	adj #8
 337 	lda #37
 338 	pha.w
 339 	psh.w #0
 340 	jsr _cwrite
 341 	adj #4
 343 	jsr _writeln
 344 	lda.w number_002+2	;emit_load_value
 345 	swp a
 346 	lda.w number_002
 347 	swp a
 348 	pha.w
 349 	swp a
 350 	pha.w
 351 	lda.w root_003+2	;emit_load_value
 352 	swp a
 353 	lda.w root_003
 354 	swp a
 355 	pha.w
 356 	swp a
 357 	pha.w
 358 	swp a
 359 	pha.w
 360 	swp a
 361 	pha.w
 362 	jsr _fmul
 363 	adj #8
 364 	swp a
 365 	pha.w
 366 	swp a
 367 	pha.w
 368 	jsr _fdiv
 369 	adj #8
 370 	swp a
 371 	pha.w
 372 	swp a
 373 	pha.w
 374 	lda #1
 375 	pha.w
 376 	jsr _fconv
 377 	adj #2
 378 	swp a
 379 	pha.w
 380 	swp a
 381 	pha.w
 382 	jsr _fsub
 383 	adj #8
 384 	swp a
 385 	pha.w
 386 	swp a
 387 	pha.w
 388 	jsr _fabs
 389 	adj #4
 390 	swp a
 391 	pha.w
 392 	swp a
 393 	pha.w
 394 	lda.w F_020+2	;float_literal
 395 	swp a
 396 	lda.w F_020
 397 	swp a
 398 	pha.w
 399 	swp a
 400 	pha.w
 401 	jsr _fcmp
 402 	adj #8
 403 	cmp.w #0
 404 	php
 405 	lda #1
 406 	plp
 407 	blt L_021
 408 	lda #0
 409 L_021
 410 	cmp.w #1
 411 	beq L_019
 412 	jmp L_018
 413 L_019
 416 L_017
 417 L_012
 418 	lda.w number_002+2	;emit_load_value
 419 	swp a
 420 	lda.w number_002
 421 	swp a
 422 	pha.w
 423 	swp a
 424 	pha.w
 425 	lda #0
 427 	pha.w
 428 	jsr _fconv
 429 	adj #2
 430 	swp a
 431 	pha.w
 432 	swp a
 433 	pha.w
 434 	jsr _fcmp
 435 	adj #8
 436 	cmp.w #0
 437 	php
 438 	lda #1
 439 	plp
 440 	beq L_022
 441 	lda #0
 442 L_022
 443 	cmp.w #1
 444 	beq L_006
 445 	jmp L_005
 446 L_006
 447 	plx.w
 448 	rts
 449 	.end _pc65_main
 454             .cod
 456 _Q          .equ    5
 457 _D          .equ    3
 459 _idiv       .proc
 460             lda #0          ; clear remainder (A)
 461             dup a           ; push
 462             lda.w _Q,S      ; load dividend (Q)
 463             ldy #16         ; bit counter
 465 _idiv_Lp
 466             clc
 467             asl.w a         ; shift AQ left
 468             swp a
 469             rol.w a
 471             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
 473 _idiv_Minus
 474             sec
 475             sbc.w _D,S      ; subtract divisor (D)
 477             bra _idiv_Next
 479 _idiv_Plus
 480             clc
 481             adc.w _D,S      ; add divisor (D)
 483 _idiv_Next
 484             swp a           ; restore order of Acc stack {Q, A, -}
 485             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
 486             inc.w a
 488 _idiv_Dec
 489             dey             ; loop until loop counter == 0
 490             bne _idiv_Lp
 492 _idiv_Exit
 493             swp a           ; Test remainder
 494             ora.w #0
 495             bpl _idiv_Finish
 496             clc
 497             adc.w 3,S
 498 _idiv_Finish
 499             swp a
 501             rts
 503             .endp _idiv
 508             .cod
 510 _M          .equ    5
 511 _R          .equ    3
 513 _imul       .proc
 514             ldy #16             ; y = bit count
 515             lda #0              ; A = { 0,  x,  x} - clear product
 516             dup a               ; A = { 0,  0,  x}
 517             dup a               ; A = { 0,  0,  0}
 518             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
 519             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
 520             ora.w #0            ; set N flag if msb ATOS == 1
 521             clc                 ; initialize Booth recoding bit
 522             rot a               ; A = {PH, PL, `R}
 524             bra _imul_TstB
 526 _imul_Lp
 527             asl.w a             ; A = {`R << 1, PH, PL}
 528             rot a               ; A = {PH, PL, `R}
 529 _imul_TstB
 530             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
 532 _imul_AddShft
 533             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
 534 _imul_AddM
 535             clc
 536             adc.w _M,S          ; PH += M
 537             bra _imul_ShftP
 539 _imul_SubShft
 540             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
 541 _imul_SubM
 542             sec
 543             sbc.w _M,S          ; PH -= M
 545 _imul_ShftP
 546             asr.w a             ; A = {PH >> 1, PL, `R}
 547             rot a               ; A = {PL, `R, PH}
 548             ror.w a             ; A = {PL >> 2, `R, PH}
 549             rot a               ; A = {`R, PH, PL}
 551 _imul_Dec
 552             dey
 553             bne _imul_Lp
 555 _imul_Exit
 556             rot a               ; A = {PH, PL, `R}
 557             swp a               ; A = {PL, PH, `R}
 559             rts
 561             .endp _imul
 566             .cod
 568 _newLine    .equ    0x0A
 569 _putChar    .equ    0xF001
 571 _writeln    .proc
 572             lda #_newLine
 573             sta _putChar
 575             rts
 577             .endp _writeln
 581             .cod
 583 _sPtrOff    .equ    7
 584 _sLenOff    .equ    3
 586 _swrite     .proc
 587             ldy.w _sLenOff,S        ; load string length
 588             lda.w _sPtrOff,S        ; load string pointer
 589             tai                     ; transfer sptr to IP
 591 _swrite_Lp
 592             lda 0,I++               ; load char from strig
 593             sta _putChar            ; write char to output
 595             dey.w                   ; loop while string length <> 0
 596             bne _swrite_Lp
 598             rts
 600             .endp _swrite
 604             .cod
 606 _iValOff    .equ    7
 607 _fLenOff    .equ    5
 608 _iCntOff    .equ    -1
 610 _iwrite     .proc
 611             phx.w                   ; save current base pointer
 612             tsx.w                   ; assign new base pointer
 614             lda _fLenOff,X          ; load field width specifier
 615             cmp #5                  ; compare against max integer digit count
 616             ble _iwrite_SetCnt
 617             lda #5
 619 _iwrite_SetCnt
 620             pha.w                   ; set iteration count to fld width
 621             lda.w _iValOff,X        ; load a with integer value
 623 _iwrite_Lp
 624             pha.w                   ; push dividend argument to _idiv
 625             psh.w #10               ; push divisor argument to _idiv
 626             csr _idiv               ; determine the remainder,
 627             adj #4                  ; remove arguments passed to _idiv from stk
 628             swp a                   ; put the remainder into ATOS
 630             clc                     ; convert remainder into ASCII character
 631             adc #48
 632             pha                     ; push LS digit of integer onto stack
 634             rot a                   ; rotate quotient into ATOS position
 636             dec.w _iCntOff,X        ; decrement digit iteration count
 637             bne _iwrite_Lp
 639             dup a                   ; save integer part of the conversion
 641 _iwrite_Fill
 642             lda _fLenOff,X          ; load field width specifier
 643             cmp #5                  ; compare against max integer digit count
 644             ble _iwrite_GenPtr
 645             sec                     ; subtract max integer length from fld len
 646             sbc #5
 647             tay                     ; set difference as loop counter
 648             lda #48                 ; fill remaining field with '0'
 650 _iwrite_Fill_Lp                     ; increase string on stack with fill data
 651             pha
 652             dey
 653             bne _iwrite_Fill_Lp
 655 _iwrite_GenPtr
 656             tsa.w                   ; transfer current stk pointer to A
 657             inc.w a                 ; remove stack pointer write bias
 658             pha.w                   ; push string pointer to stack
 660             rot a                   ; restore integer part of the conversion
 662             cmp.w #0                ; test for 0. If not 0, int > 10^fld
 663             beq _iwrite_Sup0
 664             ldy #0
 665 _iwrite_ErrLp
 666             lda #0x2A               ; fill integer field with '*'
 667             sta (1,S),Y
 668             iny
 669             cmp.y _fLenOff,X
 670             bne _iwrite_ErrLp
 671             bra _iwrite_Exit
 673 _iwrite_Sup0
 674             ldy #0                  ; initialize string index
 675 _iwrite_Sup0_Lp
 676             lda (1,S),Y
 677             cmp #48                 ; if leading position == 0, replace with ' '
 678             bne _iwrite_Exit        ; exit loop on first non-0 digit
 679             lda #32                 ; replace leading 0 with ' '
 680             sta (1,S),Y
 681             iny                     ; increment string index and compare to fLen
 682             cmp.y _fLenOff,X
 683             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
 685 _iwrite_Exit
 686             psh.w #0                ; NULL argument
 687             lda _fLenOff,X          ; push field width specifier
 688             pha.w
 689             csr _swrite             ; write integer value string using _swrite()
 690             adj #6                  ; remove parameters to _swrite() from stack
 692             txs.w                   ; deallocate stack variables
 693             plx.w                   ; restore previous base pointer
 694             rts
 696             .endp _iwrite
 698 	.dat
 700 S_016 .str "*** ERROR:  number < 0"
 701 S_007 .str "Enter new number (0 to quit): "
 702 F_020 .flt 1.000000e-06
 703 F_011 .flt 0.000000e+00
 704 _bss_start .byt 0
 705 number_002 .flt 0
 706 root_003 .flt 0
 707 sqroot_004 .flt 0
 708 _bss_end .byt 0
 709 _stk .byt 0[1023]
 710 _stk_top .byt -1
 712 	.end
