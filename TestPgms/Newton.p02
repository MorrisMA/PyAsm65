[   0]    2 	.stk 1024
[   1]    3 	.cod 512
[   2]    4 STATIC_LINK .equ +5
[   3]    5 RETURN_VALUE .equ -3
[   4]    6 HIGH_RETURN_VALUE .equ -1
[   5]    7 _start
[   6]    8 	tsx.w		; Preserve original stack pointer
[   7]    9 	lds.w #_stk_top	; Initialize program stack pointer
[   8]   10 	stz _bss_start
[   9]   11 	ldx.w #_bss_start
[  10]   12 	ldy.w #_bss_start+1
[  11]   13 	lda.w #_stk_top
[  12]   14 	sec
[  13]   15 	sbc.w #_bss_start
[  14]   16 	mov #10
[  15]   17 	jmp _pc65_main
[  16]   26 _pc65_main .sub
[  17]   27 	phx.w
[  18]   28 	tsx.w
[  19]   30 L_005
[  20]   32 	jsr _writeln
[  21]   34 	psh.w #S_007
[  22]   35 	psh.w #0
[  23]   36 	psh.w #30
[  24]   37 	jsr _swrite
[  25]   38 	adj #6
[  26]   40 	psh.w #number_002
[  27]   41 	jsr _fread
[  28]   42 	pli.s
[  29]   43 	sta.w 0,I++
[  30]   44 	swp a
[  31]   45 	sta.w 0,I++
[  32]   48 	lda.w number_002+2	;emit_load_value
[  33]   49 	swp a
[  34]   50 	lda.w number_002
[  35]   51 	swp a
[  36]   52 	pha.w
[  37]   53 	swp a
[  38]   54 	pha.w
[  39]   56 	psh.w #0
[  40]   57 	jsr _fconv
[  41]   58 	adj #2
[  42]   59 	swp a
[  43]   60 	pha.w
[  44]   61 	swp a
[  45]   62 	pha.w
[  46]   63 	jsr _fcmp
[  47]   64 	adj #8
[  48]   65 	cmp.w #0
[  49]   66 	beq L_010T
[  50]   67 	lda #0
[  51]   68 	bra L_010
[  52]   69 L_010T lda #1
[  53]   71 L_010
[  54]   72 	cmp.w #1
[  55]   73 	beq L_008
[  56]   74 	jmp L_009
[  57]   75 L_008
[  58]   77 	lda.w number_002+2	;emit_load_value
[  59]   78 	swp a
[  60]   79 	lda.w number_002
[  61]   80 	swp a
[  62]   81 	pha.w
[  63]   82 	swp a
[  64]   83 	pha.w
[  65]   85 	psh.w #12
[  66]   87 	psh.w #6
[  67]   88 	jsr _fwrite
[  68]   89 	adj #8
[  69]   90 	lda.w F_011+2	;float_literal
[  70]   91 	swp a
[  71]   92 	lda.w F_011
[  72]   93 	swp a
[  73]   94 	pha.w
[  74]   95 	swp a
[  75]   96 	pha.w
[  76]   98 	psh.w #12
[  77]  100 	psh.w #6
[  78]  101 	jsr _fwrite
[  79]  102 	adj #8
[  80]  103 	jsr _writeln
[  81]  106 	jmp L_012
[  82]  107 L_009
[  83]  108 	lda.w number_002+2	;emit_load_value
[  84]  109 	swp a
[  85]  110 	lda.w number_002
[  86]  111 	swp a
[  87]  112 	pha.w
[  88]  113 	swp a
[  89]  114 	pha.w
[  90]  116 	psh.w #0
[  91]  117 	jsr _fconv
[  92]  118 	adj #2
[  93]  119 	swp a
[  94]  120 	pha.w
[  95]  121 	swp a
[  96]  122 	pha.w
[  97]  123 	jsr _fcmp
[  98]  124 	adj #8
[  99]  125 	cmp.w #0
[ 100]  126 	blt L_015T
[ 101]  127 	lda #0
[ 102]  128 	bra L_015
[ 103]  129 L_015T lda #1
[ 104]  131 L_015
[ 105]  132 	cmp.w #1
[ 106]  133 	beq L_013
[ 107]  134 	jmp L_014
[ 108]  135 L_013
[ 109]  137 	psh.w #S_016
[ 110]  138 	psh.w #0
[ 111]  139 	psh.w #22
[ 112]  140 	jsr _swrite
[ 113]  141 	adj #6
[ 114]  142 	jsr _writeln
[ 115]  145 	jmp L_017
[ 116]  146 L_014
[ 117]  148 	lda.w number_002+2	;emit_load_value
[ 118]  149 	swp a
[ 119]  150 	lda.w number_002
[ 120]  151 	swp a
[ 121]  152 	pha.w
[ 122]  153 	swp a
[ 123]  154 	pha.w
[ 124]  155 	jsr _fsqrt
[ 125]  156 	adj #4
[ 126]  157 	sta.w sqroot_004
[ 127]  158 	swp a
[ 128]  159 	sta.w sqroot_004+2	;assgnment_statement
[ 129]  161 	lda.w number_002+2	;emit_load_value
[ 130]  162 	swp a
[ 131]  163 	lda.w number_002
[ 132]  164 	swp a
[ 133]  165 	pha.w
[ 134]  166 	swp a
[ 135]  167 	pha.w
[ 136]  169 	psh.w #12
[ 137]  171 	psh.w #6
[ 138]  172 	jsr _fwrite
[ 139]  173 	adj #8
[ 140]  174 	lda.w sqroot_004+2	;emit_load_value
[ 141]  175 	swp a
[ 142]  176 	lda.w sqroot_004
[ 143]  177 	swp a
[ 144]  178 	pha.w
[ 145]  179 	swp a
[ 146]  180 	pha.w
[ 147]  182 	psh.w #12
[ 148]  184 	psh.w #6
[ 149]  185 	jsr _fwrite
[ 150]  186 	adj #8
[ 151]  187 	jsr _writeln
[ 152]  189 	jsr _writeln
[ 153]  193 	psh.w #1
[ 154]  194 	jsr _fconv
[ 155]  195 	adj #2
[ 156]  196 	sta.w root_003
[ 157]  197 	swp a
[ 158]  198 	sta.w root_003+2	;assgnment_statement
[ 159]  200 L_018
[ 160]  202 	lda.w number_002+2	;emit_load_value
[ 161]  203 	swp a
[ 162]  204 	lda.w number_002
[ 163]  205 	swp a
[ 164]  206 	pha.w
[ 165]  207 	swp a
[ 166]  208 	pha.w
[ 167]  209 	lda.w root_003+2	;emit_load_value
[ 168]  210 	swp a
[ 169]  211 	lda.w root_003
[ 170]  212 	swp a
[ 171]  213 	pha.w
[ 172]  214 	swp a
[ 173]  215 	pha.w
[ 174]  216 	jsr _fdiv
[ 175]  217 	adj #8
[ 176]  218 	swp a
[ 177]  219 	pha.w
[ 178]  220 	swp a
[ 179]  221 	pha.w
[ 180]  222 	lda.w root_003+2	;emit_load_value
[ 181]  223 	swp a
[ 182]  224 	lda.w root_003
[ 183]  225 	swp a
[ 184]  226 	pha.w
[ 185]  227 	swp a
[ 186]  228 	pha.w
[ 187]  229 	jsr _fadd
[ 188]  230 	adj #8
[ 189]  231 	swp a
[ 190]  232 	pha.w
[ 191]  233 	swp a
[ 192]  234 	pha.w
[ 193]  236 	psh.w #2
[ 194]  237 	jsr _fconv
[ 195]  238 	adj #2
[ 196]  239 	swp a
[ 197]  240 	pha.w
[ 198]  241 	swp a
[ 199]  242 	pha.w
[ 200]  243 	jsr _fdiv
[ 201]  244 	adj #8
[ 202]  245 	sta.w root_003
[ 203]  246 	swp a
[ 204]  247 	sta.w root_003+2	;assgnment_statement
[ 205]  249 	lda.w root_003+2	;emit_load_value
[ 206]  250 	swp a
[ 207]  251 	lda.w root_003
[ 208]  252 	swp a
[ 209]  253 	pha.w
[ 210]  254 	swp a
[ 211]  255 	pha.w
[ 212]  257 	psh.w #24
[ 213]  259 	psh.w #6
[ 214]  260 	jsr _fwrite
[ 215]  261 	adj #8
[ 216]  264 	psh.w #100
[ 217]  265 	lda.w root_003+2	;emit_load_value
[ 218]  266 	swp a
[ 219]  267 	lda.w root_003
[ 220]  268 	swp a
[ 221]  269 	pha.w
[ 222]  270 	swp a
[ 223]  271 	pha.w
[ 224]  272 	lda.w sqroot_004+2	;emit_load_value
[ 225]  273 	swp a
[ 226]  274 	lda.w sqroot_004
[ 227]  275 	swp a
[ 228]  276 	pha.w
[ 229]  277 	swp a
[ 230]  278 	pha.w
[ 231]  279 	jsr _fsub
[ 232]  280 	adj #8
[ 233]  281 	swp a
[ 234]  282 	pha.w
[ 235]  283 	swp a
[ 236]  284 	pha.w
[ 237]  285 	jsr _fabs
[ 238]  286 	adj #4
[ 239]  287 	swp a
[ 240]  288 	pha.w
[ 241]  289 	swp a
[ 242]  290 	pha.w
[ 243]  291 	pla.w
[ 244]  292 	swp a
[ 245]  293 	pla.w
[ 246]  294 	ply.w
[ 247]  295 	pha.w
[ 248]  296 	swp a
[ 249]  297 	pha.w
[ 250]  298 	phy.w
[ 251]  299 	jsr _fconv
[ 252]  300 	adj #2
[ 253]  301 	ply.w
[ 254]  302 	swp y
[ 255]  303 	ply.w
[ 256]  304 	swp a
[ 257]  305 	pha.w
[ 258]  306 	swp a
[ 259]  307 	pha.w
[ 260]  308 	phy.w
[ 261]  309 	swp y
[ 262]  310 	phy.w
[ 263]  311 	jsr _fmul
[ 264]  312 	adj #8
[ 265]  313 	swp a
[ 266]  314 	pha.w
[ 267]  315 	swp a
[ 268]  316 	pha.w
[ 269]  317 	lda.w sqroot_004+2	;emit_load_value
[ 270]  318 	swp a
[ 271]  319 	lda.w sqroot_004
[ 272]  320 	swp a
[ 273]  321 	pha.w
[ 274]  322 	swp a
[ 275]  323 	pha.w
[ 276]  324 	jsr _fdiv
[ 277]  325 	adj #8
[ 278]  326 	swp a
[ 279]  327 	pha.w
[ 280]  328 	swp a
[ 281]  329 	pha.w
[ 282]  331 	psh.w #12
[ 283]  333 	psh.w #2
[ 284]  334 	jsr _fwrite
[ 285]  335 	adj #8
[ 286]  338 	psh.w #37
[ 287]  339 	psh.w #0
[ 288]  340 	jsr _cwrite
[ 289]  341 	adj #4
[ 290]  343 	jsr _writeln
[ 291]  344 	lda.w number_002+2	;emit_load_value
[ 292]  345 	swp a
[ 293]  346 	lda.w number_002
[ 294]  347 	swp a
[ 295]  348 	pha.w
[ 296]  349 	swp a
[ 297]  350 	pha.w
[ 298]  351 	lda.w root_003+2	;emit_load_value
[ 299]  352 	swp a
[ 300]  353 	lda.w root_003
[ 301]  354 	swp a
[ 302]  355 	pha.w
[ 303]  356 	swp a
[ 304]  357 	pha.w
[ 305]  358 	swp a
[ 306]  359 	pha.w
[ 307]  360 	swp a
[ 308]  361 	pha.w
[ 309]  362 	jsr _fmul
[ 310]  363 	adj #8
[ 311]  364 	swp a
[ 312]  365 	pha.w
[ 313]  366 	swp a
[ 314]  367 	pha.w
[ 315]  368 	jsr _fdiv
[ 316]  369 	adj #8
[ 317]  370 	swp a
[ 318]  371 	pha.w
[ 319]  372 	swp a
[ 320]  373 	pha.w
[ 321]  375 	psh.w #1
[ 322]  376 	jsr _fconv
[ 323]  377 	adj #2
[ 324]  378 	swp a
[ 325]  379 	pha.w
[ 326]  380 	swp a
[ 327]  381 	pha.w
[ 328]  382 	jsr _fsub
[ 329]  383 	adj #8
[ 330]  384 	swp a
[ 331]  385 	pha.w
[ 332]  386 	swp a
[ 333]  387 	pha.w
[ 334]  388 	jsr _fabs
[ 335]  389 	adj #4
[ 336]  390 	swp a
[ 337]  391 	pha.w
[ 338]  392 	swp a
[ 339]  393 	pha.w
[ 340]  394 	lda.w F_020+2	;float_literal
[ 341]  395 	swp a
[ 342]  396 	lda.w F_020
[ 343]  397 	swp a
[ 344]  398 	pha.w
[ 345]  399 	swp a
[ 346]  400 	pha.w
[ 347]  401 	jsr _fcmp
[ 348]  402 	adj #8
[ 349]  403 	cmp.w #0
[ 350]  404 	blt L_021T
[ 351]  405 	lda #0
[ 352]  406 	bra L_021
[ 353]  407 L_021T lda #1
[ 354]  409 L_021
[ 355]  410 	cmp.w #1
[ 356]  411 	beq L_019
[ 357]  412 	jmp L_018
[ 358]  413 L_019
[ 359]  416 L_017
[ 360]  417 L_012
[ 361]  418 	lda.w number_002+2	;emit_load_value
[ 362]  419 	swp a
[ 363]  420 	lda.w number_002
[ 364]  421 	swp a
[ 365]  422 	pha.w
[ 366]  423 	swp a
[ 367]  424 	pha.w
[ 368]  427 	psh.w #0
[ 369]  428 	jsr _fconv
[ 370]  429 	adj #2
[ 371]  430 	swp a
[ 372]  431 	pha.w
[ 373]  432 	swp a
[ 374]  433 	pha.w
[ 375]  434 	jsr _fcmp
[ 376]  435 	adj #8
[ 377]  436 	cmp.w #0
[ 378]  437 	beq L_022T
[ 379]  438 	lda #0
[ 380]  439 	bra L_022
[ 381]  440 L_022T lda #1
[ 382]  442 L_022
[ 383]  443 	cmp.w #1
[ 384]  444 	beq L_006
[ 385]  445 	jmp L_005
[ 386]  446 L_006
[ 387]  447 	plx.w
[ 388]  448 	rts
[ 389]  449 	.end _pc65_main
[ 390]  454             .cod
[ 391]  456 _Q          .equ    5
[ 392]  457 _D          .equ    3
[ 393]  459 _idiv       .proc
[ 394]  460             lda #0          ; clear remainder (A)
[ 395]  461             dup a           ; push
[ 396]  462             lda.w _Q,S      ; load dividend (Q)
[ 397]  463             ldy #16         ; bit counter
[ 398]  465 _idiv_Lp
[ 399]  466             clc
[ 400]  467             asl.w a         ; shift AQ left
[ 401]  468             swp a
[ 402]  469             rol.w a
[ 403]  471             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
[ 404]  473 _idiv_Minus
[ 405]  474             sec
[ 406]  475             sbc.w _D,S      ; subtract divisor (D)
[ 407]  477             bra _idiv_Next
[ 408]  479 _idiv_Plus
[ 409]  480             clc
[ 410]  481             adc.w _D,S      ; add divisor (D)
[ 411]  483 _idiv_Next
[ 412]  484             swp a           ; restore order of Acc stack {Q, A, -}
[ 413]  485             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
[ 414]  486             inc.w a
[ 415]  488 _idiv_Dec
[ 416]  489             dey             ; loop until loop counter == 0
[ 417]  490             bne _idiv_Lp
[ 418]  492 _idiv_Exit
[ 419]  493             swp a           ; Test remainder
[ 420]  494             ora.w #0
[ 421]  495             bpl _idiv_Finish
[ 422]  496             clc
[ 423]  497             adc.w 3,S
[ 424]  498 _idiv_Finish
[ 425]  499             swp a
[ 426]  501             rts
[ 427]  503             .endp _idiv
[ 428]  508             .cod
[ 429]  510 _M          .equ    5
[ 430]  511 _R          .equ    3
[ 431]  513 _imul       .proc
[ 432]  514             ldy #16             ; y = bit count
[ 433]  515             lda #0              ; A = { 0,  x,  x} - clear product
[ 434]  516             dup a               ; A = { 0,  0,  x}
[ 435]  517             dup a               ; A = { 0,  0,  0}
[ 436]  518             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
[ 437]  519             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
[ 438]  520             ora.w #0            ; set N flag if msb ATOS == 1
[ 439]  521             clc                 ; initialize Booth recoding bit
[ 440]  522             rot a               ; A = {PH, PL, `R}
[ 441]  524             bra _imul_TstB
[ 442]  526 _imul_Lp
[ 443]  527             asl.w a             ; A = {`R << 1, PH, PL}
[ 444]  528             rot a               ; A = {PH, PL, `R}
[ 445]  529 _imul_TstB
[ 446]  530             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
[ 447]  532 _imul_AddShft
[ 448]  533             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
[ 449]  534 _imul_AddM
[ 450]  535             clc
[ 451]  536             adc.w _M,S          ; PH += M
[ 452]  537             bra _imul_ShftP
[ 453]  539 _imul_SubShft
[ 454]  540             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
[ 455]  541 _imul_SubM
[ 456]  542             sec
[ 457]  543             sbc.w _M,S          ; PH -= M
[ 458]  545 _imul_ShftP
[ 459]  546             asr.w a             ; A = {PH >> 1, PL, `R}
[ 460]  547             rot a               ; A = {PL, `R, PH}
[ 461]  548             ror.w a             ; A = {PL >> 2, `R, PH}
[ 462]  549             rot a               ; A = {`R, PH, PL}
[ 463]  551 _imul_Dec
[ 464]  552             dey
[ 465]  553             bne _imul_Lp
[ 466]  555 _imul_Exit
[ 467]  556             rot a               ; A = {PH, PL, `R}
[ 468]  557             swp a               ; A = {PL, PH, `R}
[ 469]  559             rts
[ 470]  561             .endp _imul
[ 471]  566             .cod
[ 472]  568 _newLine    .equ    0x0A
[ 473]  569 _putChar    .equ    0xF001
[ 474]  571 _writeln    .proc
[ 475]  572             lda #_newLine
[ 476]  573             sta _putChar
[ 477]  575             rts
[ 478]  577             .endp _writeln
[ 479]  581             .cod
[ 480]  583 _sPtrOff    .equ    7
[ 481]  584 _sLenOff    .equ    3
[ 482]  586 _swrite     .proc
[ 483]  587             ldy.w _sLenOff,S        ; load string length
[ 484]  588             lda.w _sPtrOff,S        ; load string pointer
[ 485]  589             tai                     ; transfer sptr to IP
[ 486]  591 _swrite_Lp
[ 487]  592             lda 0,I++               ; load char from strig
[ 488]  593             sta _putChar            ; write char to output
[ 489]  595             dey.w                   ; loop while string length <> 0
[ 490]  596             bne _swrite_Lp
[ 491]  598             rts
[ 492]  600             .endp _swrite
[ 493]  604             .cod
[ 494]  606 _iValOff    .equ    7
[ 495]  607 _fLenOff    .equ    5
[ 496]  608 _iCntOff    .equ    -1
[ 497]  610 _iwrite     .proc
[ 498]  611             phx.w                   ; save current base pointer
[ 499]  612             tsx.w                   ; assign new base pointer
[ 500]  614             lda _fLenOff,X          ; load field width specifier
[ 501]  615             cmp #5                  ; compare against max integer digit count
[ 502]  616             ble _iwrite_SetCnt
[ 503]  617             lda #5
[ 504]  619 _iwrite_SetCnt
[ 505]  620             pha.w                   ; set iteration count to fld width
[ 506]  621             lda.w _iValOff,X        ; load a with integer value
[ 507]  623 _iwrite_Lp
[ 508]  624             pha.w                   ; push dividend argument to _idiv
[ 509]  625             psh.w #10               ; push divisor argument to _idiv
[ 510]  626             csr _idiv               ; determine the remainder,
[ 511]  627             adj #4                  ; remove arguments passed to _idiv from stk
[ 512]  628             swp a                   ; put the remainder into ATOS
[ 513]  630             clc                     ; convert remainder into ASCII character
[ 514]  631             adc #48
[ 515]  632             pha                     ; push LS digit of integer onto stack
[ 516]  634             rot a                   ; rotate quotient into ATOS position
[ 517]  636             dec.w _iCntOff,X        ; decrement digit iteration count
[ 518]  637             bne _iwrite_Lp
[ 519]  639             dup a                   ; save integer part of the conversion
[ 520]  641 _iwrite_Fill
[ 521]  642             lda _fLenOff,X          ; load field width specifier
[ 522]  643             cmp #5                  ; compare against max integer digit count
[ 523]  644             ble _iwrite_GenPtr
[ 524]  645             sec                     ; subtract max integer length from fld len
[ 525]  646             sbc #5
[ 526]  647             tay                     ; set difference as loop counter
[ 527]  648             lda #48                 ; fill remaining field with '0'
[ 528]  650 _iwrite_Fill_Lp                     ; increase string on stack with fill data
[ 529]  651             pha
[ 530]  652             dey
[ 531]  653             bne _iwrite_Fill_Lp
[ 532]  655 _iwrite_GenPtr
[ 533]  656             tsa.w                   ; transfer current stk pointer to A
[ 534]  657             inc.w a                 ; remove stack pointer write bias
[ 535]  658             pha.w                   ; push string pointer to stack
[ 536]  660             rot a                   ; restore integer part of the conversion
[ 537]  662             cmp.w #0                ; test for 0. If not 0, int > 10^fld
[ 538]  663             beq _iwrite_Sup0
[ 539]  664             ldy #0
[ 540]  665 _iwrite_ErrLp
[ 541]  666             lda #0x2A               ; fill integer field with '*'
[ 542]  667             sta (1,S),Y
[ 543]  668             iny
[ 544]  669             cmp.y _fLenOff,X
[ 545]  670             bne _iwrite_ErrLp
[ 546]  671             bra _iwrite_Exit
[ 547]  673 _iwrite_Sup0
[ 548]  674             ldy #0                  ; initialize string index
[ 549]  675 _iwrite_Sup0_Lp
[ 550]  676             lda (1,S),Y
[ 551]  677             cmp #48                 ; if leading position == 0, replace with ' '
[ 552]  678             bne _iwrite_Exit        ; exit loop on first non-0 digit
[ 553]  679             lda #32                 ; replace leading 0 with ' '
[ 554]  680             sta (1,S),Y
[ 555]  681             iny                     ; increment string index and compare to fLen
[ 556]  682             cmp.y _fLenOff,X
[ 557]  683             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
[ 558]  685 _iwrite_Exit
[ 559]  686             psh.w #0                ; NULL argument
[ 560]  687             lda _fLenOff,X          ; push field width specifier
[ 561]  688             pha.w
[ 562]  689             csr _swrite             ; write integer value string using _swrite()
[ 563]  690             adj #6                  ; remove parameters to _swrite() from stack
[ 564]  692             txs.w                   ; deallocate stack variables
[ 565]  693             plx.w                   ; restore previous base pointer
[ 566]  694             rts
[ 567]  696             .endp _iwrite
[ 568]  698 	.dat
[ 569]  700 S_016 .str "*** ERROR:  number < 0"
[ 570]  701 S_007 .str "Enter new number (0 to quit): "
[ 571]  702 F_020 .flt 1.000000e-06
[ 572]  703 F_011 .flt 0.000000e+00
[ 573]  704 _bss_start .byt 0
[ 574]  705 number_002 .flt 0
[ 575]  706 root_003 .flt 0
[ 576]  707 sqroot_004 .flt 0
[ 577]  708 _bss_end .byt 0
[ 578]  709 _stk .byt 0[1023]
[ 579]  710 _stk_top .byt -1
[ 580]  712 	.end
