[   0]    2 	.stk 1024
[   1]    3 	.cod 512
[   2]    4 STATIC_LINK .equ +5
[   3]    5 RETURN_VALUE .equ -3
[   4]    6 HIGH_RETURN_VALUE .equ -1
[   5]    7 _start
[   6]    8 	tsx.w		; Preserve original stack pointer
[   7]    9 	lds.w #_stk_top	; Initialize program stack pointer
[   8]   10 	stz _bss_start
[   9]   11 	ldx.w #_bss_start
[  10]   12 	ldy.w #_bss_start+1
[  11]   13 	lda.w #_stk_top
[  12]   14 	sec
[  13]   15 	sbc.w #_bss_start
[  14]   16 	mov #10
[  15]   17 	jmp _pc65_main
[  16]   27 _pc65_main .sub
[  17]   28 	phx.w
[  18]   29 	tsx.w
[  19]   31 	lda.w #1000
[  20]   32 	pha.w
[  21]   33 	lda #2
[  22]   34 	pha.w
[  23]   35 	jsr _idiv
[  24]   36 	adj #4
[  25]   37 	sta.w limit_005
[  26]   39 	psh.w #sieve_002
[  27]   40 	lda #1
[  28]   41 	dec.w a
[  29]   42 	asl.w a
[  30]   43 	clc
[  31]   44 	adc.w 1,S
[  32]   45 	sta.w 1,S
[  33]   46 	lda #0
[  34]   47 	pli.s
[  35]   48 	sta.w 0,I++
[  36]   51 	lda #2
[  37]   52 	sta.w i_003
[  38]   53 L_008
[  39]   54 	lda.w #1000
[  40]   55 	cmp.w i_003
[  41]   56 	bge L_009
[  42]   57 	jmp L_010
[  43]   58 L_009
[  44]   60 	psh.w #sieve_002
[  45]   61 	lda.w i_003
[  46]   62 	dec.w a
[  47]   63 	asl.w a
[  48]   64 	clc
[  49]   65 	adc.w 1,S
[  50]   66 	sta.w 1,S
[  51]   67 	lda #1
[  52]   68 	pli.s
[  53]   69 	sta.w 0,I++
[  54]   70 	inc.w i_003
[  55]   71 	jmp L_008
[  56]   72 L_010
[  57]   73 	dec.w i_003
[  58]   76 	lda #1
[  59]   77 	sta.w prime_006
[  60]   80 L_011
[  61]   82 	lda.w prime_006
[  62]   83 	pha.w
[  63]   84 	lda #1
[  64]   85 	clc
[  65]   86 	adc.w 1,S
[  66]   87 	adj #2
[  67]   88 	sta.w prime_006
[  68]   90 L_013
[  69]   91 	psh.w #sieve_002
[  70]   92 	lda.w prime_006
[  71]   93 	dec.w a
[  72]   94 	asl.w a
[  73]   95 	clc
[  74]   96 	adc.w 1,S
[  75]   97 	sta.w 1,S
[  76]   98 	pli.s
[  77]   99 	lda.w 0,I++
[  78]  100 	eor #1
[  79]  101 	cmp.w #1
[  80]  102 	beq L_014
[  81]  103 	jmp L_015
[  82]  104 L_014
[  83]  106 	lda.w prime_006
[  84]  107 	pha.w
[  85]  108 	lda #1
[  86]  109 	clc
[  87]  110 	adc.w 1,S
[  88]  111 	adj #2
[  89]  112 	sta.w prime_006
[  90]  113 	jmp L_013
[  91]  114 L_015
[  92]  117 	lda #2
[  93]  118 	pha.w
[  94]  119 	lda.w prime_006
[  95]  120 	pha.w
[  96]  121 	jsr _imul
[  97]  122 	adj #4
[  98]  123 	sta.w factor_007
[  99]  126 L_016
[ 100]  127 	lda.w factor_007
[ 101]  128 	pha.w
[ 102]  129 	lda.w #1000
[ 103]  130 	xma.w 1,S
[ 104]  131 	cmp.w 1,S
[ 105]  132 	adj #2
[ 106]  133 	php
[ 107]  134 	lda #1
[ 108]  135 	plp
[ 109]  136 	ble L_019
[ 110]  137 	lda #0
[ 111]  138 L_019
[ 112]  139 	cmp.w #1
[ 113]  140 	beq L_017
[ 114]  141 	jmp L_018
[ 115]  142 L_017
[ 116]  144 	psh.w #sieve_002
[ 117]  145 	lda.w factor_007
[ 118]  146 	dec.w a
[ 119]  147 	asl.w a
[ 120]  148 	clc
[ 121]  149 	adc.w 1,S
[ 122]  150 	sta.w 1,S
[ 123]  151 	lda #0
[ 124]  152 	pli.s
[ 125]  153 	sta.w 0,I++
[ 126]  155 	lda.w factor_007
[ 127]  156 	pha.w
[ 128]  157 	lda.w prime_006
[ 129]  158 	clc
[ 130]  159 	adc.w 1,S
[ 131]  160 	adj #2
[ 132]  161 	sta.w factor_007
[ 133]  164 	jmp L_016
[ 134]  165 L_018
[ 135]  166 	lda.w prime_006
[ 136]  167 	pha.w
[ 137]  168 	lda.w limit_005
[ 138]  169 	xma.w 1,S
[ 139]  170 	cmp.w 1,S
[ 140]  171 	adj #2
[ 141]  172 	php
[ 142]  173 	lda #1
[ 143]  174 	plp
[ 144]  175 	bgt L_020
[ 145]  176 	lda #0
[ 146]  177 L_020
[ 147]  178 	cmp.w #1
[ 148]  179 	beq L_012
[ 149]  180 	jmp L_011
[ 150]  181 L_012
[ 151]  184 	psh.w #S_021
[ 152]  185 	psh.w #0
[ 153]  186 	psh.w #21
[ 154]  187 	jsr _swrite
[ 155]  188 	adj #6
[ 156]  189 	jsr _writeln
[ 157]  191 	jsr _writeln
[ 158]  194 	lda #1
[ 159]  195 	sta.w i_003
[ 160]  197 L_022
[ 161]  199 	lda #0
[ 162]  200 	sta.w j_004
[ 163]  201 L_024
[ 164]  202 	lda #19
[ 165]  203 	cmp.w j_004
[ 166]  204 	bge L_025
[ 167]  205 	jmp L_026
[ 168]  206 L_025
[ 169]  208 	lda.w i_003
[ 170]  209 	pha.w
[ 171]  210 	lda.w j_004
[ 172]  211 	clc
[ 173]  212 	adc.w 1,S
[ 174]  213 	adj #2
[ 175]  214 	sta.w prime_006
[ 176]  216 	psh.w #sieve_002
[ 177]  217 	lda.w prime_006
[ 178]  218 	dec.w a
[ 179]  219 	asl.w a
[ 180]  220 	clc
[ 181]  221 	adc.w 1,S
[ 182]  222 	sta.w 1,S
[ 183]  223 	pli.s
[ 184]  224 	lda.w 0,I++
[ 185]  225 	cmp.w #1
[ 186]  226 	beq L_027
[ 187]  227 	jmp L_028
[ 188]  228 L_027
[ 189]  230 	lda.w prime_006
[ 190]  231 	pha.w
[ 191]  232 	lda #3
[ 192]  233 	pha.w
[ 193]  234 	jsr _iwrite
[ 194]  235 	adj #4
[ 195]  237 	jmp L_029
[ 196]  238 L_028
[ 197]  240 	psh.w #S_030
[ 198]  241 	psh.w #0
[ 199]  242 	psh.w #3
[ 200]  243 	jsr _swrite
[ 201]  244 	adj #6
[ 202]  245 L_029
[ 203]  247 	inc.w j_004
[ 204]  248 	jmp L_024
[ 205]  249 L_026
[ 206]  250 	dec.w j_004
[ 207]  252 	jsr _writeln
[ 208]  254 	lda.w i_003
[ 209]  255 	pha.w
[ 210]  256 	lda #20
[ 211]  258 	clc
[ 212]  259 	adc.w 1,S
[ 213]  260 	adj #2
[ 214]  261 	sta.w i_003
[ 215]  262 	lda.w i_003
[ 216]  263 	pha.w
[ 217]  265 	lda.w #1000
[ 218]  266 	xma.w 1,S
[ 219]  267 	cmp.w 1,S
[ 220]  268 	adj #2
[ 221]  269 	php
[ 222]  270 	lda #1
[ 223]  271 	plp
[ 224]  272 	bgt L_031
[ 225]  273 	lda #0
[ 226]  274 L_031
[ 227]  275 	cmp.w #1
[ 228]  276 	beq L_023
[ 229]  277 	jmp L_022
[ 230]  278 L_023
[ 231]  279 	plx.w
[ 232]  280 	rts
[ 233]  281 	.end _pc65_main
[ 234]  286             .cod
[ 235]  288 _Q          .equ    5
[ 236]  289 _D          .equ    3
[ 237]  291 _idiv       .proc
[ 238]  292             lda #0          ; clear remainder (A)
[ 239]  293             dup a           ; push
[ 240]  294             lda.w _Q,S      ; load dividend (Q)
[ 241]  295             ldy #16         ; bit counter
[ 242]  297 _idiv_Lp
[ 243]  298             clc
[ 244]  299             asl.w a         ; shift AQ left
[ 245]  300             swp a
[ 246]  301             rol.w a
[ 247]  303             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
[ 248]  305 _idiv_Minus
[ 249]  306             sec
[ 250]  307             sbc.w _D,S      ; subtract divisor (D)
[ 251]  309             bra _idiv_Next
[ 252]  311 _idiv_Plus
[ 253]  312             clc
[ 254]  313             adc.w _D,S      ; add divisor (D)
[ 255]  315 _idiv_Next
[ 256]  316             swp a           ; restore order of Acc stack {Q, A, -}
[ 257]  317             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
[ 258]  318             inc.w a
[ 259]  320 _idiv_Dec
[ 260]  321             dey             ; loop until loop counter == 0
[ 261]  322             bne _idiv_Lp
[ 262]  324 _idiv_Exit
[ 263]  325             swp a           ; Test remainder
[ 264]  326             ora.w #0
[ 265]  327             bpl _idiv_Finish
[ 266]  328             clc
[ 267]  329             adc.w 3,S
[ 268]  330 _idiv_Finish
[ 269]  331             swp a
[ 270]  333             rts
[ 271]  335             .endp _idiv
[ 272]  340             .cod
[ 273]  342 _M          .equ    5
[ 274]  343 _R          .equ    3
[ 275]  345 _imul       .proc
[ 276]  346             ldy #16             ; y = bit count
[ 277]  347             lda #0              ; A = { 0,  x,  x} - clear product
[ 278]  348             dup a               ; A = { 0,  0,  x}
[ 279]  349             dup a               ; A = { 0,  0,  0}
[ 280]  350             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
[ 281]  351             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
[ 282]  352             ora.w #0            ; set N flag if msb ATOS == 1
[ 283]  353             clc                 ; initialize Booth recoding bit
[ 284]  354             rot a               ; A = {PH, PL, `R}
[ 285]  356             bra _imul_TstB
[ 286]  358 _imul_Lp
[ 287]  359             asl.w a             ; A = {`R << 1, PH, PL}
[ 288]  360             rot a               ; A = {PH, PL, `R}
[ 289]  361 _imul_TstB
[ 290]  362             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
[ 291]  364 _imul_AddShft
[ 292]  365             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
[ 293]  366 _imul_AddM
[ 294]  367             clc
[ 295]  368             adc.w _M,S          ; PH += M
[ 296]  369             bra _imul_ShftP
[ 297]  371 _imul_SubShft
[ 298]  372             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
[ 299]  373 _imul_SubM
[ 300]  374             sec
[ 301]  375             sbc.w _M,S          ; PH -= M
[ 302]  377 _imul_ShftP
[ 303]  378             asr.w a             ; A = {PH >> 1, PL, `R}
[ 304]  379             rot a               ; A = {PL, `R, PH}
[ 305]  380             ror.w a             ; A = {PL >> 2, `R, PH}
[ 306]  381             rot a               ; A = {`R, PH, PL}
[ 307]  383 _imul_Dec
[ 308]  384             dey
[ 309]  385             bne _imul_Lp
[ 310]  387 _imul_Exit
[ 311]  388             rot a               ; A = {PH, PL, `R}
[ 312]  389             swp a               ; A = {PL, PH, `R}
[ 313]  391             rts
[ 314]  393             .endp _imul
[ 315]  398             .cod
[ 316]  400 _newLine    .equ    0x0A
[ 317]  401 _putChar    .equ    0xF001
[ 318]  403 _writeln    .proc
[ 319]  404             lda #_newLine
[ 320]  405             sta _putChar
[ 321]  407             rts
[ 322]  409             .endp _writeln
[ 323]  413             .cod
[ 324]  415 _sPtrOff    .equ    7
[ 325]  416 _sLenOff    .equ    3
[ 326]  418 _swrite     .proc
[ 327]  419             ldy.w _sLenOff,S        ; load string length
[ 328]  420             lda.w _sPtrOff,S        ; load string pointer
[ 329]  421             tai                     ; transfer sptr to IP
[ 330]  423 _swrite_Lp
[ 331]  424             lda 0,I++               ; load char from strig
[ 332]  425             sta _putChar            ; write char to output
[ 333]  427             dey.w                   ; loop while string length <> 0
[ 334]  428             bne _swrite_Lp
[ 335]  430             rts
[ 336]  432             .endp _swrite
[ 337]  436             .cod
[ 338]  438 _iValOff    .equ    7
[ 339]  439 _fLenOff    .equ    5
[ 340]  440 _iCntOff    .equ    -1
[ 341]  442 _iwrite     .proc
[ 342]  443             phx.w                   ; save current base pointer
[ 343]  444             tsx.w                   ; assign new base pointer
[ 344]  446             lda _fLenOff,X          ; load field width specifier
[ 345]  447             cmp #5                  ; compare against max integer digit count
[ 346]  448             ble _iwrite_SetCnt
[ 347]  449             lda #5
[ 348]  451 _iwrite_SetCnt
[ 349]  452             pha.w                   ; set iteration count to fld width
[ 350]  453             lda.w _iValOff,X        ; load a with integer value
[ 351]  455 _iwrite_Lp
[ 352]  456             pha.w                   ; push dividend argument to _idiv
[ 353]  457             psh.w #10               ; push divisor argument to _idiv
[ 354]  458             csr _idiv               ; determine the remainder,
[ 355]  459             adj #4                  ; remove arguments passed to _idiv from stk
[ 356]  460             swp a                   ; put the remainder into ATOS
[ 357]  462             clc                     ; convert remainder into ASCII character
[ 358]  463             adc #48
[ 359]  464             pha                     ; push LS digit of integer onto stack
[ 360]  466             rot a                   ; rotate quotient into ATOS position
[ 361]  468             dec.w _iCntOff,X        ; decrement digit iteration count
[ 362]  469             bne _iwrite_Lp
[ 363]  471             dup a                   ; save integer part of the conversion
[ 364]  473 _iwrite_Fill
[ 365]  474             lda _fLenOff,X          ; load field width specifier
[ 366]  475             cmp #5                  ; compare against max integer digit count
[ 367]  476             ble _iwrite_GenPtr
[ 368]  477             sec                     ; subtract max integer length from fld len
[ 369]  478             sbc #5
[ 370]  479             tay                     ; set difference as loop counter
[ 371]  480             lda #48                 ; fill remaining field with '0'
[ 372]  482 _iwrite_Fill_Lp                     ; increase string on stack with fill data
[ 373]  483             pha
[ 374]  484             dey
[ 375]  485             bne _iwrite_Fill_Lp
[ 376]  487 _iwrite_GenPtr
[ 377]  488             tsa.w                   ; transfer current stk pointer to A
[ 378]  489             inc.w a                 ; remove stack pointer write bias
[ 379]  490             pha.w                   ; push string pointer to stack
[ 380]  492             rot a                   ; restore integer part of the conversion
[ 381]  494             cmp.w #0                ; test for 0. If not 0, int > 10^fld
[ 382]  495             beq _iwrite_Sup0
[ 383]  496             ldy #0
[ 384]  497 _iwrite_ErrLp
[ 385]  498             lda #0x2A               ; fill integer field with '*'
[ 386]  499             sta (1,S),Y
[ 387]  500             iny
[ 388]  501             cmp.y _fLenOff,X
[ 389]  502             bne _iwrite_ErrLp
[ 390]  503             bra _iwrite_Exit
[ 391]  505 _iwrite_Sup0
[ 392]  506             ldy #0                  ; initialize string index
[ 393]  507 _iwrite_Sup0_Lp
[ 394]  508             lda (1,S),Y
[ 395]  509             cmp #48                 ; if leading position == 0, replace with ' '
[ 396]  510             bne _iwrite_Exit        ; exit loop on first non-0 digit
[ 397]  511             lda #32                 ; replace leading 0 with ' '
[ 398]  512             sta (1,S),Y
[ 399]  513             iny                     ; increment string index and compare to fLen
[ 400]  514             cmp.y _fLenOff,X
[ 401]  515             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
[ 402]  517 _iwrite_Exit
[ 403]  518             psh.w #0                ; NULL argument
[ 404]  519             lda _fLenOff,X          ; push field width specifier
[ 405]  520             pha.w
[ 406]  521             csr _swrite             ; write integer value string using _swrite()
[ 407]  522             adj #6                  ; remove parameters to _swrite() from stack
[ 408]  524             txs.w                   ; deallocate stack variables
[ 409]  525             plx.w                   ; restore previous base pointer
[ 410]  526             rts
[ 411]  528             .endp _iwrite
[ 412]  530 	.dat
[ 413]  532 S_030 .str "   "
[ 414]  533 S_021 .str "Sieve of Eratosthenes"
[ 415]  534 _bss_start .byt 0
[ 416]  535 sieve_002 .byt 0[2000]
[ 417]  536 i_003 .wrd 0
[ 418]  537 j_004 .wrd 0
[ 419]  538 limit_005 .wrd 0
[ 420]  539 prime_006 .wrd 0
[ 421]  540 factor_007 .wrd 0
[ 422]  541 _bss_end .byt 0
[ 423]  542 _stk .byt 0[1023]
[ 424]  543 _stk_top .byt -1
[ 425]  545 	.end
