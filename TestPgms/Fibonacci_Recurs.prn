(   1)                  ; ;    1: PROGRAM Fibonacci (output);
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ;     tsx.w       ; Preserve original stack pointer
(   9) 0202 CBA26209    ;     lds.w #_stk_top ; Initialize program stack pointer
(  10) 0206 9C2D05      ;     stz _bss_start
(  11) 0209 ABA22D05    ;     ldx.w #_bss_start
(  12) 020D ABA02E05    ;     ldy.w #_bss_start+1
(  13) 0211 ABA96209    ;     lda.w #_stk_top
(  14) 0215 38          ;     sec
(  15) 0216 ABE92D05    ;     sbc.w #_bss_start
(  16) 021A 540A        ;     mov #10
(  17) 021C 4C9502      ;     jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: CONST
(  20)                  ; ;    4:     max = 23;
(  21)                  ; ;    5: 
(  22)                  ; ;    6: VAR
(  23)                  ; ;    7:     i, j : INTEGER;
(  24)                  ; ;    8:     fn   : ARRAY[0..max] OF INTEGER;
(  25)                  ; ;    9:     
(  26)                  ; ;   10: FUNCTION FIB(n : INTEGER) : INTEGER;
(  27)                  ; ;   11:     BEGIN
(  28)                  ; n_006 .equ +7
(  29)                  ; fib_005 .sub
(  30) 021F ABDA        ;     phx.w
(  31) 0221 ABBA        ;     tsx.w
(  32) 0223 C2FC        ;     adj #-4
(  33)                  ; ;   12:         IF fn[n] = 0 THEN
(  35) 0225 ABB507      ;     lda.w n_006,X
(  36) 0228 AB0A        ;     asl.w a
(  37) 022A 18          ;     clc
(  38) 022B AB693205    ; 	adc.w #fn_004
(  39) 022F 9B0B        ; 	tai 
(  41) 0231 ABA300      ;     lda.w 0,I++
(  47) 0234 F004        ; 	beq L_009-2
(  48) 0236 A900        ; 	lda #0
(  49) 0238 8002        ; 	bra L_009
(  51) 023A A901        ; 	lda #1
(  52)                  ; L_009
(  54) 023C D003        ; 	bne L_007
(  55) 023E 4C7B02      ;     jmp L_008
(  56)                  ; L_007
(  57)                  ; ;   13:             fn[n] := FIB(n-1) + fn[n-2];
(  59) 0241 ABB507      ;     lda.w n_006,X
(  60) 0244 AB0A        ;     asl.w a
(  61) 0246 18          ;     clc
(  62) 0247 AB693205    ; 	adc.w #fn_004
(  63) 024B AB48        ; 	pha.w
(  64) 024D ABB507      ;     lda.w n_006,X
(  69) 0250 AB3A        ; 	dec.w a
(  71) 0252 AB48        ;     pha.w
(  72) 0254 ABB505      ;     lda.w STATIC_LINK,X
(  73) 0257 AB48        ;     pha.w
(  74) 0259 201F02      ;     jsr fib_005
(  75) 025C C204        ;     adj #4
(  76) 025E AB48        ;     pha.w
(  78) 0260 ABB507      ;     lda.w n_006,X
(  82) 0263 38          ;     sec
(  83) 0264 ABE90200    ; 	sbc.w #2
(  85) 0268 AB0A        ;     asl.w a
(  86) 026A ABA8        ; 	tay.w 
(  90) 026C ABB93205    ; 	lda.w fn_004,Y
(  91) 0270 18          ;     clc
(  92) 0271 CB7501      ;     adc.w 1,S
(  93) 0274 C202        ;     adj #2
(  94) 0276 8B6B        ;     pli.s
(  95) 0278 AB8300      ;     sta.w 0,I++
(  96)                  ; L_008
(  97)                  ; ;   14:         FIB := fn[n];
(  99) 027B ABB507      ;     lda.w n_006,X
( 100) 027E AB0A        ;     asl.w a
( 101) 0280 18          ;     clc
( 102) 0281 AB693205    ; 	adc.w #fn_004
( 103) 0285 9B0B        ; 	tai 
( 105) 0287 ABA300      ;     lda.w 0,I++
( 106) 028A AB95FD      ;     sta.w RETURN_VALUE,X
( 107)                  ; ;   15:     END;
( 108) 028D ABB5FD      ;     lda.w RETURN_VALUE,X
( 109) 0290 AB9A        ;     txs.w
( 110) 0292 ABFA        ;     plx.w
( 111) 0294 60          ;     rts
( 113)                  ; ;   16:     
( 114)                  ; ;   17: BEGIN
( 115)                  ; _pc65_main .sub
( 116) 0295 ABDA        ;     phx.w
( 117) 0297 ABBA        ;     tsx.w
( 118)                  ; ;   18:     fn[0] := 0;
( 120) 0299 A900        ;     lda #0
( 121) 029B AB0A        ;     asl.w a
( 122) 029D 18          ;     clc
( 123) 029E AB693205    ; 	adc.w #fn_004
( 124) 02A2 9B0B        ; 	tai 
( 125) 02A4 A900        ;     lda #0
( 127) 02A6 AB8300      ;     sta.w 0,I++
( 128)                  ; ;   19:     fn[1] := 1;
( 130) 02A9 A901        ;     lda #1
( 131) 02AB AB0A        ;     asl.w a
( 132) 02AD 18          ;     clc
( 133) 02AE AB693205    ; 	adc.w #fn_004
( 134) 02B2 9B0B        ; 	tai 
( 135) 02B4 A901        ;     lda #1
( 137) 02B6 AB8300      ;     sta.w 0,I++
( 138)                  ; ;   20:     FOR i := 2 to max DO fn[i] := 0;
( 139) 02B9 A902        ;     lda #2
( 140) 02BB AB8D2E05    ;     sta.w i_002
( 141)                  ; L_010
( 142) 02BF A917        ;     lda #23
( 143) 02C1 ABCD2E05    ;     cmp.w i_002
( 144) 02C5 AB5003      ;     bge L_011
( 145) 02C8 4CE402      ;     jmp L_012
( 146)                  ; L_011
( 148) 02CB ABAD2E05    ;     lda.w i_002
( 149) 02CF AB0A        ;     asl.w a
( 150) 02D1 18          ;     clc
( 151) 02D2 AB693205    ; 	adc.w #fn_004
( 152) 02D6 9B0B        ; 	tai 
( 153) 02D8 A900        ;     lda #0
( 155) 02DA AB8300      ;     sta.w 0,I++
( 156) 02DD ABEE2E05    ;     inc.w i_002
( 157) 02E1 4CBF02      ;     jmp L_010
( 158)                  ; L_012
( 159) 02E4 ABCE2E05    ;     dec.w i_002
( 160)                  ; ;   21:     
( 161)                  ; ;   22:     j := FIB(max);
( 163) 02E8 ABE21700    ; 	psh.w #23
( 164) 02EC ABDA        ;     phx.w
( 165) 02EE 201F02      ;     jsr fib_005
( 166) 02F1 C204        ;     adj #4
( 167) 02F3 AB8D3005    ;     sta.w j_003
( 168)                  ; ;   23: 
( 169)                  ; ;   24:     FOR i := 0 to max DO BEGIN
( 171) 02F7 AB9C2E05    ; 	stz.w i_002
( 172)                  ; L_013
( 173) 02FB A917        ;     lda #23
( 174) 02FD ABCD2E05    ;     cmp.w i_002
( 175) 0301 AB5003      ;     bge L_014
( 176) 0304 4C5D03      ;     jmp L_015
( 177)                  ; L_014
( 178)                  ; ;   25:         write('Fib[');
( 179) 0307 ABE22905    ;     psh.w #S_016
( 180) 030B ABE20000    ;     psh.w #0
( 181) 030F ABE20400    ;     psh.w #4
( 182) 0313 204704      ;     jsr _swrite
( 183) 0316 C206        ;     adj #6
( 184)                  ; ;   26:         write(i:2);
( 185) 0318 ABAD2E05    ;     lda.w i_002
( 186) 031C AB48        ;     pha.w
( 188) 031E ABE20200    ; 	psh.w #2
( 189) 0322 205904      ;     jsr _iwrite
( 190) 0325 C204        ;     adj #4
( 191)                  ; ;   27:         write('] = ');
( 192) 0327 ABE22505    ;     psh.w #S_017
( 193) 032B ABE20000    ;     psh.w #0
( 194) 032F ABE20400    ;     psh.w #4
( 195) 0333 204704      ;     jsr _swrite
( 196) 0336 C206        ;     adj #6
( 197)                  ; ;   28:         write(fn[i]:5);
( 199) 0338 ABAD2E05    ;     lda.w i_002
( 200) 033C AB0A        ;     asl.w a
( 201) 033E 18          ;     clc
( 202) 033F AB693205    ; 	adc.w #fn_004
( 203) 0343 9B0B        ; 	tai 
( 205) 0345 ABA300      ;     lda.w 0,I++
( 206) 0348 AB48        ;     pha.w
( 208) 034A ABE20500    ; 	psh.w #5
( 209) 034E 205904      ;     jsr _iwrite
( 210) 0351 C204        ;     adj #4
( 211)                  ; ;   29:         writeln
( 212)                  ; ;   30:     END;
( 213) 0353 204104      ;     jsr _writeln
( 214) 0356 ABEE2E05    ;     inc.w i_002
( 215) 035A 4CFB02      ;     jmp L_013
( 216)                  ; L_015
( 217) 035D ABCE2E05    ;     dec.w i_002
( 218)                  ; ;   31:     
( 219)                  ; ;   32:     writeln;
( 220) 0361 204104      ;     jsr _writeln
( 221)                  ; ;   33:     write('*****************************');
( 222) 0364 ABE2E504    ;     psh.w #S_018
( 223) 0368 ABE20000    ;     psh.w #0
( 224) 036C ABE23F00    ;     psh.w #63
( 225) 0370 204704      ;     jsr _swrite
( 226) 0373 C206        ;     adj #6
( 227)                  ; ;   34:     writeln;
( 228) 0375 204104      ;     jsr _writeln
( 229)                  ; ;   35:     writeln;
( 230) 0378 204104      ;     jsr _writeln
( 231)                  ; ;   36:     write('Fib[');
( 232) 037B ABE22905    ;     psh.w #S_016
( 233) 037F ABE20000    ;     psh.w #0
( 234) 0383 ABE20400    ;     psh.w #4
( 235) 0387 204704      ;     jsr _swrite
( 236) 038A C206        ;     adj #6
( 237)                  ; ;   37:     write(max:2);
( 239) 038C ABE21700    ; 	psh.w #23
( 241) 0390 ABE20200    ; 	psh.w #2
( 242) 0394 205904      ;     jsr _iwrite
( 243) 0397 C204        ;     adj #4
( 244)                  ; ;   38:     write('] = ');
( 245) 0399 ABE22505    ;     psh.w #S_017
( 246) 039D ABE20000    ;     psh.w #0
( 247) 03A1 ABE20400    ;     psh.w #4
( 248) 03A5 204704      ;     jsr _swrite
( 249) 03A8 C206        ;     adj #6
( 250)                  ; ;   39:     write(FIB(max):5);
( 252) 03AA ABE21700    ; 	psh.w #23
( 253) 03AE ABDA        ;     phx.w
( 254) 03B0 201F02      ;     jsr fib_005
( 255) 03B3 C204        ;     adj #4
( 256) 03B5 AB48        ;     pha.w
( 258) 03B7 ABE20500    ; 	psh.w #5
( 259) 03BB 205904      ;     jsr _iwrite
( 260) 03BE C204        ;     adj #4
( 261)                  ; ;   40:     writeln;
( 262) 03C0 204104      ;     jsr _writeln
( 263)                  ; ;   41:     writeln;
( 264) 03C3 204104      ;     jsr _writeln
( 265)                  ; ;   42:     write('*****************************');
( 266) 03C6 ABE2E504    ;     psh.w #S_018
( 267) 03CA ABE20000    ;     psh.w #0
( 268) 03CE ABE23F00    ;     psh.w #63
( 269) 03D2 204704      ;     jsr _swrite
( 270) 03D5 C206        ;     adj #6
( 271)                  ; ;   43:     writeln;
( 272) 03D7 204104      ;     jsr _writeln
( 273)                  ; ;   44:     writeln
( 274)                  ; ;   45: END.
( 275) 03DA 204104      ;     jsr _writeln
( 276) 03DD ABFA        ;     plx.w
( 277) 03DF 60          ;     rts
( 279)                  ; ;
( 280)                  ; ;
( 281)                  ; ;   unsigned division 16 x 16
( 282)                  ; ;
( 284)                  ; ;
( 285)                  ; _Q          .equ    5
( 286)                  ; _D          .equ    3
( 287)                  ; ;
( 288)                  ; _idiv       .proc
( 289) 03E0 A900        ;             lda #0          ; clear remainder (A)
( 290) 03E2 0B          ;             dup a           ; push
( 291) 03E3 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 292) 03E6 A010        ;             ldy #16         ; bit counter
( 293)                  ; ;
( 294)                  ; _idiv_Lp    
( 295) 03E8 18          ;             clc
( 296) 03E9 AB0A        ;             asl.w a         ; shift AQ left
( 297) 03EB 1B          ;             swp a
( 298) 03EC AB2A        ;             rol.w a
( 299)                  ; ;
( 300) 03EE B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 301)                  ; ;
( 302)                  ; _idiv_Minus
( 303) 03F0 38          ;             sec
( 304) 03F1 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 305)                  ; ;
( 306) 03F4 8004        ;             bra _idiv_Next
( 307)                  ; ;
( 308)                  ; _idiv_Plus
( 309) 03F6 18          ;             clc
( 310) 03F7 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 311)                  ; ;
( 312)                  ; _idiv_Next    
( 313) 03FA 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 314) 03FB 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 315) 03FD AB1A        ;             inc.w a
( 316)                  ; ;
( 317)                  ; _idiv_Dec
( 318) 03FF 88          ;             dey             ; loop until loop counter == 0
( 319) 0400 D0E6        ;             bne _idiv_Lp
( 320)                  ; ;
( 321)                  ; _idiv_Exit
( 322) 0402 1B          ;             swp a           ; Test remainder
( 323) 0403 AB090000    ;             ora.w #0
( 324) 0407 1004        ;             bpl _idiv_Finish
( 325) 0409 18          ;             clc
( 326) 040A CB7503      ;             adc.w 3,S
( 327)                  ; _idiv_Finish
( 328) 040D 1B          ;             swp a
( 329)                  ; ;
( 330) 040E 60          ;             rts
( 331)                  ; ;
( 333)                  ; 
( 334)                  ; ;
( 335)                  ; ; signed multiplication: 16 x 16 => 32
( 336)                  ; ;
( 338)                  ; ;
( 339)                  ; _M          .equ    5
( 340)                  ; _R          .equ    3
( 341)                  ; ;
( 342)                  ; _imul       .proc
( 343) 040F A010        ;             ldy #16             ; y = bit count
( 344) 0411 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 345) 0413 0B          ;             dup a               ; A = { 0,  0,  x}
( 346) 0414 0B          ;             dup a               ; A = { 0,  0,  0}
( 347) 0415 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 348) 0418 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 349) 041A AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 350) 041E 18          ;             clc                 ; initialize Booth recoding bit
( 351) 041F 2B          ;             rot a               ; A = {PH, PL, `R}
( 352)                  ; ;
( 353) 0420 8003        ;             bra _imul_TstB
( 354)                  ; ;
( 355)                  ; _imul_Lp
( 356) 0422 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 357) 0424 2B          ;             rot a               ; A = {PH, PL, `R}
( 358)                  ; _imul_TstB
( 359) 0425 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 360)                  ; ;
( 361)                  ; _imul_AddShft
( 362) 0427 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 363)                  ; _imul_AddM
( 364) 0429 18          ;             clc
( 365) 042A CB7505      ;             adc.w _M,S          ; PH += M
( 366) 042D 8006        ;             bra _imul_ShftP
( 367)                  ; ;
( 368)                  ; _imul_SubShft
( 369) 042F 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 370)                  ; _imul_SubM
( 371) 0431 38          ;             sec
( 372) 0432 CBF505      ;             sbc.w _M,S          ; PH -= M
( 373)                  ; ;
( 374)                  ; _imul_ShftP
( 375) 0435 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 376) 0437 2B          ;             rot a               ; A = {PL, `R, PH}
( 377) 0438 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 378) 043A 2B          ;             rot a               ; A = {`R, PH, PL}
( 379)                  ; ;
( 380)                  ; _imul_Dec
( 381) 043B 88          ;             dey
( 382) 043C D0E4        ;             bne _imul_Lp
( 383)                  ; ;
( 384)                  ; _imul_Exit
( 385) 043E 2B          ;             rot a               ; A = {PH, PL, `R}
( 386) 043F 1B          ;             swp a               ; A = {PL, PH, `R}
( 387)                  ; ;
( 388) 0440 60          ;             rts
( 389)                  ; ;
( 391)                  ; 
( 392)                  ; ;
( 393)                  ; ; put <newLine> to output
( 394)                  ; ;
( 396)                  ; ;
( 397)                  ; _newLine    .equ    0x0A
( 398)                  ; _putChar    .equ    0xF001
( 399)                  ; ;
( 400)                  ; _writeln    .proc
( 401) 0441 A90A        ;             lda #_newLine
( 402) 0443 8D01F0      ;             sta _putChar
( 403)                  ; ;
( 404) 0446 60          ;             rts
( 405)                  ; ;
( 407)                  ; ;
( 408)                  ; ; put string to output
( 409)                  ; ;
( 411)                  ; ;
( 412)                  ; _sPtrOff    .equ    7
( 413)                  ; _sLenOff    .equ    3
( 414)                  ; ;
( 415)                  ; _swrite     .proc
( 416) 0447 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 417) 044A CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 418) 044D 9B0B        ;             tai                     ; transfer sptr to IP
( 419)                  ; ;
( 420)                  ; _swrite_Lp
( 421) 044F A300        ;             lda 0,I++               ; load char from strig
( 422) 0451 8D01F0      ;             sta _putChar            ; write char to output
( 423)                  ; ;
( 424) 0454 AB88        ;             dey.w                   ; loop while string length <> 0
( 425) 0456 D0F7        ;             bne _swrite_Lp
( 426)                  ; ;
( 427) 0458 60          ;             rts
( 428)                  ; ;
( 430)                  ; ;
( 431)                  ; ; put integer to output
( 432)                  ; ;
( 434)                  ; ;
( 435)                  ; _iValOff    .equ    7               ; parameter - integer value to convert
( 436)                  ; _fLenOff    .equ    5               ; parameter - field width specifier
( 437)                  ; _iCntOff    .equ    -1              ; local variable - conversion iteration cnt.
( 438)                  ; ;
( 439)                  ; _iwrite     .proc
( 440) 0459 ABDA        ;             phx.w                   ; save current base pointer
( 441) 045B ABBA        ;             tsx.w                   ; assign new base pointer
( 442)                  ; ;
( 443) 045D B505        ;             lda _fLenOff,X          ; load field width specifier
( 444) 045F C905        ;             cmp #5                  ; compare against max integer digit count
( 445) 0461 AB3002      ;             ble _iwrite_SetCnt
( 446) 0464 A905        ;             lda #5
( 447)                  ; ;
( 448)                  ; _iwrite_SetCnt
( 449) 0466 AB48        ;             pha.w                   ; set iteration count to fld width
( 450) 0468 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 451)                  ; ;
( 452)                  ; _iwrite_Lp
( 453) 046B AB48        ;             pha.w                   ; push dividend argument to _idiv
( 454) 046D ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 455) 0471 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 456) 0475 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 457) 0477 1B          ;             swp a                   ; put the remainder into ATOS
( 458)                  ; ;
( 459) 0478 18          ;             clc                     ; convert remainder into ASCII character
( 460) 0479 6930        ;             adc #48
( 461) 047B 48          ;             pha                     ; push LS digit of integer onto stack
( 462)                  ; ;
( 463) 047C 2B          ;             rot a                   ; rotate quotient into ATOS position
( 464)                  ; ;
( 465) 047D ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 466) 0480 D0E9        ;             bne _iwrite_Lp
( 467)                  ; ;-------------------------------------------------------------------------------
( 468) 0482 0B          ;             dup a                   ; save integer part of the conversion
( 469)                  ; ;-------------------------------------------------------------------------------
( 470)                  ; _iwrite_Fill
( 471) 0483 B505        ;             lda _fLenOff,X          ; load field width specifier
( 472) 0485 C905        ;             cmp #5                  ; compare against max integer digit count
( 473) 0487 AB300A      ;             ble _iwrite_GenPtr
( 474) 048A 38          ;             sec                     ; subtract max integer length from fld len
( 475) 048B E905        ;             sbc #5
( 476) 048D A8          ;             tay                     ; set difference as loop counter
( 477) 048E A930        ;             lda #48                 ; fill remaining field with '0'
( 478)                  ; ;
( 479)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
( 480) 0490 48          ;             pha
( 481) 0491 88          ;             dey
( 482) 0492 D0FC        ;             bne _iwrite_Fill_Lp
( 483)                  ; ;-------------------------------------------------------------------------------
( 484)                  ; _iwrite_GenPtr
( 485) 0494 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 486) 0497 AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 487) 0499 AB48        ;             pha.w                   ; push string pointer to stack
( 488)                  ; ;-------------------------------------------------------------------------------
( 489) 049B 2B          ;             rot a                   ; restore integer part of the conversion
( 490)                  ; ;-------------------------------------------------------------------------------
( 491) 049C ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 492) 04A0 F00F        ;             beq _iwrite_Sup0
( 493) 04A2 A000        ;             ldy #0
( 494)                  ; _iwrite_ErrLp
( 495) 04A4 A92A        ;             lda #0x2A               ; fill integer field with '*'
( 496) 04A6 8B9101      ;             sta (1,S),Y
( 497) 04A9 C8          ;             iny
( 498) 04AA FBD505      ;             cmp.y _fLenOff,X
( 499) 04AD D0F5        ;             bne _iwrite_ErrLp
( 500) 04AF 8021        ;             bra _iwrite_Exit
( 501)                  ; ;-------------------------------------------------------------------------------
( 502)                  ; _iwrite_Sup0
( 503) 04B1 A901        ;             lda #1                  ; load A w/ minimum field width
( 504) 04B3 ABD505      ;             cmp.w _fLenOff,X        ; compare with field width specifier on stk.
( 505) 04B6 F01A        ;             beq _iwrite_Exit        ; don't suppress zero (0) for 1 char fields
( 506) 04B8 ABD605      ;             dec.w _fLenOff,X        ; decrement field width specifier
( 507) 04BB A000        ;             ldy #0                  ; initialize string index
( 508)                  ; _iwrite_Sup0_Lp
( 509) 04BD 8BB101      ;             lda (1,S),Y
( 510) 04C0 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 511) 04C2 D00B        ;             bne _iwrite_Sup0_Exit   ; exit loop on first non-0 digit
( 512) 04C4 A920        ;             lda #32                 ; replace leading 0 with ' '
( 513) 04C6 8B9101      ;             sta (1,S),Y
( 514) 04C9 C8          ;             iny                     ; increment string index and compare to fLen
( 515) 04CA FBD505      ;             cmp.y _fLenOff,X
( 516) 04CD D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 517)                  ; _iwrite_Sup0_Exit
( 518) 04CF ABF605      ;             inc.w _fLenOff,X        ;
( 519)                  ; ;-------------------------------------------------------------------------------
( 520)                  ; _iwrite_Exit
( 521) 04D2 ABE20000    ;             psh.w #0                ; NULL argument
( 522) 04D6 B505        ;             lda _fLenOff,X          ; load field width specifier
( 523) 04D8 AB48        ;             pha.w                   ; push field width specifier
( 524) 04DA 9B5C69FF    ;             csr _swrite             ; write integer value string using _swrite()
( 525) 04DE C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 526)                  ; ;
( 527) 04E0 AB9A        ;             txs.w                   ; deallocate stack variables
( 528) 04E2 ABFA        ;             plx.w                   ; restore previous base pointer
( 529) 04E4 60          ;             rts
( 530)                  ; ;
( 532)                  ; ;
( 534)                  ; 
( 535) 04E5 2A2A2A2A    ; S_018 .str "****************************************************************"
       04E9 2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A
       0509 2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A
( 536) 0525 5D203D20    ; S_017 .str "] = "
( 537) 0529 4669625B    ; S_016 .str "Fib["
( 538) 052D 00          ; _bss_start .byt 0
( 539) 052E 0000        ; i_002 .wrd 0
( 540) 0530 0000        ; j_003 .wrd 0
( 541) 0532 00000000    ; fn_004 .byt 0[48]
       0536 0000000000000000000000000000000000000000000000000000000000000000
       0556 000000000000000000000000
( 542) 0562 00          ; _bss_end .byt 0
( 543) 0563 00000000    ; _stk .byt 0[1023]
       0567 0000000000000000000000000000000000000000000000000000000000000000
       0587 0000000000000000000000000000000000000000000000000000000000000000
       05A7 0000000000000000000000000000000000000000000000000000000000000000
       05C7 0000000000000000000000000000000000000000000000000000000000000000
       05E7 0000000000000000000000000000000000000000000000000000000000000000
       0607 0000000000000000000000000000000000000000000000000000000000000000
       0627 0000000000000000000000000000000000000000000000000000000000000000
       0647 0000000000000000000000000000000000000000000000000000000000000000
       0667 0000000000000000000000000000000000000000000000000000000000000000
       0687 0000000000000000000000000000000000000000000000000000000000000000
       06A7 0000000000000000000000000000000000000000000000000000000000000000
       06C7 0000000000000000000000000000000000000000000000000000000000000000
       06E7 0000000000000000000000000000000000000000000000000000000000000000
       0707 0000000000000000000000000000000000000000000000000000000000000000
       0727 0000000000000000000000000000000000000000000000000000000000000000
       0747 0000000000000000000000000000000000000000000000000000000000000000
       0767 0000000000000000000000000000000000000000000000000000000000000000
       0787 0000000000000000000000000000000000000000000000000000000000000000
       07A7 0000000000000000000000000000000000000000000000000000000000000000
       07C7 0000000000000000000000000000000000000000000000000000000000000000
       07E7 0000000000000000000000000000000000000000000000000000000000000000
       0807 0000000000000000000000000000000000000000000000000000000000000000
       0827 0000000000000000000000000000000000000000000000000000000000000000
       0847 0000000000000000000000000000000000000000000000000000000000000000
       0867 0000000000000000000000000000000000000000000000000000000000000000
       0887 0000000000000000000000000000000000000000000000000000000000000000
       08A7 0000000000000000000000000000000000000000000000000000000000000000
       08C7 0000000000000000000000000000000000000000000000000000000000000000
       08E7 0000000000000000000000000000000000000000000000000000000000000000
       0907 0000000000000000000000000000000000000000000000000000000000000000
       0927 0000000000000000000000000000000000000000000000000000000000000000
       0947 000000000000000000000000000000000000000000000000000000
( 544) 0962 FF          ; _stk_top .byt -1
( 545)                  ; 
