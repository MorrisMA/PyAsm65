   2 	.stk 1024
   3 	.cod 512
   4 STATIC_LINK .equ +5
   5 RETURN_VALUE .equ -3
   6 HIGH_RETURN_VALUE .equ -1
   7 _start
   8 	phx.w           ; Preserve current X register TOS
   9 	tsx.w		    ; Preserve original stack pointer
  10 	lds.w #_stk_top	; Initialize program stack pointer
  11 	stz _bss_start
  12 	ldx.w #_bss_start
  13 	ldy.w #_bss_start+1
  14 	lda.w #_stk_top
  15 	sec
  16 	sbc.w #_bss_start
  17 	mov #10
  18 	jmp _pc65_main
  28 _pc65_main .sub
  29 	phx.w
  30 	tsx.w
  32 	lda.w #1000
  33 	pha.w
  34 	lda #2
  35 	pha.w
  36 	jsr _idiv
  37 	adj #4
  38 	sta.w limit_005
  40 	psh.w #sieve_002
  41 	lda #1
  42 	dec.w a
  43 	asl.w a
  44 	clc
  45 	adc.w 1,S
  46 	sta.w 1,S
  47 	lda #0
  48 	pli.s
  49 	sta.w 0,I++
  52 	lda #2
  53 	sta.w i_003
  54 L_008
  55 	lda.w #1000
  56 	cmp.w i_003
  57 	bge L_009
  58 	jmp L_010
  59 L_009
  61 	psh.w #sieve_002
  62 	lda.w i_003
  63 	dec.w a
  64 	asl.w a
  65 	clc
  66 	adc.w 1,S
  67 	sta.w 1,S
  68 	lda #1
  69 	pli.s
  70 	sta.w 0,I++
  71 	inc.w i_003
  72 	jmp L_008
  73 L_010
  74 	dec.w i_003
  77 	lda #1
  78 	sta.w prime_006
  81 L_011
  83 	lda.w prime_006
  84 	pha.w
  85 	lda #1
  86 	clc
  87 	adc.w 1,S
  88 	adj #2
  89 	sta.w prime_006
  91 L_013
  92 	psh.w #sieve_002
  93 	lda.w prime_006
  94 	dec.w a
  95 	asl.w a
  96 	clc
  97 	adc.w 1,S
  98 	sta.w 1,S
  99 	pli.s
 100 	lda.w 0,I++
 101 	eor #1
 102 	cmp.w #1
 103 	beq L_014
 104 	jmp L_015
 105 L_014
 107 	lda.w prime_006
 108 	pha.w
 109 	lda #1
 110 	clc
 111 	adc.w 1,S
 112 	adj #2
 113 	sta.w prime_006
 114 	jmp L_013
 115 L_015
 118 	lda #2
 119 	pha.w
 120 	lda.w prime_006
 121 	pha.w
 122 	jsr _imul
 123 	adj #4
 124 	sta.w factor_007
 127 L_016
 128 	lda.w factor_007
 129 	pha.w
 130 	lda.w #1000
 131 	xma.w 1,S
 132 	cmp.w 1,S
 133 	adj #2
 134 	php
 135 	lda #1
 136 	plp
 137 	ble L_019
 138 	lda #0
 139 L_019
 140 	cmp.w #1
 141 	beq L_017
 142 	jmp L_018
 143 L_017
 145 	psh.w #sieve_002
 146 	lda.w factor_007
 147 	dec.w a
 148 	asl.w a
 149 	clc
 150 	adc.w 1,S
 151 	sta.w 1,S
 152 	lda #0
 153 	pli.s
 154 	sta.w 0,I++
 156 	lda.w factor_007
 157 	pha.w
 158 	lda.w prime_006
 159 	clc
 160 	adc.w 1,S
 161 	adj #2
 162 	sta.w factor_007
 165 	jmp L_016
 166 L_018
 167 	lda.w prime_006
 168 	pha.w
 169 	lda.w limit_005
 170 	xma.w 1,S
 171 	cmp.w 1,S
 172 	adj #2
 173 	php
 174 	lda #1
 175 	plp
 176 	bgt L_020
 177 	lda #0
 178 L_020
 179 	cmp.w #1
 180 	beq L_012
 181 	jmp L_011
 182 L_012
 185 	psh.w #S_021
 186 	psh.w #0
 187 	psh.w #21
 188 	jsr _swrite
 189 	adj #6
 190 	jsr _writeln
 192 	jsr _writeln
 195 	lda #1
 196 	sta.w i_003
 198 L_022
 200 	lda #0
 201 	sta.w j_004
 202 L_024
 203 	lda #19
 204 	cmp.w j_004
 205 	bge L_025
 206 	jmp L_026
 207 L_025
 209 	lda.w i_003
 210 	pha.w
 211 	lda.w j_004
 212 	clc
 213 	adc.w 1,S
 214 	adj #2
 215 	sta.w prime_006
 217 	psh.w #sieve_002
 218 	lda.w prime_006
 219 	dec.w a
 220 	asl.w a
 221 	clc
 222 	adc.w 1,S
 223 	sta.w 1,S
 224 	pli.s
 225 	lda.w 0,I++
 226 	cmp.w #1
 227 	beq L_027
 228 	jmp L_028
 229 L_027
 231 	lda.w prime_006
 232 	pha.w
 233 	lda #3
 234 	pha.w
 235 	jsr _iwrite
 236 	adj #4
 238 	jmp L_029
 239 L_028
 241 	psh.w #S_030
 242 	psh.w #0
 243 	psh.w #3
 244 	jsr _swrite
 245 	adj #6
 246 L_029
 248 	inc.w j_004
 249 	jmp L_024
 250 L_026
 251 	dec.w j_004
 253 	jsr _writeln
 255 	lda.w i_003
 256 	pha.w
 257 	lda #20
 259 	clc
 260 	adc.w 1,S
 261 	adj #2
 262 	sta.w i_003
 263 	lda.w i_003
 264 	pha.w
 266 	lda.w #1000
 267 	xma.w 1,S
 268 	cmp.w 1,S
 269 	adj #2
 270 	php
 271 	lda #1
 272 	plp
 273 	bgt L_031
 274 	lda #0
 275 L_031
 276 	cmp.w #1
 277 	beq L_023
 278 	jmp L_022
 279 L_023
 280 	plx.w
 281 	rts
 282 	.end _pc65_main
 286 			.cod
 288 _Q          .equ    5
 289 _D          .equ    3
 291 _idiv       .proc
 292 			lda #0          ; clear remainder (A)
 293 			dup a           ; push
 294 			lda.w _Q,S      ; load dividend (Q)
 295 			ldy #16         ; bit counter
 297 _idiv_Lp
 298 			clc
 299 			asl.w a         ; shift AQ left
 300 			swp a
 301 			rol.w a
 303 			bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
 305 _idiv_Minus
 306 			sec
 307 			sbc.w _D,S      ; subtract divisor (D)
 309 			bra _idiv_Next
 311 _idiv_Plus
 312 			clc
 313 			adc.w _D,S      ; add divisor (D)
 315 _idiv_Next
 316 			swp a           ; restore order of Acc stack {Q, A, -}
 317 			bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
 318 			inc.w a
 320 _idiv_Dec
 321 			dey             ; loop until loop counter == 0
 322 			bne _idiv_Lp
 324 _idiv_Exit
 325 			swp a           ; Test remainder
 326 			ora.w #0
 327 			bpl _idiv_Finish
 328 			clc
 329 			adc.w 3,S
 330 _idiv_Finish
 331 			swp a
 333 			rts
 335 			.endp _idiv
 339 			.cod
 341 _M          .equ    5
 342 _R          .equ    3
 344 _imul       .proc
 345 			ldy #16             ; y = bit count
 346 			lda #0              ; A = { 0,  x,  x} - clear product
 347 			dup a               ; A = { 0,  0,  x}
 348 			dup a               ; A = { 0,  0,  0}
 349 			lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
 350 			rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
 351 			ora.w #0            ; set N flag if msb ATOS == 1
 352 			clc                 ; initialize Booth recoding bit
 353 			rot a               ; A = {PH, PL, `R}
 355 			bra _imul_TstB
 357 _imul_Lp
 358 			asl.w a             ; A = {`R << 1, PH, PL}
 359 			rot a               ; A = {PH, PL, `R}
 360 _imul_TstB
 361 			bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
 363 _imul_AddShft
 364 			bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
 365 _imul_AddM
 366 			clc
 367 			adc.w _M,S          ; PH += M
 368 			bra _imul_ShftP
 370 _imul_SubShft
 371 			bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
 372 _imul_SubM
 373 			sec
 374 			sbc.w _M,S          ; PH -= M
 376 _imul_ShftP
 377 			asr.w a             ; A = {PH >> 1, PL, `R}
 378 			rot a               ; A = {PL, `R, PH}
 379 			ror.w a             ; A = {PL >> 2, `R, PH}
 380 			rot a               ; A = {`R, PH, PL}
 382 _imul_Dec
 383 			dey
 384 			bne _imul_Lp
 386 _imul_Exit
 387 			rot a               ; A = {PH, PL, `R}
 388 			swp a               ; A = {PL, PH, `R}
 390 			rts
 392 			.endp _imul
 397 			.cod
 399 _newLine    .equ    0x0A
 400 _putChar    .equ    0xF001
 402 _writeln    .proc
 403 			lda #_newLine
 404 			sta _putChar
 406 			rts
 408 			.endp _writeln
 412 			.cod
 414 _sPtrOff    .equ    7
 415 _sLenOff    .equ    3
 417 _swrite     .proc
 418 			ldy.w _sLenOff,S        ; load string length
 419 			lda.w _sPtrOff,S        ; load string pointer
 420 			tai                     ; transfer sptr to IP
 422 _swrite_Lp
 423 			lda 0,I++               ; load char from strig
 424 			sta _putChar            ; write char to output
 426 			dey.w                   ; loop while string length <> 0
 427 			bne _swrite_Lp
 429 			rts
 431 			.endp _swrite
 435 			.cod
 437 _iValOff    .equ    7
 438 _fLenOff    .equ    5
 439 _iCntOff    .equ    -1
 441 _iwrite     .proc
 442 			phx.w                   ; save current base pointer
 443 			tsx.w                   ; assign new base pointer
 445 			lda _fLenOff,X          ; load field width specifier
 446 			cmp #5                  ; compare against max integer digit count
 447 			ble _iwrite_SetCnt
 448 			lda #5
 450 _iwrite_SetCnt
 451 			pha.w                   ; set iteration count to fld width
 452 			lda.w _iValOff,X        ; load a with integer value
 454 _iwrite_Lp
 455 			pha.w                   ; push dividend argument to _idiv
 456 			psh.w #10               ; push divisor argument to _idiv
 457 			csr _idiv               ; determine the remainder,
 458 			adj #4                  ; remove arguments passed to _idiv from stk
 459 			swp a                   ; put the remainder into ATOS
 461 			clc                     ; convert remainder into ASCII character
 462 			adc #48
 463 			pha                     ; push LS digit of integer onto stack
 465 			rot a                   ; rotate quotient into ATOS position
 467 			dec.w _iCntOff,X        ; decrement digit iteration count
 468 			bne _iwrite_Lp
 470 			dup a                   ; save integer part of the conversion
 472 _iwrite_Fill
 473 			lda _fLenOff,X          ; load field width specifier
 474 			cmp #5                  ; compare against max integer digit count
 475 			ble _iwrite_GenPtr
 476 			sec                     ; subtract max integer length from fld len
 477 			sbc #5
 478 			tay                     ; set difference as loop counter
 479 			lda #48                 ; fill remaining field with '0'
 481 _iwrite_Fill_Lp                     ; increase string on stack with fill data
 482 			pha
 483 			dey
 484 			bne _iwrite_Fill_Lp
 486 _iwrite_GenPtr
 487 			tsa.w                   ; transfer current stk pointer to A
 488 			inc.w a                 ; remove stack pointer write bias
 489 			pha.w                   ; push string pointer to stack
 491 			rot a                   ; restore integer part of the conversion
 493 			cmp.w #0                ; test for 0. If not 0, int > 10^fld
 494 			beq _iwrite_Sup0
 495 			ldy #0
 496 _iwrite_ErrLp
 497 			lda #0x2A               ; fill integer field with '*'
 498 			sta (1,S),Y
 499 			iny
 500 			cmp.y _fLenOff,X
 501 			bne _iwrite_ErrLp
 502 			bra _iwrite_Exit
 504 _iwrite_Sup0
 505 			ldy #0                  ; initialize string index
 506 _iwrite_Sup0_Lp
 507 			lda (1,S),Y
 508 			cmp #48                 ; if leading position == 0, replace with ' '
 509 			bne _iwrite_Exit        ; exit loop on first non-0 digit
 510 			lda #32                 ; replace leading 0 with ' '
 511 			sta (1,S),Y
 512 			iny                     ; increment string index and compare to fLen
 513 			cmp.y _fLenOff,X
 514 			bne _iwrite_Sup0_Lp     ; loop until Y == fLen
 516 _iwrite_Exit
 517 			psh.w #0                ; NULL argument
 518 			lda _fLenOff,X          ; push field width specifier
 519 			pha.w
 520 			csr _swrite             ; write integer value string using _swrite()
 521 			adj #6                  ; remove parameters to _swrite() from stack
 523 			txs.w                   ; deallocate stack variables
 524 			plx.w                   ; restore previous base pointer
 525 			rts
 527 			.endp _iwrite
 529 	.dat
 531 S_030 .str "   "
 532 S_021 .str "Sieve of Eratosthenes"
 533 _bss_start .byt 85
 534 sieve_002 .byt 0[2000]
 535 i_003 .wrd 0
 536 j_004 .wrd 0
 537 limit_005 .wrd 0
 538 prime_006 .wrd 0
 539 factor_007 .wrd 0
 540 _bss_end .byt 85
 541 _stk .byt 0[1023]
 542 _stk_top .byt 0
 544 	.end
