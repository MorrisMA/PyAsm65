(   1)                  ; ;    1: PROGRAM WolfIsland (input, output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA2E81A    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9CCF14      ; 	stz _bss_start
(  11) 0209 ABA2CF14    ; 	ldx.w #_bss_start
(  12) 020D ABA0D014    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9E81A    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE9CF14    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4CA812      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: {   Wolf Island is a simulation of a 9 x 9 island of wolves and rabbits.
(  20)                  ; ;    4:     The wolves eat rabbits, and the rabbits eat grass.  Their initial
(  21)                  ; ;    5:     locations are:
(  22)                  ; ;    6: 
(  23)                  ; ;    7:             . . . . . . . . .
(  24)                  ; ;    8:             . W . . . . . W .
(  25)                  ; ;    9:             . . . . . . . . .
(  26)                  ; ;   10:             . . . r r r . . .
(  27)                  ; ;   11:             . . . r r r . . .
(  28)                  ; ;   12:             . . . r r r . . .
(  29)                  ; ;   13:             . . . . . . . . .
(  30)                  ; ;   14:             . W . . . . . W .
(  31)                  ; ;   15:             . . . . . . . . .
(  32)                  ; ;   16: 
(  33)                  ; ;   17:     A wolf or rabbit can move up, down, left, or right into an adjacent
(  34)                  ; ;   18:     location.  Diagonal moves are not allowed.
(  35)                  ; ;   19: 
(  36)                  ; ;   20:     Time is measured in discrete time units.  Wolves reproduce every
(  37)                  ; ;   21:     12 time units, and rabbits every 5 units.  An animal reproduces
(  38)                  ; ;   22:     by splitting into two.
(  39)                  ; ;   23: 
(  40)                  ; ;   24:     Each wolf starts out with 6 food units and loses 1 every time unit.
(  41)                  ; ;   25:     A wolf gains 6 food units by eating a rabbit.  It starves to death
(  42)                  ; ;   26:     if it reaches 0 food units.  Since there's always enough grass to
(  43)                  ; ;   27:     eat, rabbits don't worry about food units.
(  44)                  ; ;   28: 
(  45)                  ; ;   29:     The order of events from time unit T-1 to T is:
(  46)                  ; ;   30: 
(  47)                  ; ;   31:     (1) For each wolf:
(  48)                  ; ;   32: 
(  49)                  ; ;   33:     Lose a food unit.  Die if 0 food units and remove.
(  50)                  ; ;   34: 
(  51)                  ; ;   35:     Eat a rabbit if there is one in an adjacent location by moving
(  52)                  ; ;   36:     into the rabbit's location.  Increase the wolf's food units
(  53)                  ; ;   37:     by 6 and remove the rabbit.
(  54)                  ; ;   38: 
(  55)                  ; ;   39:     Otherwise, randomly choose to move into an adjacent empty
(  56)                  ; ;   40:     location, or stay put.
(  57)                  ; ;   41: 
(  58)                  ; ;   42:     If wolf reproduction time (T = 12,24,36,...), split and leave
(  59)                  ; ;   43:     behind an offspring in the previous location.  Each split wolf
(  60)                  ; ;   44:     has half (DIV 2) the food units.  If there was no move, the
(  61)                  ; ;   45:     baby was stillborn, but the food units are still halved.
(  62)                  ; ;   46: 
(  63)                  ; ;   47:     (2) For each rabbit:
(  64)                  ; ;   48: 
(  65)                  ; ;   49:     Randomly choose to move into an adjacent empty, or stay put.
(  66)                  ; ;   50: 
(  67)                  ; ;   51:     If rabbit reproduction time (T = 5,10,15,...), split and leave
(  68)                  ; ;   52:     behind an offspring in the previous location.  If there was no
(  69)                  ; ;   53:     move, the baby was stillborn.
(  70)                  ; ;   54: 
(  71)                  ; ;   55:     The simulation ends when all the wolves are dead or all the
(  72)                  ; ;   56:     rabbits are eaten.
(  73)                  ; ;   57: 
(  74)                  ; ;   58:     The island is printed at times T = 0,1,2,3,4,5,6,7,8,9,10,
(  75)                  ; ;   59:     15,20,25,30,...,80.  A message is printed whenever a wolf is
(  76)                  ; ;   60:     born or dies, and whenever a rabbit is born or is eaten.
(  77)                  ; ;   61: }
(  78)                  ; ;   62: 
(  79)                  ; ;   63: CONST
(  80)                  ; ;   64:     size            = 9;    {size of island}
(  81)                  ; ;   65:     max             = 10;       {size plus border}
(  82)                  ; ;   66:     wolfreprotime   = 12;       {wolf reproduction period}
(  83)                  ; ;   67:     rabbitreprotime = 5;        {rabbit reproduction period}
(  84)                  ; ;   68:     rabbitfoodunits = 6;        {rabbit food unit worth to wolf}
(  85)                  ; ;   69:     initfoodunits   = 6;        {wolf's initial food units}
(  86)                  ; ;   70:     maxprinttimes   = 50;       {max. no. times to print island}
(  87)                  ; ;   71: 
(  88)                  ; ;   72: TYPE
(  89)                  ; ;   73:     posint   = 0..32767;
(  90)                  ; ;   74:     index    = 0..max;          {index range of island matrix}
(  91)                  ; ;   75: 
(  92)                  ; ;   76:     contents = (wolf, rabbit, newwolf, newrabbit, empty, border);
(  93)                  ; ;   77:     {Contents each each island location.  Each time a wolf or
(  94)                  ; ;   78:      rabbit moves, newwolf or newrabbit is initially placed in
(  95)                  ; ;   79:      the new location.  This prevents a wolf or rabbit from
(  96)                  ; ;   80:      being processed again in its new location during the same
(  97)                  ; ;   81:      time period.}
(  98)                  ; ;   82: 
(  99)                  ; ;   83: VAR
( 100)                  ; ;   84:     island     : ARRAY [index, index] OF contents;
( 101)                  ; ;   85:                 {Wolf Island with border}
( 102)                  ; ;   86:     foodunits  : ARRAY [1..size, 1..size] OF posint;
( 103)                  ; ;   87:                 {wolves' food unit matrix}
( 104)                  ; ;   88:     printtimes : ARRAY [1..maxprinttimes] OF posint;
( 105)                  ; ;   89:                 {times to print island}
( 106)                  ; ;   90: 
( 107)                  ; ;   91:     numwolves, numrabbits : posint; {no. of wolves and rabbits}
( 108)                  ; ;   92:     numprinttimes         : posint;     {no. of print times}
( 109)                  ; ;   93:     t                 : posint;     {time}
( 110)                  ; ;   94:     xpt  : 1..maxprinttimes;        {print times index}
( 111)                  ; ;   95:     seed : posint;                  {random number seed}
( 112)                  ; ;   96: 
( 113)                  ; ;   97:     rowoffset : ARRAY [0..4] OF -1..+1;
( 114)                  ; ;   98:     coloffset : ARRAY [0..4] OF -1..+1;
( 115)                  ; ;   99:     {Row and column offsets.  When added to the current row and
( 116)                  ; ;  100:      column of a wolf's or rabbit's location, gives the row and
( 117)                  ; ;  101:      column of the same or an adjacent location.}
( 118)                  ; ;  102: 
( 119)                  ; ;  103: 
( 120)                  ; ;  104: PROCEDURE Initialize;
( 121)                  ; ;  105: 
( 122)                  ; ;  106:     {Initialize all arrays.}
( 123)                  ; ;  107: 
( 124)                  ; ;  108:     VAR
( 125)                  ; ;  109:     i        : posint;
( 126)                  ; ;  110:     row, col : index;
( 127)                  ; ;  111: 
( 128)                  ; ;  112:     BEGIN
( 129)                  ; i_014 .equ -1
( 130)                  ; row_015 .equ -3
( 131)                  ; col_016 .equ -5
( 132)                  ; initialize_013 .sub
( 133) 021F ABDA        ; 	phx.w
( 134) 0221 ABBA        ; 	tsx.w
( 135) 0223 C2FA        ; 	adj #-6
( 136)                  ; ;  113: 
( 137)                  ; ;  114:     {Initialize the island and wolf food matrices.}
( 138)                  ; ;  115:     FOR i := 0 TO max DO BEGIN
( 139)                  ; 	lda #0
( 140) 0225 AB74FF      ; 	stz.w i_014,X
( 141)                  ; L_017
( 142) 0228 A90A        ; 	lda #10
( 143) 022A ABD5FF      ; 	cmp.w i_014,X
( 144) 022D AB5003      ; 	bge L_018
( 145) 0230 4CE502      ; 	jmp L_019
( 146)                  ; L_018
( 147)                  ; ;  116:         island[0,   i] := border;
( 148) 0233 ABE2D014    ; 	psh.w #island_002
( 149)                  ; 	lda #0
( 150) 0237 ABE20000    ; 	psh.w #0
( 151) 023B ABE21600    ; 	psh.w #22
( 152) 023F 20A813      ; 	jsr _imul
( 153) 0242 C204        ; 	adj #4
( 154) 0244 18          ; 	clc
( 155) 0245 CB7501      ; 	adc.w 1,S
( 156) 0248 CB9501      ; 	sta.w 1,S
( 157) 024B ABB5FF      ; 	lda.w i_014,X
( 158) 024E AB0A        ; 	asl.w a
( 159) 0250 18          ; 	clc
( 160) 0251 CB7501      ; 	adc.w 1,S
( 161) 0254 CB9501      ; 	sta.w 1,S
( 162) 0257 A905        ; 	lda #5
( 163) 0259 8B6B        ; 	pli.s
( 164) 025B AB8300      ; 	sta.w 0,I++
( 165)                  ; ;  117:         island[max, i] := border;
( 166) 025E ABE2D014    ; 	psh.w #island_002
( 167)                  ; 	lda #10
( 168) 0262 ABE20A00    ; 	psh.w #10
( 169) 0266 ABE21600    ; 	psh.w #22
( 170) 026A 20A813      ; 	jsr _imul
( 171) 026D C204        ; 	adj #4
( 172) 026F 18          ; 	clc
( 173) 0270 CB7501      ; 	adc.w 1,S
( 174) 0273 CB9501      ; 	sta.w 1,S
( 175) 0276 ABB5FF      ; 	lda.w i_014,X
( 176) 0279 AB0A        ; 	asl.w a
( 177) 027B 18          ; 	clc
( 178) 027C CB7501      ; 	adc.w 1,S
( 179) 027F CB9501      ; 	sta.w 1,S
( 180) 0282 A905        ; 	lda #5
( 181) 0284 8B6B        ; 	pli.s
( 182) 0286 AB8300      ; 	sta.w 0,I++
( 183)                  ; ;  118:         island[i, 0]   := border;
( 184) 0289 ABE2D014    ; 	psh.w #island_002
( 185) 028D ABB5FF      ; 	lda.w i_014,X
( 186) 0290 AB48        ; 	pha.w
( 187) 0292 ABE21600    ; 	psh.w #22
( 188) 0296 20A813      ; 	jsr _imul
( 189) 0299 C204        ; 	adj #4
( 190) 029B 18          ; 	clc
( 191) 029C CB7501      ; 	adc.w 1,S
( 192) 029F CB9501      ; 	sta.w 1,S
( 193) 02A2 A900        ; 	lda #0
( 194) 02A4 AB0A        ; 	asl.w a
( 195) 02A6 18          ; 	clc
( 196) 02A7 CB7501      ; 	adc.w 1,S
( 197) 02AA CB9501      ; 	sta.w 1,S
( 198) 02AD A905        ; 	lda #5
( 199) 02AF 8B6B        ; 	pli.s
( 200) 02B1 AB8300      ; 	sta.w 0,I++
( 201)                  ; ;  119:         island[i, max] := border;
( 202) 02B4 ABE2D014    ; 	psh.w #island_002
( 203) 02B8 ABB5FF      ; 	lda.w i_014,X
( 204) 02BB AB48        ; 	pha.w
( 205) 02BD ABE21600    ; 	psh.w #22
( 206) 02C1 20A813      ; 	jsr _imul
( 207) 02C4 C204        ; 	adj #4
( 208) 02C6 18          ; 	clc
( 209) 02C7 CB7501      ; 	adc.w 1,S
( 210) 02CA CB9501      ; 	sta.w 1,S
( 211) 02CD A90A        ; 	lda #10
( 212) 02CF AB0A        ; 	asl.w a
( 213) 02D1 18          ; 	clc
( 214) 02D2 CB7501      ; 	adc.w 1,S
( 215) 02D5 CB9501      ; 	sta.w 1,S
( 216) 02D8 A905        ; 	lda #5
( 217) 02DA 8B6B        ; 	pli.s
( 218) 02DC AB8300      ; 	sta.w 0,I++
( 219)                  ; ;  120:     END;
( 220) 02DF ABF6FF      ; 	inc.w i_014,X
( 221) 02E2 4C2802      ; 	jmp L_017
( 222)                  ; L_019
( 223) 02E5 ABD6FF      ; 	dec.w i_014,X
( 224)                  ; ;  121:     FOR row := 1 TO size DO BEGIN
( 225) 02E8 A901        ; 	lda #1
( 226) 02EA AB95FD      ; 	sta.w row_015,X
( 227)                  ; L_020
( 228) 02ED A909        ; 	lda #9
( 229) 02EF ABD5FD      ; 	cmp.w row_015,X
( 230) 02F2 AB5003      ; 	bge L_021
( 231) 02F5 4C7303      ; 	jmp L_022
( 232)                  ; L_021
( 233)                  ; ;  122:         FOR col := 1 TO size DO BEGIN
( 234) 02F8 A901        ; 	lda #1
( 235) 02FA AB95FB      ; 	sta.w col_016,X
( 236)                  ; L_023
( 237) 02FD A909        ; 	lda #9
( 238) 02FF ABD5FB      ; 	cmp.w col_016,X
( 239) 0302 AB5003      ; 	bge L_024
( 240) 0305 4C6A03      ; 	jmp L_025
( 241)                  ; L_024
( 242)                  ; ;  123:         island[row, col]    := empty;
( 243) 0308 ABE2D014    ; 	psh.w #island_002
( 244) 030C ABB5FD      ; 	lda.w row_015,X
( 245) 030F AB48        ; 	pha.w
( 246) 0311 ABE21600    ; 	psh.w #22
( 247) 0315 20A813      ; 	jsr _imul
( 248) 0318 C204        ; 	adj #4
( 249) 031A 18          ; 	clc
( 250) 031B CB7501      ; 	adc.w 1,S
( 251) 031E CB9501      ; 	sta.w 1,S
( 252) 0321 ABB5FB      ; 	lda.w col_016,X
( 253) 0324 AB0A        ; 	asl.w a
( 254) 0326 18          ; 	clc
( 255) 0327 CB7501      ; 	adc.w 1,S
( 256) 032A CB9501      ; 	sta.w 1,S
( 257) 032D A904        ; 	lda #4
( 258) 032F 8B6B        ; 	pli.s
( 259) 0331 AB8300      ; 	sta.w 0,I++
( 260)                  ; ;  124:         foodunits[row, col] := 0;
( 261) 0334 ABE2C215    ; 	psh.w #foodunits_003
( 262) 0338 ABB5FD      ; 	lda.w row_015,X
( 263) 033B AB3A        ; 	dec.w a
( 264) 033D AB48        ; 	pha.w
( 265) 033F ABE21200    ; 	psh.w #18
( 266) 0343 20A813      ; 	jsr _imul
( 267) 0346 C204        ; 	adj #4
( 268) 0348 18          ; 	clc
( 269) 0349 CB7501      ; 	adc.w 1,S
( 270) 034C CB9501      ; 	sta.w 1,S
( 271) 034F ABB5FB      ; 	lda.w col_016,X
( 272) 0352 AB3A        ; 	dec.w a
( 273) 0354 AB0A        ; 	asl.w a
( 274) 0356 18          ; 	clc
( 275) 0357 CB7501      ; 	adc.w 1,S
( 276) 035A CB9501      ; 	sta.w 1,S
( 277) 035D A900        ; 	lda #0
( 278) 035F 8B6B        ; 	pli.s
( 279) 0361 AB8300      ; 	sta.w 0,I++
( 280)                  ; ;  125:         END;
( 281) 0364 ABF6FB      ; 	inc.w col_016,X
( 282) 0367 4CFD02      ; 	jmp L_023
( 283)                  ; L_025
( 284) 036A ABD6FB      ; 	dec.w col_016,X
( 285)                  ; ;  126:     END;
( 286) 036D ABF6FD      ; 	inc.w row_015,X
( 287) 0370 4CED02      ; 	jmp L_020
( 288)                  ; L_022
( 289) 0373 ABD6FD      ; 	dec.w row_015,X
( 290)                  ; ;  127: 
( 291)                  ; ;  128:     {Place wolves on the island.}
( 292)                  ; ;  129:     read(numwolves);
( 293) 0376 ABE2C816    ; 	psh.w #numwolves_005
( 294) 037A 20FFFF      ; 	jsr _iread
( 295) 037D 8B6B        ; 	pli.s
( 296) 037F AB8300      ; 	sta.w 0,I++
( 297)                  ; ;  130:     FOR i := 1 TO numwolves DO BEGIN
( 298) 0382 A901        ; 	lda #1
( 299) 0384 AB95FF      ; 	sta.w i_014,X
( 300)                  ; L_026
( 301) 0387 ABADC816    ; 	lda.w numwolves_005
( 302) 038B ABD5FF      ; 	cmp.w i_014,X
( 303) 038E AB5003      ; 	bge L_027
( 304) 0391 4C1804      ; 	jmp L_028
( 305)                  ; L_027
( 306)                  ; ;  131:         read(row, col);
( 307) 0394 AB8A        ; 	txa.w
( 308) 0396 18          ; 	clc
( 309) 0397 AB69FDFF    ; 	adc.w #row_015
( 310) 039B AB48        ; 	pha.w
( 311) 039D 20FFFF      ; 	jsr _iread
( 312) 03A0 8B6B        ; 	pli.s
( 313) 03A2 AB8300      ; 	sta.w 0,I++
( 314) 03A5 AB8A        ; 	txa.w
( 315) 03A7 18          ; 	clc
( 316) 03A8 AB69FBFF    ; 	adc.w #col_016
( 317) 03AC AB48        ; 	pha.w
( 318) 03AE 20FFFF      ; 	jsr _iread
( 319) 03B1 8B6B        ; 	pli.s
( 320) 03B3 AB8300      ; 	sta.w 0,I++
( 321)                  ; ;  132:         island[row, col]    := wolf;
( 322) 03B6 ABE2D014    ; 	psh.w #island_002
( 323) 03BA ABB5FD      ; 	lda.w row_015,X
( 324) 03BD AB48        ; 	pha.w
( 325) 03BF ABE21600    ; 	psh.w #22
( 326) 03C3 20A813      ; 	jsr _imul
( 327) 03C6 C204        ; 	adj #4
( 328) 03C8 18          ; 	clc
( 329) 03C9 CB7501      ; 	adc.w 1,S
( 330) 03CC CB9501      ; 	sta.w 1,S
( 331) 03CF ABB5FB      ; 	lda.w col_016,X
( 332) 03D2 AB0A        ; 	asl.w a
( 333) 03D4 18          ; 	clc
( 334) 03D5 CB7501      ; 	adc.w 1,S
( 335) 03D8 CB9501      ; 	sta.w 1,S
( 336) 03DB A900        ; 	lda #0
( 337) 03DD 8B6B        ; 	pli.s
( 338) 03DF AB8300      ; 	sta.w 0,I++
( 339)                  ; ;  133:         foodunits[row, col] := initfoodunits;
( 340) 03E2 ABE2C215    ; 	psh.w #foodunits_003
( 341) 03E6 ABB5FD      ; 	lda.w row_015,X
( 342) 03E9 AB3A        ; 	dec.w a
( 343) 03EB AB48        ; 	pha.w
( 344) 03ED ABE21200    ; 	psh.w #18
( 345) 03F1 20A813      ; 	jsr _imul
( 346) 03F4 C204        ; 	adj #4
( 347) 03F6 18          ; 	clc
( 348) 03F7 CB7501      ; 	adc.w 1,S
( 349) 03FA CB9501      ; 	sta.w 1,S
( 350) 03FD ABB5FB      ; 	lda.w col_016,X
( 351) 0400 AB3A        ; 	dec.w a
( 352) 0402 AB0A        ; 	asl.w a
( 353) 0404 18          ; 	clc
( 354) 0405 CB7501      ; 	adc.w 1,S
( 355) 0408 CB9501      ; 	sta.w 1,S
( 356) 040B A906        ; 	lda #6
( 357) 040D 8B6B        ; 	pli.s
( 358) 040F AB8300      ; 	sta.w 0,I++
( 359)                  ; ;  134:     END;
( 360) 0412 ABF6FF      ; 	inc.w i_014,X
( 361) 0415 4C8703      ; 	jmp L_026
( 362)                  ; L_028
( 363) 0418 ABD6FF      ; 	dec.w i_014,X
( 364)                  ; ;  135: 
( 365)                  ; ;  136:     {Place rabbits on the island.}
( 366)                  ; ;  137:     read(numrabbits);
( 367) 041B ABE2CA16    ; 	psh.w #numrabbits_006
( 368) 041F 20FFFF      ; 	jsr _iread
( 369) 0422 8B6B        ; 	pli.s
( 370) 0424 AB8300      ; 	sta.w 0,I++
( 371)                  ; ;  138:     FOR i := 1 TO numrabbits DO BEGIN
( 372) 0427 A901        ; 	lda #1
( 373) 0429 AB95FF      ; 	sta.w i_014,X
( 374)                  ; L_029
( 375) 042C ABADCA16    ; 	lda.w numrabbits_006
( 376) 0430 ABD5FF      ; 	cmp.w i_014,X
( 377) 0433 AB5003      ; 	bge L_030
( 378) 0436 4C8D04      ; 	jmp L_031
( 379)                  ; L_030
( 380)                  ; ;  139:         read(row, col);
( 381) 0439 AB8A        ; 	txa.w
( 382) 043B 18          ; 	clc
( 383) 043C AB69FDFF    ; 	adc.w #row_015
( 384) 0440 AB48        ; 	pha.w
( 385) 0442 20FFFF      ; 	jsr _iread
( 386) 0445 8B6B        ; 	pli.s
( 387) 0447 AB8300      ; 	sta.w 0,I++
( 388) 044A AB8A        ; 	txa.w
( 389) 044C 18          ; 	clc
( 390) 044D AB69FBFF    ; 	adc.w #col_016
( 391) 0451 AB48        ; 	pha.w
( 392) 0453 20FFFF      ; 	jsr _iread
( 393) 0456 8B6B        ; 	pli.s
( 394) 0458 AB8300      ; 	sta.w 0,I++
( 395)                  ; ;  140:         island[row, col] := rabbit;
( 396) 045B ABE2D014    ; 	psh.w #island_002
( 397) 045F ABB5FD      ; 	lda.w row_015,X
( 398) 0462 AB48        ; 	pha.w
( 399) 0464 ABE21600    ; 	psh.w #22
( 400) 0468 20A813      ; 	jsr _imul
( 401) 046B C204        ; 	adj #4
( 402) 046D 18          ; 	clc
( 403) 046E CB7501      ; 	adc.w 1,S
( 404) 0471 CB9501      ; 	sta.w 1,S
( 405) 0474 ABB5FB      ; 	lda.w col_016,X
( 406) 0477 AB0A        ; 	asl.w a
( 407) 0479 18          ; 	clc
( 408) 047A CB7501      ; 	adc.w 1,S
( 409) 047D CB9501      ; 	sta.w 1,S
( 410) 0480 A901        ; 	lda #1
( 411) 0482 8B6B        ; 	pli.s
( 412) 0484 AB8300      ; 	sta.w 0,I++
( 413)                  ; ;  141:     END;
( 414) 0487 ABF6FF      ; 	inc.w i_014,X
( 415) 048A 4C2C04      ; 	jmp L_029
( 416)                  ; L_031
( 417) 048D ABD6FF      ; 	dec.w i_014,X
( 418)                  ; ;  142: 
( 419)                  ; ;  143:     {Read print times.}
( 420)                  ; ;  144:     read(numprinttimes);
( 421) 0490 ABE2CC16    ; 	psh.w #numprinttimes_007
( 422) 0494 20FFFF      ; 	jsr _iread
( 423) 0497 8B6B        ; 	pli.s
( 424) 0499 AB8300      ; 	sta.w 0,I++
( 425)                  ; ;  145:     FOR i := 1 TO numprinttimes DO BEGIN
( 426) 049C A901        ; 	lda #1
( 427) 049E AB95FF      ; 	sta.w i_014,X
( 428)                  ; L_032
( 429) 04A1 ABADCC16    ; 	lda.w numprinttimes_007
( 430) 04A5 ABD5FF      ; 	cmp.w i_014,X
( 431) 04A8 AB5003      ; 	bge L_033
( 432) 04AB 4CCE04      ; 	jmp L_034
( 433)                  ; L_033
( 434)                  ; ;  146:         read(printtimes[i]);
( 435) 04AE ABE26416    ; 	psh.w #printtimes_004
( 436) 04B2 ABB5FF      ; 	lda.w i_014,X
( 437) 04B5 AB3A        ; 	dec.w a
( 438) 04B7 AB0A        ; 	asl.w a
( 439) 04B9 18          ; 	clc
( 440) 04BA CB7501      ; 	adc.w 1,S
( 441) 04BD CB9501      ; 	sta.w 1,S
( 442) 04C0 20FFFF      ; 	jsr _iread
( 443) 04C3 8B6B        ; 	pli.s
( 444) 04C5 AB8300      ; 	sta.w 0,I++
( 445)                  ; ;  147:     END;
( 446) 04C8 ABF6FF      ; 	inc.w i_014,X
( 447) 04CB 4CA104      ; 	jmp L_032
( 448)                  ; L_034
( 449) 04CE ABD6FF      ; 	dec.w i_014,X
( 450)                  ; ;  148: 
( 451)                  ; ;  149:     {Initialize the row and column offsets for moves.}
( 452)                  ; ;  150:     rowoffset[0] :=  0;  coloffset[0] :=  0;    {stay put}
( 453) 04D1 ABE2D416    ; 	psh.w #rowoffset_011
( 454) 04D5 A900        ; 	lda #0
( 455) 04D7 AB0A        ; 	asl.w a
( 456) 04D9 18          ; 	clc
( 457) 04DA CB7501      ; 	adc.w 1,S
( 458) 04DD CB9501      ; 	sta.w 1,S
( 459) 04E0 A900        ; 	lda #0
( 460) 04E2 8B6B        ; 	pli.s
( 461) 04E4 AB8300      ; 	sta.w 0,I++
( 462) 04E7 ABE2DE16    ; 	psh.w #coloffset_012
( 463) 04EB A900        ; 	lda #0
( 464) 04ED AB0A        ; 	asl.w a
( 465) 04EF 18          ; 	clc
( 466) 04F0 CB7501      ; 	adc.w 1,S
( 467) 04F3 CB9501      ; 	sta.w 1,S
( 468) 04F6 A900        ; 	lda #0
( 469) 04F8 8B6B        ; 	pli.s
( 470) 04FA AB8300      ; 	sta.w 0,I++
( 471)                  ; ;  151:     rowoffset[1] := -1;  coloffset[1] :=  0;    {up}
( 472) 04FD ABE2D416    ; 	psh.w #rowoffset_011
( 473) 0501 A901        ; 	lda #1
( 474) 0503 AB0A        ; 	asl.w a
( 475) 0505 18          ; 	clc
( 476) 0506 CB7501      ; 	adc.w 1,S
( 477) 0509 CB9501      ; 	sta.w 1,S
( 478) 050C A901        ; 	lda #1
( 479) 050E AB49FFFF    ; 	eor.w #-1
( 480) 0512 AB1A        ; 	inc.w a
( 481) 0514 8B6B        ; 	pli.s
( 482) 0516 AB8300      ; 	sta.w 0,I++
( 483) 0519 ABE2DE16    ; 	psh.w #coloffset_012
( 484) 051D A901        ; 	lda #1
( 485) 051F AB0A        ; 	asl.w a
( 486) 0521 18          ; 	clc
( 487) 0522 CB7501      ; 	adc.w 1,S
( 488) 0525 CB9501      ; 	sta.w 1,S
( 489) 0528 A900        ; 	lda #0
( 490) 052A 8B6B        ; 	pli.s
( 491) 052C AB8300      ; 	sta.w 0,I++
( 492)                  ; ;  152:     rowoffset[2] :=  0;  coloffset[2] := -1;    {left}
( 493) 052F ABE2D416    ; 	psh.w #rowoffset_011
( 494) 0533 A902        ; 	lda #2
( 495) 0535 AB0A        ; 	asl.w a
( 496) 0537 18          ; 	clc
( 497) 0538 CB7501      ; 	adc.w 1,S
( 498) 053B CB9501      ; 	sta.w 1,S
( 499) 053E A900        ; 	lda #0
( 500) 0540 8B6B        ; 	pli.s
( 501) 0542 AB8300      ; 	sta.w 0,I++
( 502) 0545 ABE2DE16    ; 	psh.w #coloffset_012
( 503) 0549 A902        ; 	lda #2
( 504) 054B AB0A        ; 	asl.w a
( 505) 054D 18          ; 	clc
( 506) 054E CB7501      ; 	adc.w 1,S
( 507) 0551 CB9501      ; 	sta.w 1,S
( 508) 0554 A901        ; 	lda #1
( 509) 0556 AB49FFFF    ; 	eor.w #-1
( 510) 055A AB1A        ; 	inc.w a
( 511) 055C 8B6B        ; 	pli.s
( 512) 055E AB8300      ; 	sta.w 0,I++
( 513)                  ; ;  153:     rowoffset[3] :=  0;  coloffset[3] := +1;    {right}
( 514) 0561 ABE2D416    ; 	psh.w #rowoffset_011
( 515) 0565 A903        ; 	lda #3
( 516) 0567 AB0A        ; 	asl.w a
( 517) 0569 18          ; 	clc
( 518) 056A CB7501      ; 	adc.w 1,S
( 519) 056D CB9501      ; 	sta.w 1,S
( 520) 0570 A900        ; 	lda #0
( 521) 0572 8B6B        ; 	pli.s
( 522) 0574 AB8300      ; 	sta.w 0,I++
( 523) 0577 ABE2DE16    ; 	psh.w #coloffset_012
( 524) 057B A903        ; 	lda #3
( 525) 057D AB0A        ; 	asl.w a
( 526) 057F 18          ; 	clc
( 527) 0580 CB7501      ; 	adc.w 1,S
( 528) 0583 CB9501      ; 	sta.w 1,S
( 529) 0586 A901        ; 	lda #1
( 530) 0588 8B6B        ; 	pli.s
( 531) 058A AB8300      ; 	sta.w 0,I++
( 532)                  ; ;  154:     rowoffset[4] := +1;  coloffset[4] :=  0;    {down}
( 533) 058D ABE2D416    ; 	psh.w #rowoffset_011
( 534) 0591 A904        ; 	lda #4
( 535) 0593 AB0A        ; 	asl.w a
( 536) 0595 18          ; 	clc
( 537) 0596 CB7501      ; 	adc.w 1,S
( 538) 0599 CB9501      ; 	sta.w 1,S
( 539) 059C A901        ; 	lda #1
( 540) 059E 8B6B        ; 	pli.s
( 541) 05A0 AB8300      ; 	sta.w 0,I++
( 542) 05A3 ABE2DE16    ; 	psh.w #coloffset_012
( 543) 05A7 A904        ; 	lda #4
( 544) 05A9 AB0A        ; 	asl.w a
( 545) 05AB 18          ; 	clc
( 546) 05AC CB7501      ; 	adc.w 1,S
( 547) 05AF CB9501      ; 	sta.w 1,S
( 548) 05B2 A900        ; 	lda #0
( 549) 05B4 8B6B        ; 	pli.s
( 550) 05B6 AB8300      ; 	sta.w 0,I++
( 551)                  ; ;  155:     END {Initialize};
( 552) 05B9 AB9A        ; 	txs.w
( 553) 05BB ABFA        ; 	plx.w
( 554) 05BD 60          ; 	rts
( 555)                  ; 	.end initialize_013
( 556)                  ; ;  156: 
( 557)                  ; ;  157: 
( 558)                  ; ;  158: FUNCTION random (limit : posint) : posint;
( 559)                  ; ;  159: 
( 560)                  ; ;  160:     {Return a random integer from 0..limit-1.}
( 561)                  ; ;  161: 
( 562)                  ; ;  162:     CONST
( 563)                  ; ;  163:     multiplier = 21;
( 564)                  ; ;  164:     increment  = 77;
( 565)                  ; ;  165:     divisor    = 1024;
( 566)                  ; ;  166: 
( 567)                  ; ;  167:     BEGIN
( 568)                  ; limit_036 .equ +7
( 569)                  ; random_035 .sub
( 570) 05BE ABDA        ; 	phx.w
( 571) 05C0 ABBA        ; 	tsx.w
( 572) 05C2 C2FC        ; 	adj #-4
( 573)                  ; ;  168:     seed   := (seed*multiplier + increment) MOD divisor;
( 574) 05C4 ABADD216    ; 	lda.w seed_010
( 575) 05C8 AB48        ; 	pha.w
( 576)                  ; 	lda #21
( 577) 05CA ABE21500    ; 	psh.w #21
( 578) 05CE 20A813      ; 	jsr _imul
( 579) 05D1 C204        ; 	adj #4
( 580) 05D3 AB48        ; 	pha.w
( 581) 05D5 A94D        ; 	lda #77
( 582) 05D7 18          ; 	clc
( 583) 05D8 CB7501      ; 	adc.w 1,S
( 584) 05DB C202        ; 	adj #2
( 585) 05DD AB48        ; 	pha.w
( 586)                  ; 	lda.w #1024
( 587) 05DF ABE20004    ; 	psh.w #1024
( 588) 05E3 207913      ; 	jsr _idiv
( 589) 05E6 C204        ; 	adj #4
( 590) 05E8 1B          ; 	swp a
( 591) 05E9 AB8DD216    ; 	sta.w seed_010
( 592)                  ; ;  169:     random := (seed*limit) DIV divisor;
( 593) 05ED ABADD216    ; 	lda.w seed_010
( 594) 05F1 AB48        ; 	pha.w
( 595) 05F3 ABB507      ; 	lda.w limit_036,X
( 596) 05F6 AB48        ; 	pha.w
( 597) 05F8 20A813      ; 	jsr _imul
( 598) 05FB C204        ; 	adj #4
( 599) 05FD AB48        ; 	pha.w
( 600)                  ; 	lda.w #1024
( 601) 05FF ABE20004    ; 	psh.w #1024
( 602) 0603 207913      ; 	jsr _idiv
( 603) 0606 C204        ; 	adj #4
( 604) 0608 AB95FD      ; 	sta.w RETURN_VALUE,X
( 605)                  ; ;  170:     END {random};
( 606) 060B ABB5FD      ; 	lda.w RETURN_VALUE,X
( 607) 060E AB9A        ; 	txs.w
( 608) 0610 ABFA        ; 	plx.w
( 609) 0612 60          ; 	rts
( 610)                  ; 	.end random_035
( 611)                  ; ;  171: 
( 612)                  ; ;  172: 
( 613)                  ; ;  173: PROCEDURE NewLocation (creature : contents;
( 614)                  ; ;  174:                oldrow, oldcol : index;
( 615)                  ; ;  175:                VAR newrow, newcol : index);
( 616)                  ; ;  176: 
( 617)                  ; ;  177:     {Find a new location for the creature currently at
( 618)                  ; ;  178:      island[oldrow, oldcol].}
( 619)                  ; ;  179: 
( 620)                  ; ;  180: 
( 621)                  ; ;  181:     VAR
( 622)                  ; ;  182:     adj  : 0..4;        {adjacent locations index}
( 623)                  ; ;  183:     what : contents;    {contents of location}
( 624)                  ; ;  184:     done : boolean;
( 625)                  ; ;  185: 
( 626)                  ; ;  186:     BEGIN
( 627)                  ; creature_038 .equ +15
( 628)                  ; oldrow_039 .equ +13
( 629)                  ; oldcol_040 .equ +11
( 630)                  ; newrow_041 .equ +9
( 631)                  ; newcol_042 .equ +7
( 632)                  ; adj_043 .equ -1
( 633)                  ; what_044 .equ -3
( 634)                  ; done_045 .equ -5
( 635)                  ; newlocation_037 .sub
( 636) 0613 ABDA        ; 	phx.w
( 637) 0615 ABBA        ; 	tsx.w
( 638) 0617 C2FA        ; 	adj #-6
( 639)                  ; ;  187:     done := false;
( 640)                  ; 	lda #0
( 641) 0619 AB74FB      ; 	stz.w done_045,X
( 642)                  ; ;  188: 
( 643)                  ; ;  189:     {A wolf first tries to eat a rabbit.
( 644)                  ; ;  190:      Check adjacent locations.}
( 645)                  ; ;  191:     IF creature = wolf THEN BEGIN
( 646) 061C ABB50F      ; 	lda.w creature_038,X
( 647)                  ; 	pha.w
( 648)                  ; 	lda #0
( 649)                  ; 	xma.w 1,S
( 650) 061F ABC90000    ; 	cmp.w #0
( 651)                  ; 	adj #2
( 652) 0623 F004        ; 	beq L_048T
( 653) 0625 A900        ; 	lda #0
( 654) 0627 8002        ; 	bra L_048
( 655) 0629 A901        ; L_048T lda #1
( 656)                  ; 	lda #0
( 657)                  ; L_048
( 658) 062B ABC90100    ; 	cmp.w #1
( 659) 062F F003        ; 	beq L_046
( 660) 0631 4CEF06      ; 	jmp L_047
( 661)                  ; L_046
( 662)                  ; ;  192:         adj := 0;
( 663)                  ; 	lda #0
( 664) 0634 AB74FF      ; 	stz.w adj_043,X
( 665)                  ; ;  193:         REPEAT
( 666)                  ; L_049
( 667)                  ; ;  194:         adj := adj + 1;
( 668)                  ; 	lda.w adj_043,X
( 669)                  ; 	pha.w
( 670)                  ; 	lda #1
( 671)                  ; 	clc
( 672)                  ; 	adc.w 1,S
( 673)                  ; 	adj #2
( 674) 0637 ABF6FF      ; 	inc.w adj_043,X
( 675)                  ; ;  195:         newrow := oldrow + rowoffset[adj];
( 676) 063A ABB509      ; 	lda.w newrow_041,X
( 677) 063D AB48        ; 	pha.w
( 678) 063F ABB50D      ; 	lda.w oldrow_039,X
( 679) 0642 AB48        ; 	pha.w
( 680) 0644 ABE2D416    ; 	psh.w #rowoffset_011
( 681) 0648 ABB5FF      ; 	lda.w adj_043,X
( 682) 064B AB0A        ; 	asl.w a
( 683) 064D 18          ; 	clc
( 684) 064E CB7501      ; 	adc.w 1,S
( 685) 0651 CB9501      ; 	sta.w 1,S
( 686) 0654 8B6B        ; 	pli.s
( 687) 0656 ABA300      ; 	lda.w 0,I++
( 688) 0659 18          ; 	clc
( 689) 065A CB7501      ; 	adc.w 1,S
( 690) 065D C202        ; 	adj #2
( 691) 065F 8B6B        ; 	pli.s
( 692) 0661 AB8300      ; 	sta.w 0,I++
( 693)                  ; ;  196:         newcol := oldcol + coloffset[adj];
( 694) 0664 ABB507      ; 	lda.w newcol_042,X
( 695) 0667 AB48        ; 	pha.w
( 696) 0669 ABB50B      ; 	lda.w oldcol_040,X
( 697) 066C AB48        ; 	pha.w
( 698) 066E ABE2DE16    ; 	psh.w #coloffset_012
( 699) 0672 ABB5FF      ; 	lda.w adj_043,X
( 700) 0675 AB0A        ; 	asl.w a
( 701) 0677 18          ; 	clc
( 702) 0678 CB7501      ; 	adc.w 1,S
( 703) 067B CB9501      ; 	sta.w 1,S
( 704) 067E 8B6B        ; 	pli.s
( 705) 0680 ABA300      ; 	lda.w 0,I++
( 706) 0683 18          ; 	clc
( 707) 0684 CB7501      ; 	adc.w 1,S
( 708) 0687 C202        ; 	adj #2
( 709) 0689 8B6B        ; 	pli.s
( 710) 068B AB8300      ; 	sta.w 0,I++
( 711)                  ; ;  197:         what   := island[newrow, newcol];
( 712) 068E ABE2D014    ; 	psh.w #island_002
( 713) 0692 ABA109      ; 	lda.w (newrow_041,X)
( 714) 0695 AB48        ; 	pha.w
( 715) 0697 ABE21600    ; 	psh.w #22
( 716) 069B 20A813      ; 	jsr _imul
( 717) 069E C204        ; 	adj #4
( 718) 06A0 18          ; 	clc
( 719) 06A1 CB7501      ; 	adc.w 1,S
( 720) 06A4 CB9501      ; 	sta.w 1,S
( 721) 06A7 ABA107      ; 	lda.w (newcol_042,X)
( 722) 06AA AB0A        ; 	asl.w a
( 723) 06AC 18          ; 	clc
( 724) 06AD CB7501      ; 	adc.w 1,S
( 725) 06B0 CB9501      ; 	sta.w 1,S
( 726) 06B3 8B6B        ; 	pli.s
( 727) 06B5 ABA300      ; 	lda.w 0,I++
( 728) 06B8 AB95FD      ; 	sta.w what_044,X
( 729)                  ; ;  198:         done   := what = rabbit;
( 730) 06BB ABB5FD      ; 	lda.w what_044,X
( 731)                  ; 	pha.w
( 732)                  ; 	lda #1
( 733)                  ; 	xma.w 1,S
( 734) 06BE ABC90100    ; 	cmp.w #1
( 735)                  ; 	adj #2
( 736) 06C2 F004        ; 	beq L_051T
( 737) 06C4 A900        ; 	lda #0
( 738) 06C6 8002        ; 	bra L_051
( 739) 06C8 A901        ; L_051T lda #1
( 740)                  ; 	lda #0
( 741)                  ; L_051
( 742) 06CA AB95FB      ; 	sta.w done_045,X
( 743)                  ; ;  199:         UNTIL done OR (adj = 4);
( 744) 06CD ABB5FB      ; 	lda.w done_045,X
( 745) 06D0 AB48        ; 	pha.w
( 746) 06D2 ABB5FF      ; 	lda.w adj_043,X
( 747)                  ; 	pha.w
( 748)                  ; 	lda #4
( 749)                  ; 	xma.w 1,S
( 750) 06D5 ABC90400    ; 	cmp.w #4
( 751)                  ; 	adj #2
( 752) 06D9 F004        ; 	beq L_052T
( 753) 06DB A900        ; 	lda #0
( 754) 06DD 8002        ; 	bra L_052
( 755) 06DF A901        ; L_052T lda #1
( 756)                  ; 	lda #0
( 757)                  ; L_052
( 758) 06E1 CB1501      ; 	ora.w 1,S
( 759) 06E4 C202        ; 	adj #2
( 760) 06E6 ABC90100    ; 	cmp.w #1
( 761) 06EA F003        ; 	beq L_050
( 762) 06EC 4C3706      ; 	jmp L_049
( 763)                  ; L_050
( 764)                  ; ;  200:     END;
( 765)                  ; L_047
( 766)                  ; ;  201: 
( 767)                  ; ;  202:     {Move randomly into an adjacent location or stay put.}
( 768)                  ; ;  203:     IF NOT done THEN BEGIN
( 769) 06EF ABB5FB      ; 	lda.w done_045,X
( 770) 06F2 4901        ; 	eor #1
( 771) 06F4 ABC90100    ; 	cmp.w #1
( 772) 06F8 F003        ; 	beq L_053
( 773) 06FA 4CD107      ; 	jmp L_054
( 774)                  ; L_053
( 775)                  ; ;  204:         REPEAT
( 776)                  ; L_055
( 777)                  ; ;  205:         adj := random(5);
( 778)                  ; 	lda #5
( 779) 06FD ABE20500    ; 	psh.w #5
( 780) 0701 ABB505      ; 	lda.w STATIC_LINK,X
( 781) 0704 AB48        ; 	pha.w
( 782) 0706 20BE05      ; 	jsr random_035
( 783) 0709 C204        ; 	adj #4
( 784) 070B AB95FF      ; 	sta.w adj_043,X
( 785)                  ; ;  206:         newrow := oldrow + rowoffset[adj];
( 786) 070E ABB509      ; 	lda.w newrow_041,X
( 787) 0711 AB48        ; 	pha.w
( 788) 0713 ABB50D      ; 	lda.w oldrow_039,X
( 789) 0716 AB48        ; 	pha.w
( 790) 0718 ABE2D416    ; 	psh.w #rowoffset_011
( 791) 071C ABB5FF      ; 	lda.w adj_043,X
( 792) 071F AB0A        ; 	asl.w a
( 793) 0721 18          ; 	clc
( 794) 0722 CB7501      ; 	adc.w 1,S
( 795) 0725 CB9501      ; 	sta.w 1,S
( 796) 0728 8B6B        ; 	pli.s
( 797) 072A ABA300      ; 	lda.w 0,I++
( 798) 072D 18          ; 	clc
( 799) 072E CB7501      ; 	adc.w 1,S
( 800) 0731 C202        ; 	adj #2
( 801) 0733 8B6B        ; 	pli.s
( 802) 0735 AB8300      ; 	sta.w 0,I++
( 803)                  ; ;  207:         newcol := oldcol + coloffset[adj];
( 804) 0738 ABB507      ; 	lda.w newcol_042,X
( 805) 073B AB48        ; 	pha.w
( 806) 073D ABB50B      ; 	lda.w oldcol_040,X
( 807) 0740 AB48        ; 	pha.w
( 808) 0742 ABE2DE16    ; 	psh.w #coloffset_012
( 809) 0746 ABB5FF      ; 	lda.w adj_043,X
( 810) 0749 AB0A        ; 	asl.w a
( 811) 074B 18          ; 	clc
( 812) 074C CB7501      ; 	adc.w 1,S
( 813) 074F CB9501      ; 	sta.w 1,S
( 814) 0752 8B6B        ; 	pli.s
( 815) 0754 ABA300      ; 	lda.w 0,I++
( 816) 0757 18          ; 	clc
( 817) 0758 CB7501      ; 	adc.w 1,S
( 818) 075B C202        ; 	adj #2
( 819) 075D 8B6B        ; 	pli.s
( 820) 075F AB8300      ; 	sta.w 0,I++
( 821)                  ; ;  208:         what   := island[newrow, newcol];
( 822) 0762 ABE2D014    ; 	psh.w #island_002
( 823) 0766 ABA109      ; 	lda.w (newrow_041,X)
( 824) 0769 AB48        ; 	pha.w
( 825) 076B ABE21600    ; 	psh.w #22
( 826) 076F 20A813      ; 	jsr _imul
( 827) 0772 C204        ; 	adj #4
( 828) 0774 18          ; 	clc
( 829) 0775 CB7501      ; 	adc.w 1,S
( 830) 0778 CB9501      ; 	sta.w 1,S
( 831) 077B ABA107      ; 	lda.w (newcol_042,X)
( 832) 077E AB0A        ; 	asl.w a
( 833) 0780 18          ; 	clc
( 834) 0781 CB7501      ; 	adc.w 1,S
( 835) 0784 CB9501      ; 	sta.w 1,S
( 836) 0787 8B6B        ; 	pli.s
( 837) 0789 ABA300      ; 	lda.w 0,I++
( 838) 078C AB95FD      ; 	sta.w what_044,X
( 839)                  ; ;  209:         UNTIL    (what = empty)
( 840) 078F ABB5FD      ; 	lda.w what_044,X
( 841)                  ; 	pha.w
( 842)                  ; 	lda #4
( 843)                  ; 	xma.w 1,S
( 844) 0792 ABC90400    ; 	cmp.w #4
( 845)                  ; 	adj #2
( 846) 0796 F004        ; 	beq L_057T
( 847) 0798 A900        ; 	lda #0
( 848) 079A 8002        ; 	bra L_057
( 849) 079C A901        ; L_057T lda #1
( 850)                  ; 	lda #0
( 851)                  ; L_057
( 852)                  ; ;  210:           OR ((newrow = oldrow) AND (newcol = oldcol));
( 853) 079E AB48        ; 	pha.w
( 854) 07A0 ABA109      ; 	lda.w (newrow_041,X)
( 855)                  ; 	pha.w
( 856)                  ; 	lda.w oldrow_039,X
( 857)                  ; 	xma.w 1,S
( 858) 07A3 ABD50D      ; 	cmp.w oldrow_039,X
( 859)                  ; 	adj #2
( 860) 07A6 F004        ; 	beq L_058T
( 861) 07A8 A900        ; 	lda #0
( 862) 07AA 8002        ; 	bra L_058
( 863) 07AC A901        ; L_058T lda #1
( 864)                  ; 	lda #0
( 865)                  ; L_058
( 866) 07AE AB48        ; 	pha.w
( 867) 07B0 ABA107      ; 	lda.w (newcol_042,X)
( 868)                  ; 	pha.w
( 869)                  ; 	lda.w oldcol_040,X
( 870)                  ; 	xma.w 1,S
( 871) 07B3 ABD50B      ; 	cmp.w oldcol_040,X
( 872)                  ; 	adj #2
( 873) 07B6 F004        ; 	beq L_059T
( 874) 07B8 A900        ; 	lda #0
( 875) 07BA 8002        ; 	bra L_059
( 876) 07BC A901        ; L_059T lda #1
( 877)                  ; 	lda #0
( 878)                  ; L_059
( 879) 07BE CB3501      ; 	and.w 1,S
( 880) 07C1 C202        ; 	adj #2
( 881) 07C3 CB1501      ; 	ora.w 1,S
( 882) 07C6 C202        ; 	adj #2
( 883) 07C8 ABC90100    ; 	cmp.w #1
( 884) 07CC F003        ; 	beq L_056
( 885) 07CE 4CFD06      ; 	jmp L_055
( 886)                  ; L_056
( 887)                  ; ;  211:     END;
( 888)                  ; L_054
( 889)                  ; ;  212:     END {NewLocation};
( 890) 07D1 AB9A        ; 	txs.w
( 891) 07D3 ABFA        ; 	plx.w
( 892) 07D5 60          ; 	rts
( 893)                  ; 	.end newlocation_037
( 894)                  ; ;  213: 
( 895)                  ; ;  214: 
( 896)                  ; ;  215: PROCEDURE ProcessWolf (oldrow, oldcol : index);
( 897)                  ; ;  216: 
( 898)                  ; ;  217:     {Process the wolf located at island[oldrow, oldcol].}
( 899)                  ; ;  218: 
( 900)                  ; ;  219:     VAR
( 901)                  ; ;  220:     newrow, newcol : index;     {new row and column}
( 902)                  ; ;  221:     moved : boolean;            {true iff wolf moved}
( 903)                  ; ;  222: 
( 904)                  ; ;  223:     BEGIN
( 905)                  ; oldrow_061 .equ +9
( 906)                  ; oldcol_062 .equ +7
( 907)                  ; newrow_063 .equ -1
( 908)                  ; newcol_064 .equ -3
( 909)                  ; moved_065 .equ -5
( 910)                  ; processwolf_060 .sub
( 911) 07D6 ABDA        ; 	phx.w
( 912) 07D8 ABBA        ; 	tsx.w
( 913) 07DA C2FA        ; 	adj #-6
( 914)                  ; ;  224: 
( 915)                  ; ;  225:     {Lose a food unit.}
( 916)                  ; ;  226:     foodunits[oldrow, oldcol] := foodunits[oldrow, oldcol] - 1;
( 917) 07DC ABE2C215    ; 	psh.w #foodunits_003
( 918) 07E0 ABB509      ; 	lda.w oldrow_061,X
( 919) 07E3 AB3A        ; 	dec.w a
( 920) 07E5 AB48        ; 	pha.w
( 921) 07E7 ABE21200    ; 	psh.w #18
( 922) 07EB 20A813      ; 	jsr _imul
( 923) 07EE C204        ; 	adj #4
( 924) 07F0 18          ; 	clc
( 925) 07F1 CB7501      ; 	adc.w 1,S
( 926) 07F4 CB9501      ; 	sta.w 1,S
( 927) 07F7 ABB507      ; 	lda.w oldcol_062,X
( 928) 07FA AB3A        ; 	dec.w a
( 929) 07FC AB0A        ; 	asl.w a
( 930) 07FE 18          ; 	clc
( 931) 07FF CB7501      ; 	adc.w 1,S
( 932) 0802 CB9501      ; 	sta.w 1,S
( 933) 0805 ABE2C215    ; 	psh.w #foodunits_003
( 934) 0809 ABB509      ; 	lda.w oldrow_061,X
( 935) 080C AB3A        ; 	dec.w a
( 936) 080E AB48        ; 	pha.w
( 937) 0810 ABE21200    ; 	psh.w #18
( 938) 0814 20A813      ; 	jsr _imul
( 939) 0817 C204        ; 	adj #4
( 940) 0819 18          ; 	clc
( 941) 081A CB7501      ; 	adc.w 1,S
( 942) 081D CB9501      ; 	sta.w 1,S
( 943) 0820 ABB507      ; 	lda.w oldcol_062,X
( 944) 0823 AB3A        ; 	dec.w a
( 945) 0825 AB0A        ; 	asl.w a
( 946) 0827 18          ; 	clc
( 947) 0828 CB7501      ; 	adc.w 1,S
( 948) 082B CB9501      ; 	sta.w 1,S
( 949) 082E 8B6B        ; 	pli.s
( 950) 0830 ABA300      ; 	lda.w 0,I++
( 951) 0833 AB48        ; 	pha.w
( 952) 0835 A901        ; 	lda #1
( 953) 0837 CB4401      ; 	xma.w 1,S
( 954) 083A 38          ; 	sec
( 955) 083B CBF501      ; 	sbc.w 1,S
( 956) 083E C202        ; 	adj #2
( 957) 0840 8B6B        ; 	pli.s
( 958) 0842 AB8300      ; 	sta.w 0,I++
( 959)                  ; ;  227: 
( 960)                  ; ;  228:     IF foodunits[oldrow, oldcol] = 0 THEN BEGIN
( 961) 0845 ABE2C215    ; 	psh.w #foodunits_003
( 962) 0849 ABB509      ; 	lda.w oldrow_061,X
( 963) 084C AB3A        ; 	dec.w a
( 964) 084E AB48        ; 	pha.w
( 965) 0850 ABE21200    ; 	psh.w #18
( 966) 0854 20A813      ; 	jsr _imul
( 967) 0857 C204        ; 	adj #4
( 968) 0859 18          ; 	clc
( 969) 085A CB7501      ; 	adc.w 1,S
( 970) 085D CB9501      ; 	sta.w 1,S
( 971) 0860 ABB507      ; 	lda.w oldcol_062,X
( 972) 0863 AB3A        ; 	dec.w a
( 973) 0865 AB0A        ; 	asl.w a
( 974) 0867 18          ; 	clc
( 975) 0868 CB7501      ; 	adc.w 1,S
( 976) 086B CB9501      ; 	sta.w 1,S
( 977) 086E 8B6B        ; 	pli.s
( 978) 0870 ABA300      ; 	lda.w 0,I++
( 979)                  ; 	pha.w
( 980)                  ; 	lda #0
( 981)                  ; 	xma.w 1,S
( 982) 0873 ABC90000    ; 	cmp.w #0
( 983)                  ; 	adj #2
( 984) 0877 F004        ; 	beq L_068T
( 985) 0879 A900        ; 	lda #0
( 986) 087B 8002        ; 	bra L_068
( 987) 087D A901        ; L_068T lda #1
( 988)                  ; 	lda #0
( 989)                  ; L_068
( 990) 087F ABC90100    ; 	cmp.w #1
( 991) 0883 F003        ; 	beq L_066
( 992) 0885 4C4709      ; 	jmp L_067
( 993)                  ; L_066
( 994)                  ; ;  229: 
( 995)                  ; ;  230:         {Die of starvation.}
( 996)                  ; ;  231:         island[oldrow, oldcol] := empty;
( 997) 0888 ABE2D014    ; 	psh.w #island_002
( 998) 088C ABB509      ; 	lda.w oldrow_061,X
( 999) 088F AB48        ; 	pha.w
(1000) 0891 ABE21600    ; 	psh.w #22
(1001) 0895 20A813      ; 	jsr _imul
(1002) 0898 C204        ; 	adj #4
(1003) 089A 18          ; 	clc
(1004) 089B CB7501      ; 	adc.w 1,S
(1005) 089E CB9501      ; 	sta.w 1,S
(1006) 08A1 ABB507      ; 	lda.w oldcol_062,X
(1007) 08A4 AB0A        ; 	asl.w a
(1008) 08A6 18          ; 	clc
(1009) 08A7 CB7501      ; 	adc.w 1,S
(1010) 08AA CB9501      ; 	sta.w 1,S
(1011) 08AD A904        ; 	lda #4
(1012) 08AF 8B6B        ; 	pli.s
(1013) 08B1 AB8300      ; 	sta.w 0,I++
(1014)                  ; ;  232:         numwolves := numwolves - 1;
(1015) 08B4 ABADC816    ; 	lda.w numwolves_005
(1016) 08B8 AB48        ; 	pha.w
(1017) 08BA A901        ; 	lda #1
(1018) 08BC CB4401      ; 	xma.w 1,S
(1019) 08BF 38          ; 	sec
(1020) 08C0 CBF501      ; 	sbc.w 1,S
(1021) 08C3 C202        ; 	adj #2
(1022) 08C5 AB8DC816    ; 	sta.w numwolves_005
(1023)                  ; ;  233:         writeln('t =', t:4, ' : Wolf died at ',
(1024) 08C9 ABE2CC14    ; 	psh.w #S_069
(1025) 08CD ABE20000    ; 	psh.w #0
(1026) 08D1 ABE20300    ; 	psh.w #3
(1027) 08D5 20E013      ; 	jsr _swrite
(1028) 08D8 C206        ; 	adj #6
(1029) 08DA ABADCE16    ; 	lda.w t_008
(1030) 08DE AB48        ; 	pha.w
(1031)                  ; 	lda #4
(1032) 08E0 ABE20400    ; 	psh.w #4
(1033) 08E4 20F213      ; 	jsr _iwrite
(1034) 08E7 C204        ; 	adj #4
(1035) 08E9 ABE2BC14    ; 	psh.w #S_070
(1036) 08ED ABE20000    ; 	psh.w #0
(1037) 08F1 ABE21000    ; 	psh.w #16
(1038) 08F5 20E013      ; 	jsr _swrite
(1039) 08F8 C206        ; 	adj #6
(1040)                  ; ;  234:             '[', oldrow:1, ', ', oldcol:1, ']');
(1041)                  ; 	lda #91
(1042) 08FA ABE25B00    ; 	psh.w #91
(1043) 08FE ABE20000    ; 	psh.w #0
(1044) 0902 20FFFF      ; 	jsr _cwrite
(1045) 0905 C204        ; 	adj #4
(1046) 0907 ABB509      ; 	lda.w oldrow_061,X
(1047) 090A AB48        ; 	pha.w
(1048)                  ; 	lda #1
(1049) 090C ABE20100    ; 	psh.w #1
(1050) 0910 20F213      ; 	jsr _iwrite
(1051) 0913 C204        ; 	adj #4
(1052) 0915 ABE2BA14    ; 	psh.w #S_071
(1053) 0919 ABE20000    ; 	psh.w #0
(1054) 091D ABE20200    ; 	psh.w #2
(1055) 0921 20E013      ; 	jsr _swrite
(1056) 0924 C206        ; 	adj #6
(1057) 0926 ABB507      ; 	lda.w oldcol_062,X
(1058) 0929 AB48        ; 	pha.w
(1059)                  ; 	lda #1
(1060) 092B ABE20100    ; 	psh.w #1
(1061) 092F 20F213      ; 	jsr _iwrite
(1062) 0932 C204        ; 	adj #4
(1063)                  ; 	lda #93
(1064) 0934 ABE25D00    ; 	psh.w #93
(1065) 0938 ABE20000    ; 	psh.w #0
(1066) 093C 20FFFF      ; 	jsr _cwrite
(1067) 093F C204        ; 	adj #4
(1068) 0941 20DA13      ; 	jsr _writeln
(1069)                  ; ;  235:     END
(1070)                  ; ;  236:     ELSE BEGIN
(1071) 0944 4CA00D      ; 	jmp L_072
(1072)                  ; L_067
(1073)                  ; ;  237: 
(1074)                  ; ;  238:         {Move to adjacent location, or stay put.}
(1075)                  ; ;  239:         NewLocation(wolf, oldrow, oldcol, newrow, newcol);
(1076)                  ; 	lda #0
(1077) 0947 ABE20000    ; 	psh.w #0
(1078) 094B ABB509      ; 	lda.w oldrow_061,X
(1079) 094E AB48        ; 	pha.w
(1080) 0950 ABB507      ; 	lda.w oldcol_062,X
(1081) 0953 AB48        ; 	pha.w
(1082) 0955 AB8A        ; 	txa.w
(1083) 0957 18          ; 	clc
(1084) 0958 AB69FFFF    ; 	adc.w #newrow_063
(1085) 095C AB48        ; 	pha.w
(1086) 095E AB8A        ; 	txa.w
(1087) 0960 18          ; 	clc
(1088) 0961 AB69FDFF    ; 	adc.w #newcol_064
(1089) 0965 AB48        ; 	pha.w
(1090) 0967 ABB505      ; 	lda.w STATIC_LINK,X
(1091) 096A AB48        ; 	pha.w
(1092) 096C 201306      ; 	jsr newlocation_037
(1093) 096F C20C        ; 	adj #12
(1094)                  ; ;  240:         moved := (newrow <> oldrow) OR (newcol <> oldcol);
(1095) 0971 ABB5FF      ; 	lda.w newrow_063,X
(1096)                  ; 	pha.w
(1097)                  ; 	lda.w oldrow_061,X
(1098)                  ; 	xma.w 1,S
(1099) 0974 ABD509      ; 	cmp.w oldrow_061,X
(1100)                  ; 	adj #2
(1101) 0977 D004        ; 	bne L_073T
(1102) 0979 A900        ; 	lda #0
(1103) 097B 8002        ; 	bra L_073
(1104) 097D A901        ; L_073T lda #1
(1105)                  ; 	lda #0
(1106)                  ; L_073
(1107) 097F AB48        ; 	pha.w
(1108) 0981 ABB5FD      ; 	lda.w newcol_064,X
(1109)                  ; 	pha.w
(1110)                  ; 	lda.w oldcol_062,X
(1111)                  ; 	xma.w 1,S
(1112) 0984 ABD507      ; 	cmp.w oldcol_062,X
(1113)                  ; 	adj #2
(1114) 0987 D004        ; 	bne L_074T
(1115) 0989 A900        ; 	lda #0
(1116) 098B 8002        ; 	bra L_074
(1117) 098D A901        ; L_074T lda #1
(1118)                  ; 	lda #0
(1119)                  ; L_074
(1120) 098F CB1501      ; 	ora.w 1,S
(1121) 0992 C202        ; 	adj #2
(1122) 0994 AB95FB      ; 	sta.w moved_065,X
(1123)                  ; ;  241: 
(1124)                  ; ;  242:         IF moved THEN BEGIN
(1125) 0997 ABB5FB      ; 	lda.w moved_065,X
(1126) 099A ABC90100    ; 	cmp.w #1
(1127) 099E F003        ; 	beq L_075
(1128) 09A0 4CB70B      ; 	jmp L_076
(1129)                  ; L_075
(1130)                  ; ;  243: 
(1131)                  ; ;  244:         {If there's a rabbit there, eat it.}
(1132)                  ; ;  245:         IF island[newrow, newcol] = rabbit THEN BEGIN
(1133) 09A3 ABE2D014    ; 	psh.w #island_002
(1134) 09A7 ABB5FF      ; 	lda.w newrow_063,X
(1135) 09AA AB48        ; 	pha.w
(1136) 09AC ABE21600    ; 	psh.w #22
(1137) 09B0 20A813      ; 	jsr _imul
(1138) 09B3 C204        ; 	adj #4
(1139) 09B5 18          ; 	clc
(1140) 09B6 CB7501      ; 	adc.w 1,S
(1141) 09B9 CB9501      ; 	sta.w 1,S
(1142) 09BC ABB5FD      ; 	lda.w newcol_064,X
(1143) 09BF AB0A        ; 	asl.w a
(1144) 09C1 18          ; 	clc
(1145) 09C2 CB7501      ; 	adc.w 1,S
(1146) 09C5 CB9501      ; 	sta.w 1,S
(1147) 09C8 8B6B        ; 	pli.s
(1148) 09CA ABA300      ; 	lda.w 0,I++
(1149)                  ; 	pha.w
(1150)                  ; 	lda #1
(1151)                  ; 	xma.w 1,S
(1152) 09CD ABC90100    ; 	cmp.w #1
(1153)                  ; 	adj #2
(1154) 09D1 F004        ; 	beq L_079T
(1155) 09D3 A900        ; 	lda #0
(1156) 09D5 8002        ; 	bra L_079
(1157) 09D7 A901        ; L_079T lda #1
(1158)                  ; 	lda #0
(1159)                  ; L_079
(1160) 09D9 ABC90100    ; 	cmp.w #1
(1161) 09DD F003        ; 	beq L_077
(1162) 09DF 4CD30A      ; 	jmp L_078
(1163)                  ; L_077
(1164)                  ; ;  246:             foodunits[oldrow, oldcol] :=
(1165) 09E2 ABE2C215    ; 	psh.w #foodunits_003
(1166) 09E6 ABB509      ; 	lda.w oldrow_061,X
(1167) 09E9 AB3A        ; 	dec.w a
(1168) 09EB AB48        ; 	pha.w
(1169) 09ED ABE21200    ; 	psh.w #18
(1170) 09F1 20A813      ; 	jsr _imul
(1171) 09F4 C204        ; 	adj #4
(1172) 09F6 18          ; 	clc
(1173) 09F7 CB7501      ; 	adc.w 1,S
(1174) 09FA CB9501      ; 	sta.w 1,S
(1175) 09FD ABB507      ; 	lda.w oldcol_062,X
(1176) 0A00 AB3A        ; 	dec.w a
(1177) 0A02 AB0A        ; 	asl.w a
(1178) 0A04 18          ; 	clc
(1179) 0A05 CB7501      ; 	adc.w 1,S
(1180) 0A08 CB9501      ; 	sta.w 1,S
(1181)                  ; ;  247:             foodunits[oldrow, oldcol] + rabbitfoodunits;
(1182) 0A0B ABE2C215    ; 	psh.w #foodunits_003
(1183) 0A0F ABB509      ; 	lda.w oldrow_061,X
(1184) 0A12 AB3A        ; 	dec.w a
(1185) 0A14 AB48        ; 	pha.w
(1186) 0A16 ABE21200    ; 	psh.w #18
(1187) 0A1A 20A813      ; 	jsr _imul
(1188) 0A1D C204        ; 	adj #4
(1189) 0A1F 18          ; 	clc
(1190) 0A20 CB7501      ; 	adc.w 1,S
(1191) 0A23 CB9501      ; 	sta.w 1,S
(1192) 0A26 ABB507      ; 	lda.w oldcol_062,X
(1193) 0A29 AB3A        ; 	dec.w a
(1194) 0A2B AB0A        ; 	asl.w a
(1195) 0A2D 18          ; 	clc
(1196) 0A2E CB7501      ; 	adc.w 1,S
(1197) 0A31 CB9501      ; 	sta.w 1,S
(1198) 0A34 8B6B        ; 	pli.s
(1199) 0A36 ABA300      ; 	lda.w 0,I++
(1200)                  ; 	pha.w
(1201)                  ; 	lda #6
(1202) 0A39 18          ; 	clc
(1203) 0A3A AB690600    ; 	adc.w #6
(1204)                  ; 	adj #2
(1205) 0A3E 8B6B        ; 	pli.s
(1206) 0A40 AB8300      ; 	sta.w 0,I++
(1207)                  ; ;  248:             numrabbits := numrabbits - 1;
(1208) 0A43 ABADCA16    ; 	lda.w numrabbits_006
(1209) 0A47 AB48        ; 	pha.w
(1210) 0A49 A901        ; 	lda #1
(1211) 0A4B CB4401      ; 	xma.w 1,S
(1212) 0A4E 38          ; 	sec
(1213) 0A4F CBF501      ; 	sbc.w 1,S
(1214) 0A52 C202        ; 	adj #2
(1215) 0A54 AB8DCA16    ; 	sta.w numrabbits_006
(1216)                  ; ;  249:             writeln('t =', t:4, ' : Rabbit eaten at ',
(1217) 0A58 ABE2CC14    ; 	psh.w #S_069
(1218) 0A5C ABE20000    ; 	psh.w #0
(1219) 0A60 ABE20300    ; 	psh.w #3
(1220) 0A64 20E013      ; 	jsr _swrite
(1221) 0A67 C206        ; 	adj #6
(1222) 0A69 ABADCE16    ; 	lda.w t_008
(1223) 0A6D AB48        ; 	pha.w
(1224)                  ; 	lda #4
(1225) 0A6F ABE20400    ; 	psh.w #4
(1226) 0A73 20F213      ; 	jsr _iwrite
(1227) 0A76 C204        ; 	adj #4
(1228) 0A78 ABE2A714    ; 	psh.w #S_080
(1229) 0A7C ABE20000    ; 	psh.w #0
(1230) 0A80 ABE21300    ; 	psh.w #19
(1231) 0A84 20E013      ; 	jsr _swrite
(1232) 0A87 C206        ; 	adj #6
(1233)                  ; ;  250:                 '[', newrow:1, ', ', newcol:1, ']');
(1234)                  ; 	lda #91
(1235) 0A89 ABE25B00    ; 	psh.w #91
(1236) 0A8D ABE20000    ; 	psh.w #0
(1237) 0A91 20FFFF      ; 	jsr _cwrite
(1238) 0A94 C204        ; 	adj #4
(1239) 0A96 ABB5FF      ; 	lda.w newrow_063,X
(1240) 0A99 AB48        ; 	pha.w
(1241)                  ; 	lda #1
(1242) 0A9B ABE20100    ; 	psh.w #1
(1243) 0A9F 20F213      ; 	jsr _iwrite
(1244) 0AA2 C204        ; 	adj #4
(1245) 0AA4 ABE2BA14    ; 	psh.w #S_071
(1246) 0AA8 ABE20000    ; 	psh.w #0
(1247) 0AAC ABE20200    ; 	psh.w #2
(1248) 0AB0 20E013      ; 	jsr _swrite
(1249) 0AB3 C206        ; 	adj #6
(1250) 0AB5 ABB5FD      ; 	lda.w newcol_064,X
(1251) 0AB8 AB48        ; 	pha.w
(1252)                  ; 	lda #1
(1253) 0ABA ABE20100    ; 	psh.w #1
(1254) 0ABE 20F213      ; 	jsr _iwrite
(1255) 0AC1 C204        ; 	adj #4
(1256)                  ; 	lda #93
(1257) 0AC3 ABE25D00    ; 	psh.w #93
(1258) 0AC7 ABE20000    ; 	psh.w #0
(1259) 0ACB 20FFFF      ; 	jsr _cwrite
(1260) 0ACE C204        ; 	adj #4
(1261) 0AD0 20DA13      ; 	jsr _writeln
(1262)                  ; ;  251:         END;
(1263)                  ; L_078
(1264)                  ; ;  252: 
(1265)                  ; ;  253:         {Set new (or same) location.}
(1266)                  ; ;  254:         island[newrow, newcol] := newwolf;
(1267) 0AD3 ABE2D014    ; 	psh.w #island_002
(1268) 0AD7 ABB5FF      ; 	lda.w newrow_063,X
(1269) 0ADA AB48        ; 	pha.w
(1270) 0ADC ABE21600    ; 	psh.w #22
(1271) 0AE0 20A813      ; 	jsr _imul
(1272) 0AE3 C204        ; 	adj #4
(1273) 0AE5 18          ; 	clc
(1274) 0AE6 CB7501      ; 	adc.w 1,S
(1275) 0AE9 CB9501      ; 	sta.w 1,S
(1276) 0AEC ABB5FD      ; 	lda.w newcol_064,X
(1277) 0AEF AB0A        ; 	asl.w a
(1278) 0AF1 18          ; 	clc
(1279) 0AF2 CB7501      ; 	adc.w 1,S
(1280) 0AF5 CB9501      ; 	sta.w 1,S
(1281) 0AF8 A902        ; 	lda #2
(1282) 0AFA 8B6B        ; 	pli.s
(1283) 0AFC AB8300      ; 	sta.w 0,I++
(1284)                  ; ;  255:         island[oldrow, oldcol] := empty;
(1285) 0AFF ABE2D014    ; 	psh.w #island_002
(1286) 0B03 ABB509      ; 	lda.w oldrow_061,X
(1287) 0B06 AB48        ; 	pha.w
(1288) 0B08 ABE21600    ; 	psh.w #22
(1289) 0B0C 20A813      ; 	jsr _imul
(1290) 0B0F C204        ; 	adj #4
(1291) 0B11 18          ; 	clc
(1292) 0B12 CB7501      ; 	adc.w 1,S
(1293) 0B15 CB9501      ; 	sta.w 1,S
(1294) 0B18 ABB507      ; 	lda.w oldcol_062,X
(1295) 0B1B AB0A        ; 	asl.w a
(1296) 0B1D 18          ; 	clc
(1297) 0B1E CB7501      ; 	adc.w 1,S
(1298) 0B21 CB9501      ; 	sta.w 1,S
(1299) 0B24 A904        ; 	lda #4
(1300) 0B26 8B6B        ; 	pli.s
(1301) 0B28 AB8300      ; 	sta.w 0,I++
(1302)                  ; ;  256:         foodunits[newrow, newcol] := foodunits[oldrow, oldcol];
(1303) 0B2B ABE2C215    ; 	psh.w #foodunits_003
(1304) 0B2F ABB5FF      ; 	lda.w newrow_063,X
(1305) 0B32 AB3A        ; 	dec.w a
(1306) 0B34 AB48        ; 	pha.w
(1307) 0B36 ABE21200    ; 	psh.w #18
(1308) 0B3A 20A813      ; 	jsr _imul
(1309) 0B3D C204        ; 	adj #4
(1310) 0B3F 18          ; 	clc
(1311) 0B40 CB7501      ; 	adc.w 1,S
(1312) 0B43 CB9501      ; 	sta.w 1,S
(1313) 0B46 ABB5FD      ; 	lda.w newcol_064,X
(1314) 0B49 AB3A        ; 	dec.w a
(1315) 0B4B AB0A        ; 	asl.w a
(1316) 0B4D 18          ; 	clc
(1317) 0B4E CB7501      ; 	adc.w 1,S
(1318) 0B51 CB9501      ; 	sta.w 1,S
(1319) 0B54 ABE2C215    ; 	psh.w #foodunits_003
(1320) 0B58 ABB509      ; 	lda.w oldrow_061,X
(1321) 0B5B AB3A        ; 	dec.w a
(1322) 0B5D AB48        ; 	pha.w
(1323) 0B5F ABE21200    ; 	psh.w #18
(1324) 0B63 20A813      ; 	jsr _imul
(1325) 0B66 C204        ; 	adj #4
(1326) 0B68 18          ; 	clc
(1327) 0B69 CB7501      ; 	adc.w 1,S
(1328) 0B6C CB9501      ; 	sta.w 1,S
(1329) 0B6F ABB507      ; 	lda.w oldcol_062,X
(1330) 0B72 AB3A        ; 	dec.w a
(1331) 0B74 AB0A        ; 	asl.w a
(1332) 0B76 18          ; 	clc
(1333) 0B77 CB7501      ; 	adc.w 1,S
(1334) 0B7A CB9501      ; 	sta.w 1,S
(1335) 0B7D 8B6B        ; 	pli.s
(1336) 0B7F ABA300      ; 	lda.w 0,I++
(1337) 0B82 8B6B        ; 	pli.s
(1338) 0B84 AB8300      ; 	sta.w 0,I++
(1339)                  ; ;  257:         foodunits[oldrow, oldcol] := 0;
(1340) 0B87 ABE2C215    ; 	psh.w #foodunits_003
(1341) 0B8B ABB509      ; 	lda.w oldrow_061,X
(1342) 0B8E AB3A        ; 	dec.w a
(1343) 0B90 AB48        ; 	pha.w
(1344) 0B92 ABE21200    ; 	psh.w #18
(1345) 0B96 20A813      ; 	jsr _imul
(1346) 0B99 C204        ; 	adj #4
(1347) 0B9B 18          ; 	clc
(1348) 0B9C CB7501      ; 	adc.w 1,S
(1349) 0B9F CB9501      ; 	sta.w 1,S
(1350) 0BA2 ABB507      ; 	lda.w oldcol_062,X
(1351) 0BA5 AB3A        ; 	dec.w a
(1352) 0BA7 AB0A        ; 	asl.w a
(1353) 0BA9 18          ; 	clc
(1354) 0BAA CB7501      ; 	adc.w 1,S
(1355) 0BAD CB9501      ; 	sta.w 1,S
(1356) 0BB0 A900        ; 	lda #0
(1357) 0BB2 8B6B        ; 	pli.s
(1358) 0BB4 AB8300      ; 	sta.w 0,I++
(1359)                  ; ;  258:         END;
(1360)                  ; L_076
(1361)                  ; ;  259: 
(1362)                  ; ;  260:         {Wolf reproduction time?}
(1363)                  ; ;  261:         IF     ((t MOD wolfreprotime) = 0)
(1364) 0BB7 ABADCE16    ; 	lda.w t_008
(1365) 0BBB AB48        ; 	pha.w
(1366)                  ; 	lda #12
(1367) 0BBD ABE20C00    ; 	psh.w #12
(1368) 0BC1 207913      ; 	jsr _idiv
(1369) 0BC4 C204        ; 	adj #4
(1370) 0BC6 1B          ; 	swp a
(1371) 0BC7 AB48        ; 	pha.w
(1372) 0BC9 A900        ; 	lda #0
(1373) 0BCB CB4401      ; 	xma.w 1,S
(1374) 0BCE CBD501      ; 	cmp.w 1,S
(1375) 0BD1 C202        ; 	adj #2
(1376) 0BD3 F004        ; 	beq L_083T
(1377) 0BD5 A900        ; 	lda #0
(1378) 0BD7 8002        ; 	bra L_083
(1379) 0BD9 A901        ; L_083T lda #1
(1380)                  ; 	lda #0
(1381)                  ; L_083
(1382)                  ; ;  262:            AND (foodunits[newrow, newcol] > 1) THEN BEGIN
(1383) 0BDB AB48        ; 	pha.w
(1384) 0BDD ABE2C215    ; 	psh.w #foodunits_003
(1385) 0BE1 ABB5FF      ; 	lda.w newrow_063,X
(1386) 0BE4 AB3A        ; 	dec.w a
(1387) 0BE6 AB48        ; 	pha.w
(1388) 0BE8 ABE21200    ; 	psh.w #18
(1389) 0BEC 20A813      ; 	jsr _imul
(1390) 0BEF C204        ; 	adj #4
(1391) 0BF1 18          ; 	clc
(1392) 0BF2 CB7501      ; 	adc.w 1,S
(1393) 0BF5 CB9501      ; 	sta.w 1,S
(1394) 0BF8 ABB5FD      ; 	lda.w newcol_064,X
(1395) 0BFB AB3A        ; 	dec.w a
(1396) 0BFD AB0A        ; 	asl.w a
(1397) 0BFF 18          ; 	clc
(1398) 0C00 CB7501      ; 	adc.w 1,S
(1399) 0C03 CB9501      ; 	sta.w 1,S
(1400) 0C06 8B6B        ; 	pli.s
(1401) 0C08 ABA300      ; 	lda.w 0,I++
(1402)                  ; 	pha.w
(1403)                  ; 	lda #1
(1404)                  ; 	xma.w 1,S
(1405) 0C0B ABC90100    ; 	cmp.w #1
(1406)                  ; 	adj #2
(1407) 0C0F AB1004      ; 	bgt L_084T
(1408) 0C12 A900        ; 	lda #0
(1409) 0C14 8002        ; 	bra L_084
(1410) 0C16 A901        ; L_084T lda #1
(1411)                  ; 	lda #0
(1412)                  ; L_084
(1413) 0C18 CB3501      ; 	and.w 1,S
(1414) 0C1B C202        ; 	adj #2
(1415) 0C1D ABC90100    ; 	cmp.w #1
(1416) 0C21 F003        ; 	beq L_081
(1417) 0C23 4CA00D      ; 	jmp L_082
(1418)                  ; L_081
(1419)                  ; ;  263:         foodunits[newrow, newcol] :=
(1420) 0C26 ABE2C215    ; 	psh.w #foodunits_003
(1421) 0C2A ABB5FF      ; 	lda.w newrow_063,X
(1422) 0C2D AB3A        ; 	dec.w a
(1423) 0C2F AB48        ; 	pha.w
(1424) 0C31 ABE21200    ; 	psh.w #18
(1425) 0C35 20A813      ; 	jsr _imul
(1426) 0C38 C204        ; 	adj #4
(1427) 0C3A 18          ; 	clc
(1428) 0C3B CB7501      ; 	adc.w 1,S
(1429) 0C3E CB9501      ; 	sta.w 1,S
(1430) 0C41 ABB5FD      ; 	lda.w newcol_064,X
(1431) 0C44 AB3A        ; 	dec.w a
(1432) 0C46 AB0A        ; 	asl.w a
(1433) 0C48 18          ; 	clc
(1434) 0C49 CB7501      ; 	adc.w 1,S
(1435) 0C4C CB9501      ; 	sta.w 1,S
(1436)                  ; ;  264:             foodunits[newrow, newcol] DIV 2;
(1437) 0C4F ABE2C215    ; 	psh.w #foodunits_003
(1438) 0C53 ABB5FF      ; 	lda.w newrow_063,X
(1439) 0C56 AB3A        ; 	dec.w a
(1440) 0C58 AB48        ; 	pha.w
(1441) 0C5A ABE21200    ; 	psh.w #18
(1442) 0C5E 20A813      ; 	jsr _imul
(1443) 0C61 C204        ; 	adj #4
(1444) 0C63 18          ; 	clc
(1445) 0C64 CB7501      ; 	adc.w 1,S
(1446) 0C67 CB9501      ; 	sta.w 1,S
(1447) 0C6A ABB5FD      ; 	lda.w newcol_064,X
(1448) 0C6D AB3A        ; 	dec.w a
(1449) 0C6F AB0A        ; 	asl.w a
(1450) 0C71 18          ; 	clc
(1451) 0C72 CB7501      ; 	adc.w 1,S
(1452) 0C75 CB9501      ; 	sta.w 1,S
(1453) 0C78 8B6B        ; 	pli.s
(1454) 0C7A ABA300      ; 	lda.w 0,I++
(1455) 0C7D AB48        ; 	pha.w
(1456)                  ; 	lda #2
(1457) 0C7F ABE20200    ; 	psh.w #2
(1458) 0C83 207913      ; 	jsr _idiv
(1459) 0C86 C204        ; 	adj #4
(1460) 0C88 8B6B        ; 	pli.s
(1461) 0C8A AB8300      ; 	sta.w 0,I++
(1462)                  ; ;  265: 
(1463)                  ; ;  266:         {If moved, then leave behind an offspring.}
(1464)                  ; ;  267:         IF moved THEN BEGIN
(1465) 0C8D ABB5FB      ; 	lda.w moved_065,X
(1466) 0C90 ABC90100    ; 	cmp.w #1
(1467) 0C94 F003        ; 	beq L_085
(1468) 0C96 4CA00D      ; 	jmp L_086
(1469)                  ; L_085
(1470)                  ; ;  268:             island[oldrow, oldcol] := newwolf;
(1471) 0C99 ABE2D014    ; 	psh.w #island_002
(1472) 0C9D ABB509      ; 	lda.w oldrow_061,X
(1473) 0CA0 AB48        ; 	pha.w
(1474) 0CA2 ABE21600    ; 	psh.w #22
(1475) 0CA6 20A813      ; 	jsr _imul
(1476) 0CA9 C204        ; 	adj #4
(1477) 0CAB 18          ; 	clc
(1478) 0CAC CB7501      ; 	adc.w 1,S
(1479) 0CAF CB9501      ; 	sta.w 1,S
(1480) 0CB2 ABB507      ; 	lda.w oldcol_062,X
(1481) 0CB5 AB0A        ; 	asl.w a
(1482) 0CB7 18          ; 	clc
(1483) 0CB8 CB7501      ; 	adc.w 1,S
(1484) 0CBB CB9501      ; 	sta.w 1,S
(1485) 0CBE A902        ; 	lda #2
(1486) 0CC0 8B6B        ; 	pli.s
(1487) 0CC2 AB8300      ; 	sta.w 0,I++
(1488)                  ; ;  269:             foodunits[oldrow, oldcol] :=
(1489) 0CC5 ABE2C215    ; 	psh.w #foodunits_003
(1490) 0CC9 ABB509      ; 	lda.w oldrow_061,X
(1491) 0CCC AB3A        ; 	dec.w a
(1492) 0CCE AB48        ; 	pha.w
(1493) 0CD0 ABE21200    ; 	psh.w #18
(1494) 0CD4 20A813      ; 	jsr _imul
(1495) 0CD7 C204        ; 	adj #4
(1496) 0CD9 18          ; 	clc
(1497) 0CDA CB7501      ; 	adc.w 1,S
(1498) 0CDD CB9501      ; 	sta.w 1,S
(1499) 0CE0 ABB507      ; 	lda.w oldcol_062,X
(1500) 0CE3 AB3A        ; 	dec.w a
(1501) 0CE5 AB0A        ; 	asl.w a
(1502) 0CE7 18          ; 	clc
(1503) 0CE8 CB7501      ; 	adc.w 1,S
(1504) 0CEB CB9501      ; 	sta.w 1,S
(1505)                  ; ;  270:             foodunits[newrow, newcol];
(1506) 0CEE ABE2C215    ; 	psh.w #foodunits_003
(1507) 0CF2 ABB5FF      ; 	lda.w newrow_063,X
(1508) 0CF5 AB3A        ; 	dec.w a
(1509) 0CF7 AB48        ; 	pha.w
(1510) 0CF9 ABE21200    ; 	psh.w #18
(1511) 0CFD 20A813      ; 	jsr _imul
(1512) 0D00 C204        ; 	adj #4
(1513) 0D02 18          ; 	clc
(1514) 0D03 CB7501      ; 	adc.w 1,S
(1515) 0D06 CB9501      ; 	sta.w 1,S
(1516) 0D09 ABB5FD      ; 	lda.w newcol_064,X
(1517) 0D0C AB3A        ; 	dec.w a
(1518) 0D0E AB0A        ; 	asl.w a
(1519) 0D10 18          ; 	clc
(1520) 0D11 CB7501      ; 	adc.w 1,S
(1521) 0D14 CB9501      ; 	sta.w 1,S
(1522) 0D17 8B6B        ; 	pli.s
(1523) 0D19 ABA300      ; 	lda.w 0,I++
(1524) 0D1C 8B6B        ; 	pli.s
(1525) 0D1E AB8300      ; 	sta.w 0,I++
(1526)                  ; ;  271:             numwolves := numwolves + 1;
(1527)                  ; 	lda.w numwolves_005
(1528)                  ; 	pha.w
(1529)                  ; 	lda #1
(1530)                  ; 	clc
(1531)                  ; 	adc.w 1,S
(1532)                  ; 	adj #2
(1533) 0D21 ABEEC816    ; 	inc.w numwolves_005
(1534)                  ; ;  272:             writeln('t =', t:4, ' : Wolf born at ',
(1535) 0D25 ABE2CC14    ; 	psh.w #S_069
(1536) 0D29 ABE20000    ; 	psh.w #0
(1537) 0D2D ABE20300    ; 	psh.w #3
(1538) 0D31 20E013      ; 	jsr _swrite
(1539) 0D34 C206        ; 	adj #6
(1540) 0D36 ABADCE16    ; 	lda.w t_008
(1541) 0D3A AB48        ; 	pha.w
(1542)                  ; 	lda #4
(1543) 0D3C ABE20400    ; 	psh.w #4
(1544) 0D40 20F213      ; 	jsr _iwrite
(1545) 0D43 C204        ; 	adj #4
(1546) 0D45 ABE29714    ; 	psh.w #S_087
(1547) 0D49 ABE20000    ; 	psh.w #0
(1548) 0D4D ABE21000    ; 	psh.w #16
(1549) 0D51 20E013      ; 	jsr _swrite
(1550) 0D54 C206        ; 	adj #6
(1551)                  ; ;  273:                 '[', oldrow:1, ', ', oldcol:1, ']');
(1552)                  ; 	lda #91
(1553) 0D56 ABE25B00    ; 	psh.w #91
(1554) 0D5A ABE20000    ; 	psh.w #0
(1555) 0D5E 20FFFF      ; 	jsr _cwrite
(1556) 0D61 C204        ; 	adj #4
(1557) 0D63 ABB509      ; 	lda.w oldrow_061,X
(1558) 0D66 AB48        ; 	pha.w
(1559)                  ; 	lda #1
(1560) 0D68 ABE20100    ; 	psh.w #1
(1561) 0D6C 20F213      ; 	jsr _iwrite
(1562) 0D6F C204        ; 	adj #4
(1563) 0D71 ABE2BA14    ; 	psh.w #S_071
(1564) 0D75 ABE20000    ; 	psh.w #0
(1565) 0D79 ABE20200    ; 	psh.w #2
(1566) 0D7D 20E013      ; 	jsr _swrite
(1567) 0D80 C206        ; 	adj #6
(1568) 0D82 ABB507      ; 	lda.w oldcol_062,X
(1569) 0D85 AB48        ; 	pha.w
(1570)                  ; 	lda #1
(1571) 0D87 ABE20100    ; 	psh.w #1
(1572) 0D8B 20F213      ; 	jsr _iwrite
(1573) 0D8E C204        ; 	adj #4
(1574)                  ; 	lda #93
(1575) 0D90 ABE25D00    ; 	psh.w #93
(1576) 0D94 ABE20000    ; 	psh.w #0
(1577) 0D98 20FFFF      ; 	jsr _cwrite
(1578) 0D9B C204        ; 	adj #4
(1579) 0D9D 20DA13      ; 	jsr _writeln
(1580)                  ; ;  274:         END;
(1581)                  ; L_086
(1582)                  ; ;  275:         END;
(1583)                  ; L_082
(1584)                  ; ;  276:     END;
(1585)                  ; L_072
(1586)                  ; ;  277:     END {ProcessWolf};
(1587) 0DA0 AB9A        ; 	txs.w
(1588) 0DA2 ABFA        ; 	plx.w
(1589) 0DA4 60          ; 	rts
(1590)                  ; 	.end processwolf_060
(1591)                  ; ;  278: 
(1592)                  ; ;  279: 
(1593)                  ; ;  280: PROCEDURE ProcessRabbit (oldrow, oldcol : index);
(1594)                  ; ;  281: 
(1595)                  ; ;  282:     {Process the rabbit located at island[oldrow, oldcol].}
(1596)                  ; ;  283: 
(1597)                  ; ;  284:     VAR
(1598)                  ; ;  285:     newrow, newcol : index;     {new row and column}
(1599)                  ; ;  286:     moved : boolean;            {true iff rabbit moved}
(1600)                  ; ;  287: 
(1601)                  ; ;  288:     BEGIN
(1602)                  ; oldrow_089 .equ +9
(1603)                  ; oldcol_090 .equ +7
(1604)                  ; newrow_091 .equ -1
(1605)                  ; newcol_092 .equ -3
(1606)                  ; moved_093 .equ -5
(1607)                  ; processrabbit_088 .sub
(1608) 0DA5 ABDA        ; 	phx.w
(1609) 0DA7 ABBA        ; 	tsx.w
(1610) 0DA9 C2FA        ; 	adj #-6
(1611)                  ; ;  289: 
(1612)                  ; ;  290:     {Move to adjacent location, or stay put.}
(1613)                  ; ;  291:     NewLocation(rabbit, oldrow, oldcol, newrow, newcol);
(1614)                  ; 	lda #1
(1615) 0DAB ABE20100    ; 	psh.w #1
(1616) 0DAF ABB509      ; 	lda.w oldrow_089,X
(1617) 0DB2 AB48        ; 	pha.w
(1618) 0DB4 ABB507      ; 	lda.w oldcol_090,X
(1619) 0DB7 AB48        ; 	pha.w
(1620) 0DB9 AB8A        ; 	txa.w
(1621) 0DBB 18          ; 	clc
(1622) 0DBC AB69FFFF    ; 	adc.w #newrow_091
(1623) 0DC0 AB48        ; 	pha.w
(1624) 0DC2 AB8A        ; 	txa.w
(1625) 0DC4 18          ; 	clc
(1626) 0DC5 AB69FDFF    ; 	adc.w #newcol_092
(1627) 0DC9 AB48        ; 	pha.w
(1628) 0DCB ABB505      ; 	lda.w STATIC_LINK,X
(1629) 0DCE AB48        ; 	pha.w
(1630) 0DD0 201306      ; 	jsr newlocation_037
(1631) 0DD3 C20C        ; 	adj #12
(1632)                  ; ;  292:     moved := (newrow <> oldrow) OR (newcol <> oldcol);
(1633) 0DD5 ABB5FF      ; 	lda.w newrow_091,X
(1634)                  ; 	pha.w
(1635)                  ; 	lda.w oldrow_089,X
(1636)                  ; 	xma.w 1,S
(1637) 0DD8 ABD509      ; 	cmp.w oldrow_089,X
(1638)                  ; 	adj #2
(1639) 0DDB D004        ; 	bne L_094T
(1640) 0DDD A900        ; 	lda #0
(1641) 0DDF 8002        ; 	bra L_094
(1642) 0DE1 A901        ; L_094T lda #1
(1643)                  ; 	lda #0
(1644)                  ; L_094
(1645) 0DE3 AB48        ; 	pha.w
(1646) 0DE5 ABB5FD      ; 	lda.w newcol_092,X
(1647)                  ; 	pha.w
(1648)                  ; 	lda.w oldcol_090,X
(1649)                  ; 	xma.w 1,S
(1650) 0DE8 ABD507      ; 	cmp.w oldcol_090,X
(1651)                  ; 	adj #2
(1652) 0DEB D004        ; 	bne L_095T
(1653) 0DED A900        ; 	lda #0
(1654) 0DEF 8002        ; 	bra L_095
(1655) 0DF1 A901        ; L_095T lda #1
(1656)                  ; 	lda #0
(1657)                  ; L_095
(1658) 0DF3 CB1501      ; 	ora.w 1,S
(1659) 0DF6 C202        ; 	adj #2
(1660) 0DF8 AB95FB      ; 	sta.w moved_093,X
(1661)                  ; ;  293:     IF moved THEN BEGIN
(1662) 0DFB ABB5FB      ; 	lda.w moved_093,X
(1663) 0DFE ABC90100    ; 	cmp.w #1
(1664) 0E02 F003        ; 	beq L_096
(1665) 0E04 4C5F0E      ; 	jmp L_097
(1666)                  ; L_096
(1667)                  ; ;  294:         island[newrow, newcol] := newrabbit;
(1668) 0E07 ABE2D014    ; 	psh.w #island_002
(1669) 0E0B ABB5FF      ; 	lda.w newrow_091,X
(1670) 0E0E AB48        ; 	pha.w
(1671) 0E10 ABE21600    ; 	psh.w #22
(1672) 0E14 20A813      ; 	jsr _imul
(1673) 0E17 C204        ; 	adj #4
(1674) 0E19 18          ; 	clc
(1675) 0E1A CB7501      ; 	adc.w 1,S
(1676) 0E1D CB9501      ; 	sta.w 1,S
(1677) 0E20 ABB5FD      ; 	lda.w newcol_092,X
(1678) 0E23 AB0A        ; 	asl.w a
(1679) 0E25 18          ; 	clc
(1680) 0E26 CB7501      ; 	adc.w 1,S
(1681) 0E29 CB9501      ; 	sta.w 1,S
(1682) 0E2C A903        ; 	lda #3
(1683) 0E2E 8B6B        ; 	pli.s
(1684) 0E30 AB8300      ; 	sta.w 0,I++
(1685)                  ; ;  295:         island[oldrow, oldcol] := empty;
(1686) 0E33 ABE2D014    ; 	psh.w #island_002
(1687) 0E37 ABB509      ; 	lda.w oldrow_089,X
(1688) 0E3A AB48        ; 	pha.w
(1689) 0E3C ABE21600    ; 	psh.w #22
(1690) 0E40 20A813      ; 	jsr _imul
(1691) 0E43 C204        ; 	adj #4
(1692) 0E45 18          ; 	clc
(1693) 0E46 CB7501      ; 	adc.w 1,S
(1694) 0E49 CB9501      ; 	sta.w 1,S
(1695) 0E4C ABB507      ; 	lda.w oldcol_090,X
(1696) 0E4F AB0A        ; 	asl.w a
(1697) 0E51 18          ; 	clc
(1698) 0E52 CB7501      ; 	adc.w 1,S
(1699) 0E55 CB9501      ; 	sta.w 1,S
(1700) 0E58 A904        ; 	lda #4
(1701) 0E5A 8B6B        ; 	pli.s
(1702) 0E5C AB8300      ; 	sta.w 0,I++
(1703)                  ; ;  296:     END;
(1704)                  ; L_097
(1705)                  ; ;  297: 
(1706)                  ; ;  298:     {Rabbit reproduction time?}
(1707)                  ; ;  299:     IF (t MOD rabbitreprotime) = 0 THEN BEGIN
(1708) 0E5F ABADCE16    ; 	lda.w t_008
(1709) 0E63 AB48        ; 	pha.w
(1710)                  ; 	lda #5
(1711) 0E65 ABE20500    ; 	psh.w #5
(1712) 0E69 207913      ; 	jsr _idiv
(1713) 0E6C C204        ; 	adj #4
(1714) 0E6E 1B          ; 	swp a
(1715) 0E6F AB48        ; 	pha.w
(1716) 0E71 A900        ; 	lda #0
(1717) 0E73 CB4401      ; 	xma.w 1,S
(1718) 0E76 CBD501      ; 	cmp.w 1,S
(1719) 0E79 C202        ; 	adj #2
(1720) 0E7B F004        ; 	beq L_100T
(1721) 0E7D A900        ; 	lda #0
(1722) 0E7F 8002        ; 	bra L_100
(1723) 0E81 A901        ; L_100T lda #1
(1724)                  ; 	lda #0
(1725)                  ; L_100
(1726) 0E83 ABC90100    ; 	cmp.w #1
(1727) 0E87 F003        ; 	beq L_098
(1728) 0E89 4C430F      ; 	jmp L_099
(1729)                  ; L_098
(1730)                  ; ;  300: 
(1731)                  ; ;  301:         {If moved, then leave behind an offspring.}
(1732)                  ; ;  302:         IF moved THEN BEGIN
(1733) 0E8C ABB5FB      ; 	lda.w moved_093,X
(1734) 0E8F ABC90100    ; 	cmp.w #1
(1735) 0E93 F003        ; 	beq L_101
(1736) 0E95 4C430F      ; 	jmp L_102
(1737)                  ; L_101
(1738)                  ; ;  303:         island[oldrow, oldcol] := newrabbit;
(1739) 0E98 ABE2D014    ; 	psh.w #island_002
(1740) 0E9C ABB509      ; 	lda.w oldrow_089,X
(1741) 0E9F AB48        ; 	pha.w
(1742) 0EA1 ABE21600    ; 	psh.w #22
(1743) 0EA5 20A813      ; 	jsr _imul
(1744) 0EA8 C204        ; 	adj #4
(1745) 0EAA 18          ; 	clc
(1746) 0EAB CB7501      ; 	adc.w 1,S
(1747) 0EAE CB9501      ; 	sta.w 1,S
(1748) 0EB1 ABB507      ; 	lda.w oldcol_090,X
(1749) 0EB4 AB0A        ; 	asl.w a
(1750) 0EB6 18          ; 	clc
(1751) 0EB7 CB7501      ; 	adc.w 1,S
(1752) 0EBA CB9501      ; 	sta.w 1,S
(1753) 0EBD A903        ; 	lda #3
(1754) 0EBF 8B6B        ; 	pli.s
(1755) 0EC1 AB8300      ; 	sta.w 0,I++
(1756)                  ; ;  304:         numrabbits := numrabbits + 1;
(1757)                  ; 	lda.w numrabbits_006
(1758)                  ; 	pha.w
(1759)                  ; 	lda #1
(1760)                  ; 	clc
(1761)                  ; 	adc.w 1,S
(1762)                  ; 	adj #2
(1763) 0EC4 ABEECA16    ; 	inc.w numrabbits_006
(1764)                  ; ;  305:         writeln('t =', t:4, ' : Rabbit born at ',
(1765) 0EC8 ABE2CC14    ; 	psh.w #S_069
(1766) 0ECC ABE20000    ; 	psh.w #0
(1767) 0ED0 ABE20300    ; 	psh.w #3
(1768) 0ED4 20E013      ; 	jsr _swrite
(1769) 0ED7 C206        ; 	adj #6
(1770) 0ED9 ABADCE16    ; 	lda.w t_008
(1771) 0EDD AB48        ; 	pha.w
(1772)                  ; 	lda #4
(1773) 0EDF ABE20400    ; 	psh.w #4
(1774) 0EE3 20F213      ; 	jsr _iwrite
(1775) 0EE6 C204        ; 	adj #4
(1776) 0EE8 ABE28514    ; 	psh.w #S_103
(1777) 0EEC ABE20000    ; 	psh.w #0
(1778) 0EF0 ABE21200    ; 	psh.w #18
(1779) 0EF4 20E013      ; 	jsr _swrite
(1780) 0EF7 C206        ; 	adj #6
(1781)                  ; ;  306:             '[', oldrow:1, ', ', oldcol:1, ']');
(1782)                  ; 	lda #91
(1783) 0EF9 ABE25B00    ; 	psh.w #91
(1784) 0EFD ABE20000    ; 	psh.w #0
(1785) 0F01 20FFFF      ; 	jsr _cwrite
(1786) 0F04 C204        ; 	adj #4
(1787) 0F06 ABB509      ; 	lda.w oldrow_089,X
(1788) 0F09 AB48        ; 	pha.w
(1789)                  ; 	lda #1
(1790) 0F0B ABE20100    ; 	psh.w #1
(1791) 0F0F 20F213      ; 	jsr _iwrite
(1792) 0F12 C204        ; 	adj #4
(1793) 0F14 ABE2BA14    ; 	psh.w #S_071
(1794) 0F18 ABE20000    ; 	psh.w #0
(1795) 0F1C ABE20200    ; 	psh.w #2
(1796) 0F20 20E013      ; 	jsr _swrite
(1797) 0F23 C206        ; 	adj #6
(1798) 0F25 ABB507      ; 	lda.w oldcol_090,X
(1799) 0F28 AB48        ; 	pha.w
(1800)                  ; 	lda #1
(1801) 0F2A ABE20100    ; 	psh.w #1
(1802) 0F2E 20F213      ; 	jsr _iwrite
(1803) 0F31 C204        ; 	adj #4
(1804)                  ; 	lda #93
(1805) 0F33 ABE25D00    ; 	psh.w #93
(1806) 0F37 ABE20000    ; 	psh.w #0
(1807) 0F3B 20FFFF      ; 	jsr _cwrite
(1808) 0F3E C204        ; 	adj #4
(1809) 0F40 20DA13      ; 	jsr _writeln
(1810)                  ; ;  307:         END;
(1811)                  ; L_102
(1812)                  ; ;  308:     END;
(1813)                  ; L_099
(1814)                  ; ;  309:     END {ProcessRabbit};
(1815) 0F43 AB9A        ; 	txs.w
(1816) 0F45 ABFA        ; 	plx.w
(1817) 0F47 60          ; 	rts
(1818)                  ; 	.end processrabbit_088
(1819)                  ; ;  310: 
(1820)                  ; ;  311: 
(1821)                  ; ;  312: PROCEDURE EventsOccur;
(1822)                  ; ;  313: 
(1823)                  ; ;  314:     {Perform the events that occur for each time unit.}
(1824)                  ; ;  315: 
(1825)                  ; ;  316:     VAR
(1826)                  ; ;  317:     row, col : index;
(1827)                  ; ;  318: 
(1828)                  ; ;  319:     BEGIN
(1829)                  ; row_105 .equ -1
(1830)                  ; col_106 .equ -3
(1831)                  ; eventsoccur_104 .sub
(1832) 0F48 ABDA        ; 	phx.w
(1833) 0F4A ABBA        ; 	tsx.w
(1834) 0F4C C2FC        ; 	adj #-4
(1835)                  ; ;  320: 
(1836)                  ; ;  321:     {Scan for wolves and process each one in turn.}
(1837)                  ; ;  322:     FOR row := 1 TO size DO BEGIN
(1838) 0F4E A901        ; 	lda #1
(1839) 0F50 AB95FF      ; 	sta.w row_105,X
(1840)                  ; L_107
(1841) 0F53 A909        ; 	lda #9
(1842) 0F55 ABD5FF      ; 	cmp.w row_105,X
(1843) 0F58 AB5003      ; 	bge L_108
(1844) 0F5B 4CD00F      ; 	jmp L_109
(1845)                  ; L_108
(1846)                  ; ;  323:         FOR col := 1 TO size DO BEGIN
(1847) 0F5E A901        ; 	lda #1
(1848) 0F60 AB95FD      ; 	sta.w col_106,X
(1849)                  ; L_110
(1850) 0F63 A909        ; 	lda #9
(1851) 0F65 ABD5FD      ; 	cmp.w col_106,X
(1852) 0F68 AB5003      ; 	bge L_111
(1853) 0F6B 4CC70F      ; 	jmp L_112
(1854)                  ; L_111
(1855)                  ; ;  324:         IF island[row, col] = wolf THEN BEGIN
(1856) 0F6E ABE2D014    ; 	psh.w #island_002
(1857) 0F72 ABB5FF      ; 	lda.w row_105,X
(1858) 0F75 AB48        ; 	pha.w
(1859) 0F77 ABE21600    ; 	psh.w #22
(1860) 0F7B 20A813      ; 	jsr _imul
(1861) 0F7E C204        ; 	adj #4
(1862) 0F80 18          ; 	clc
(1863) 0F81 CB7501      ; 	adc.w 1,S
(1864) 0F84 CB9501      ; 	sta.w 1,S
(1865) 0F87 ABB5FD      ; 	lda.w col_106,X
(1866) 0F8A AB0A        ; 	asl.w a
(1867) 0F8C 18          ; 	clc
(1868) 0F8D CB7501      ; 	adc.w 1,S
(1869) 0F90 CB9501      ; 	sta.w 1,S
(1870) 0F93 8B6B        ; 	pli.s
(1871) 0F95 ABA300      ; 	lda.w 0,I++
(1872)                  ; 	pha.w
(1873)                  ; 	lda #0
(1874)                  ; 	xma.w 1,S
(1875) 0F98 ABC90000    ; 	cmp.w #0
(1876)                  ; 	adj #2
(1877) 0F9C F004        ; 	beq L_115T
(1878) 0F9E A900        ; 	lda #0
(1879) 0FA0 8002        ; 	bra L_115
(1880) 0FA2 A901        ; L_115T lda #1
(1881)                  ; 	lda #0
(1882)                  ; L_115
(1883) 0FA4 ABC90100    ; 	cmp.w #1
(1884) 0FA8 F003        ; 	beq L_113
(1885) 0FAA 4CC10F      ; 	jmp L_114
(1886)                  ; L_113
(1887)                  ; ;  325:             ProcessWolf(row, col);
(1888) 0FAD ABB5FF      ; 	lda.w row_105,X
(1889) 0FB0 AB48        ; 	pha.w
(1890) 0FB2 ABB5FD      ; 	lda.w col_106,X
(1891) 0FB5 AB48        ; 	pha.w
(1892) 0FB7 ABB505      ; 	lda.w STATIC_LINK,X
(1893) 0FBA AB48        ; 	pha.w
(1894) 0FBC 20D607      ; 	jsr processwolf_060
(1895) 0FBF C206        ; 	adj #6
(1896)                  ; ;  326:         END;
(1897)                  ; L_114
(1898)                  ; ;  327:         END;
(1899) 0FC1 ABF6FD      ; 	inc.w col_106,X
(1900) 0FC4 4C630F      ; 	jmp L_110
(1901)                  ; L_112
(1902) 0FC7 ABD6FD      ; 	dec.w col_106,X
(1903)                  ; ;  328:     END;
(1904) 0FCA ABF6FF      ; 	inc.w row_105,X
(1905) 0FCD 4C530F      ; 	jmp L_107
(1906)                  ; L_109
(1907) 0FD0 ABD6FF      ; 	dec.w row_105,X
(1908)                  ; ;  329: 
(1909)                  ; ;  330: 
(1910)                  ; ;  331:     {Scan for rabbits and process each one in turn.}
(1911)                  ; ;  332:     FOR row := 1 TO size DO BEGIN
(1912) 0FD3 A901        ; 	lda #1
(1913) 0FD5 AB95FF      ; 	sta.w row_105,X
(1914)                  ; L_116
(1915) 0FD8 A909        ; 	lda #9
(1916) 0FDA ABD5FF      ; 	cmp.w row_105,X
(1917) 0FDD AB5003      ; 	bge L_117
(1918) 0FE0 4C5510      ; 	jmp L_118
(1919)                  ; L_117
(1920)                  ; ;  333:         FOR col := 1 TO size DO BEGIN
(1921) 0FE3 A901        ; 	lda #1
(1922) 0FE5 AB95FD      ; 	sta.w col_106,X
(1923)                  ; L_119
(1924) 0FE8 A909        ; 	lda #9
(1925) 0FEA ABD5FD      ; 	cmp.w col_106,X
(1926) 0FED AB5003      ; 	bge L_120
(1927) 0FF0 4C4C10      ; 	jmp L_121
(1928)                  ; L_120
(1929)                  ; ;  334:         IF island[row, col] = rabbit THEN BEGIN
(1930) 0FF3 ABE2D014    ; 	psh.w #island_002
(1931) 0FF7 ABB5FF      ; 	lda.w row_105,X
(1932) 0FFA AB48        ; 	pha.w
(1933) 0FFC ABE21600    ; 	psh.w #22
(1934) 1000 20A813      ; 	jsr _imul
(1935) 1003 C204        ; 	adj #4
(1936) 1005 18          ; 	clc
(1937) 1006 CB7501      ; 	adc.w 1,S
(1938) 1009 CB9501      ; 	sta.w 1,S
(1939) 100C ABB5FD      ; 	lda.w col_106,X
(1940) 100F AB0A        ; 	asl.w a
(1941) 1011 18          ; 	clc
(1942) 1012 CB7501      ; 	adc.w 1,S
(1943) 1015 CB9501      ; 	sta.w 1,S
(1944) 1018 8B6B        ; 	pli.s
(1945) 101A ABA300      ; 	lda.w 0,I++
(1946)                  ; 	pha.w
(1947)                  ; 	lda #1
(1948)                  ; 	xma.w 1,S
(1949) 101D ABC90100    ; 	cmp.w #1
(1950)                  ; 	adj #2
(1951) 1021 F004        ; 	beq L_124T
(1952) 1023 A900        ; 	lda #0
(1953) 1025 8002        ; 	bra L_124
(1954) 1027 A901        ; L_124T lda #1
(1955)                  ; 	lda #0
(1956)                  ; L_124
(1957) 1029 ABC90100    ; 	cmp.w #1
(1958) 102D F003        ; 	beq L_122
(1959) 102F 4C4610      ; 	jmp L_123
(1960)                  ; L_122
(1961)                  ; ;  335:             ProcessRabbit(row, col);
(1962) 1032 ABB5FF      ; 	lda.w row_105,X
(1963) 1035 AB48        ; 	pha.w
(1964) 1037 ABB5FD      ; 	lda.w col_106,X
(1965) 103A AB48        ; 	pha.w
(1966) 103C ABB505      ; 	lda.w STATIC_LINK,X
(1967) 103F AB48        ; 	pha.w
(1968) 1041 20A50D      ; 	jsr processrabbit_088
(1969) 1044 C206        ; 	adj #6
(1970)                  ; ;  336:         END;
(1971)                  ; L_123
(1972)                  ; ;  337:         END;
(1973) 1046 ABF6FD      ; 	inc.w col_106,X
(1974) 1049 4CE80F      ; 	jmp L_119
(1975)                  ; L_121
(1976) 104C ABD6FD      ; 	dec.w col_106,X
(1977)                  ; ;  338:     END;
(1978) 104F ABF6FF      ; 	inc.w row_105,X
(1979) 1052 4CD80F      ; 	jmp L_116
(1980)                  ; L_118
(1981) 1055 ABD6FF      ; 	dec.w row_105,X
(1982)                  ; ;  339:     END {EventsOccur};
(1983) 1058 AB9A        ; 	txs.w
(1984) 105A ABFA        ; 	plx.w
(1985) 105C 60          ; 	rts
(1986)                  ; 	.end eventsoccur_104
(1987)                  ; ;  340: 
(1988)                  ; ;  341: 
(1989)                  ; ;  342: PROCEDURE PrintIsland;
(1990)                  ; ;  343: 
(1991)                  ; ;  344:     {Print the island.}
(1992)                  ; ;  345: 
(1993)                  ; ;  346:     VAR
(1994)                  ; ;  347:     row, col : index;
(1995)                  ; ;  348:     cnts     : contents;
(1996)                  ; ;  349: 
(1997)                  ; ;  350:     BEGIN
(1998)                  ; row_126 .equ -1
(1999)                  ; col_127 .equ -3
(2000)                  ; cnts_128 .equ -5
(2001)                  ; printisland_125 .sub
(2002) 105D ABDA        ; 	phx.w
(2003) 105F ABBA        ; 	tsx.w
(2004) 1061 C2FA        ; 	adj #-6
(2005)                  ; ;  351:     writeln;
(2006) 1063 20DA13      ; 	jsr _writeln
(2007)                  ; ;  352:     writeln('t =', t:4, ' : Wolf Island');
(2008) 1066 ABE2CC14    ; 	psh.w #S_069
(2009) 106A ABE20000    ; 	psh.w #0
(2010) 106E ABE20300    ; 	psh.w #3
(2011) 1072 20E013      ; 	jsr _swrite
(2012) 1075 C206        ; 	adj #6
(2013) 1077 ABADCE16    ; 	lda.w t_008
(2014) 107B AB48        ; 	pha.w
(2015)                  ; 	lda #4
(2016) 107D ABE20400    ; 	psh.w #4
(2017) 1081 20F213      ; 	jsr _iwrite
(2018) 1084 C204        ; 	adj #4
(2019) 1086 ABE27714    ; 	psh.w #S_129
(2020) 108A ABE20000    ; 	psh.w #0
(2021) 108E ABE20E00    ; 	psh.w #14
(2022) 1092 20E013      ; 	jsr _swrite
(2023) 1095 C206        ; 	adj #6
(2024) 1097 20DA13      ; 	jsr _writeln
(2025)                  ; ;  353:     writeln;
(2026) 109A 20DA13      ; 	jsr _writeln
(2027)                  ; ;  354: 
(2028)                  ; ;  355:     FOR row := 1 TO size DO BEGIN
(2029) 109D A901        ; 	lda #1
(2030) 109F AB95FF      ; 	sta.w row_126,X
(2031)                  ; L_130
(2032) 10A2 A909        ; 	lda #9
(2033) 10A4 ABD5FF      ; 	cmp.w row_126,X
(2034) 10A7 AB5003      ; 	bge L_131
(2035) 10AA 4C8A11      ; 	jmp L_132
(2036)                  ; L_131
(2037)                  ; ;  356:         write(' ':10);
(2038)                  ; 	lda #32
(2039) 10AD ABE22000    ; 	psh.w #32
(2040)                  ; 	lda #10
(2041) 10B1 ABE20A00    ; 	psh.w #10
(2042) 10B5 20FFFF      ; 	jsr _cwrite
(2043) 10B8 C204        ; 	adj #4
(2044)                  ; ;  357:         FOR col := 1 TO size DO BEGIN
(2045) 10BA A901        ; 	lda #1
(2046) 10BC AB95FD      ; 	sta.w col_127,X
(2047)                  ; L_133
(2048) 10BF A909        ; 	lda #9
(2049) 10C1 ABD5FD      ; 	cmp.w col_127,X
(2050) 10C4 AB5003      ; 	bge L_134
(2051) 10C7 4C7E11      ; 	jmp L_135
(2052)                  ; L_134
(2053)                  ; ;  358:         cnts := island[row, col];
(2054) 10CA ABE2D014    ; 	psh.w #island_002
(2055) 10CE ABB5FF      ; 	lda.w row_126,X
(2056) 10D1 AB48        ; 	pha.w
(2057) 10D3 ABE21600    ; 	psh.w #22
(2058) 10D7 20A813      ; 	jsr _imul
(2059) 10DA C204        ; 	adj #4
(2060) 10DC 18          ; 	clc
(2061) 10DD CB7501      ; 	adc.w 1,S
(2062) 10E0 CB9501      ; 	sta.w 1,S
(2063) 10E3 ABB5FD      ; 	lda.w col_127,X
(2064) 10E6 AB0A        ; 	asl.w a
(2065) 10E8 18          ; 	clc
(2066) 10E9 CB7501      ; 	adc.w 1,S
(2067) 10EC CB9501      ; 	sta.w 1,S
(2068) 10EF 8B6B        ; 	pli.s
(2069) 10F1 ABA300      ; 	lda.w 0,I++
(2070) 10F4 AB95FB      ; 	sta.w cnts_128,X
(2071)                  ; ;  359:         IF      cnts = empty  THEN write('. ')
(2072) 10F7 ABB5FB      ; 	lda.w cnts_128,X
(2073)                  ; 	pha.w
(2074)                  ; 	lda #4
(2075)                  ; 	xma.w 1,S
(2076) 10FA ABC90400    ; 	cmp.w #4
(2077)                  ; 	adj #2
(2078) 10FE F004        ; 	beq L_138T
(2079) 1100 A900        ; 	lda #0
(2080) 1102 8002        ; 	bra L_138
(2081) 1104 A901        ; L_138T lda #1
(2082)                  ; 	lda #0
(2083)                  ; L_138
(2084) 1106 ABC90100    ; 	cmp.w #1
(2085) 110A F003        ; 	beq L_136
(2086) 110C 4C2311      ; 	jmp L_137
(2087)                  ; L_136
(2088) 110F ABE27514    ; 	psh.w #S_139
(2089) 1113 ABE20000    ; 	psh.w #0
(2090) 1117 ABE20200    ; 	psh.w #2
(2091) 111B 20E013      ; 	jsr _swrite
(2092) 111E C206        ; 	adj #6
(2093)                  ; ;  360:         ELSE IF cnts = wolf   THEN write('W ')
(2094) 1120 4C7811      ; 	jmp L_140
(2095)                  ; L_137
(2096) 1123 ABB5FB      ; 	lda.w cnts_128,X
(2097)                  ; 	pha.w
(2098)                  ; 	lda #0
(2099)                  ; 	xma.w 1,S
(2100) 1126 ABC90000    ; 	cmp.w #0
(2101)                  ; 	adj #2
(2102) 112A F004        ; 	beq L_143T
(2103) 112C A900        ; 	lda #0
(2104) 112E 8002        ; 	bra L_143
(2105) 1130 A901        ; L_143T lda #1
(2106)                  ; 	lda #0
(2107)                  ; L_143
(2108) 1132 ABC90100    ; 	cmp.w #1
(2109) 1136 F003        ; 	beq L_141
(2110) 1138 4C4F11      ; 	jmp L_142
(2111)                  ; L_141
(2112) 113B ABE27314    ; 	psh.w #S_144
(2113) 113F ABE20000    ; 	psh.w #0
(2114) 1143 ABE20200    ; 	psh.w #2
(2115) 1147 20E013      ; 	jsr _swrite
(2116) 114A C206        ; 	adj #6
(2117)                  ; ;  361:         ELSE IF cnts = rabbit THEN write('r ')
(2118) 114C 4C7811      ; 	jmp L_145
(2119)                  ; L_142
(2120) 114F ABB5FB      ; 	lda.w cnts_128,X
(2121)                  ; 	pha.w
(2122)                  ; 	lda #1
(2123)                  ; 	xma.w 1,S
(2124) 1152 ABC90100    ; 	cmp.w #1
(2125)                  ; 	adj #2
(2126) 1156 F004        ; 	beq L_148T
(2127) 1158 A900        ; 	lda #0
(2128) 115A 8002        ; 	bra L_148
(2129) 115C A901        ; L_148T lda #1
(2130)                  ; 	lda #0
(2131)                  ; L_148
(2132) 115E ABC90100    ; 	cmp.w #1
(2133) 1162 F003        ; 	beq L_146
(2134) 1164 4C7811      ; 	jmp L_147
(2135)                  ; L_146
(2136) 1167 ABE27114    ; 	psh.w #S_149
(2137) 116B ABE20000    ; 	psh.w #0
(2138) 116F ABE20200    ; 	psh.w #2
(2139) 1173 20E013      ; 	jsr _swrite
(2140) 1176 C206        ; 	adj #6
(2141)                  ; ;  362:         END;
(2142)                  ; L_147
(2143)                  ; L_145
(2144)                  ; L_140
(2145) 1178 ABF6FD      ; 	inc.w col_127,X
(2146) 117B 4CBF10      ; 	jmp L_133
(2147)                  ; L_135
(2148) 117E ABD6FD      ; 	dec.w col_127,X
(2149)                  ; ;  363:         writeln;
(2150) 1181 20DA13      ; 	jsr _writeln
(2151)                  ; ;  364:     END;
(2152) 1184 ABF6FF      ; 	inc.w row_126,X
(2153) 1187 4CA210      ; 	jmp L_130
(2154)                  ; L_132
(2155) 118A ABD6FF      ; 	dec.w row_126,X
(2156)                  ; ;  365:     END {PrintIsland};
(2157) 118D AB9A        ; 	txs.w
(2158) 118F ABFA        ; 	plx.w
(2159) 1191 60          ; 	rts
(2160)                  ; 	.end printisland_125
(2161)                  ; ;  366: 
(2162)                  ; ;  367: 
(2163)                  ; ;  368: PROCEDURE ResetIsland;
(2164)                  ; ;  369: 
(2165)                  ; ;  370:     {Reset the island by setting each newwolf to wolf
(2166)                  ; ;  371:      and each newrabbit to rabbit.}
(2167)                  ; ;  372: 
(2168)                  ; ;  373:     VAR
(2169)                  ; ;  374:     row, col : index;
(2170)                  ; ;  375: 
(2171)                  ; ;  376:     BEGIN
(2172)                  ; row_151 .equ -1
(2173)                  ; col_152 .equ -3
(2174)                  ; resetisland_150 .sub
(2175) 1192 ABDA        ; 	phx.w
(2176) 1194 ABBA        ; 	tsx.w
(2177) 1196 C2FC        ; 	adj #-4
(2178)                  ; ;  377:     FOR row := 1 TO size DO BEGIN
(2179) 1198 A901        ; 	lda #1
(2180) 119A AB95FF      ; 	sta.w row_151,X
(2181)                  ; L_153
(2182) 119D A909        ; 	lda #9
(2183) 119F ABD5FF      ; 	cmp.w row_151,X
(2184) 11A2 AB5003      ; 	bge L_154
(2185) 11A5 4CA012      ; 	jmp L_155
(2186)                  ; L_154
(2187)                  ; ;  378:         FOR col := 1 TO size DO BEGIN
(2188) 11A8 A901        ; 	lda #1
(2189) 11AA AB95FD      ; 	sta.w col_152,X
(2190)                  ; L_156
(2191) 11AD A909        ; 	lda #9
(2192) 11AF ABD5FD      ; 	cmp.w col_152,X
(2193) 11B2 AB5003      ; 	bge L_157
(2194) 11B5 4C9712      ; 	jmp L_158
(2195)                  ; L_157
(2196)                  ; ;  379:         IF island[row, col] = newwolf THEN BEGIN
(2197) 11B8 ABE2D014    ; 	psh.w #island_002
(2198) 11BC ABB5FF      ; 	lda.w row_151,X
(2199) 11BF AB48        ; 	pha.w
(2200) 11C1 ABE21600    ; 	psh.w #22
(2201) 11C5 20A813      ; 	jsr _imul
(2202) 11C8 C204        ; 	adj #4
(2203) 11CA 18          ; 	clc
(2204) 11CB CB7501      ; 	adc.w 1,S
(2205) 11CE CB9501      ; 	sta.w 1,S
(2206) 11D1 ABB5FD      ; 	lda.w col_152,X
(2207) 11D4 AB0A        ; 	asl.w a
(2208) 11D6 18          ; 	clc
(2209) 11D7 CB7501      ; 	adc.w 1,S
(2210) 11DA CB9501      ; 	sta.w 1,S
(2211) 11DD 8B6B        ; 	pli.s
(2212) 11DF ABA300      ; 	lda.w 0,I++
(2213)                  ; 	pha.w
(2214)                  ; 	lda #2
(2215)                  ; 	xma.w 1,S
(2216) 11E2 ABC90200    ; 	cmp.w #2
(2217)                  ; 	adj #2
(2218) 11E6 F004        ; 	beq L_161T
(2219) 11E8 A900        ; 	lda #0
(2220) 11EA 8002        ; 	bra L_161
(2221) 11EC A901        ; L_161T lda #1
(2222)                  ; 	lda #0
(2223)                  ; L_161
(2224) 11EE ABC90100    ; 	cmp.w #1
(2225) 11F2 F003        ; 	beq L_159
(2226) 11F4 4C2612      ; 	jmp L_160
(2227)                  ; L_159
(2228)                  ; ;  380:             island[row, col] := wolf;
(2229) 11F7 ABE2D014    ; 	psh.w #island_002
(2230) 11FB ABB5FF      ; 	lda.w row_151,X
(2231) 11FE AB48        ; 	pha.w
(2232) 1200 ABE21600    ; 	psh.w #22
(2233) 1204 20A813      ; 	jsr _imul
(2234) 1207 C204        ; 	adj #4
(2235) 1209 18          ; 	clc
(2236) 120A CB7501      ; 	adc.w 1,S
(2237) 120D CB9501      ; 	sta.w 1,S
(2238) 1210 ABB5FD      ; 	lda.w col_152,X
(2239) 1213 AB0A        ; 	asl.w a
(2240) 1215 18          ; 	clc
(2241) 1216 CB7501      ; 	adc.w 1,S
(2242) 1219 CB9501      ; 	sta.w 1,S
(2243) 121C A900        ; 	lda #0
(2244) 121E 8B6B        ; 	pli.s
(2245) 1220 AB8300      ; 	sta.w 0,I++
(2246)                  ; ;  381:         END
(2247)                  ; ;  382:         ELSE IF island[row, col] = newrabbit THEN BEGIN
(2248) 1223 4C9112      ; 	jmp L_162
(2249)                  ; L_160
(2250) 1226 ABE2D014    ; 	psh.w #island_002
(2251) 122A ABB5FF      ; 	lda.w row_151,X
(2252) 122D AB48        ; 	pha.w
(2253) 122F ABE21600    ; 	psh.w #22
(2254) 1233 20A813      ; 	jsr _imul
(2255) 1236 C204        ; 	adj #4
(2256) 1238 18          ; 	clc
(2257) 1239 CB7501      ; 	adc.w 1,S
(2258) 123C CB9501      ; 	sta.w 1,S
(2259) 123F ABB5FD      ; 	lda.w col_152,X
(2260) 1242 AB0A        ; 	asl.w a
(2261) 1244 18          ; 	clc
(2262) 1245 CB7501      ; 	adc.w 1,S
(2263) 1248 CB9501      ; 	sta.w 1,S
(2264) 124B 8B6B        ; 	pli.s
(2265) 124D ABA300      ; 	lda.w 0,I++
(2266)                  ; 	pha.w
(2267)                  ; 	lda #3
(2268)                  ; 	xma.w 1,S
(2269) 1250 ABC90300    ; 	cmp.w #3
(2270)                  ; 	adj #2
(2271) 1254 F004        ; 	beq L_165T
(2272) 1256 A900        ; 	lda #0
(2273) 1258 8002        ; 	bra L_165
(2274) 125A A901        ; L_165T lda #1
(2275)                  ; 	lda #0
(2276)                  ; L_165
(2277) 125C ABC90100    ; 	cmp.w #1
(2278) 1260 F003        ; 	beq L_163
(2279) 1262 4C9112      ; 	jmp L_164
(2280)                  ; L_163
(2281)                  ; ;  383:             island[row, col] := rabbit;
(2282) 1265 ABE2D014    ; 	psh.w #island_002
(2283) 1269 ABB5FF      ; 	lda.w row_151,X
(2284) 126C AB48        ; 	pha.w
(2285) 126E ABE21600    ; 	psh.w #22
(2286) 1272 20A813      ; 	jsr _imul
(2287) 1275 C204        ; 	adj #4
(2288) 1277 18          ; 	clc
(2289) 1278 CB7501      ; 	adc.w 1,S
(2290) 127B CB9501      ; 	sta.w 1,S
(2291) 127E ABB5FD      ; 	lda.w col_152,X
(2292) 1281 AB0A        ; 	asl.w a
(2293) 1283 18          ; 	clc
(2294) 1284 CB7501      ; 	adc.w 1,S
(2295) 1287 CB9501      ; 	sta.w 1,S
(2296) 128A A901        ; 	lda #1
(2297) 128C 8B6B        ; 	pli.s
(2298) 128E AB8300      ; 	sta.w 0,I++
(2299)                  ; ;  384:         END;
(2300)                  ; L_164
(2301)                  ; L_162
(2302)                  ; ;  385:         END;
(2303) 1291 ABF6FD      ; 	inc.w col_152,X
(2304) 1294 4CAD11      ; 	jmp L_156
(2305)                  ; L_158
(2306) 1297 ABD6FD      ; 	dec.w col_152,X
(2307)                  ; ;  386:     END;
(2308) 129A ABF6FF      ; 	inc.w row_151,X
(2309) 129D 4C9D11      ; 	jmp L_153
(2310)                  ; L_155
(2311) 12A0 ABD6FF      ; 	dec.w row_151,X
(2312)                  ; ;  387:     END {ResetIsland};
(2313) 12A3 AB9A        ; 	txs.w
(2314) 12A5 ABFA        ; 	plx.w
(2315) 12A7 60          ; 	rts
(2316)                  ; 	.end resetisland_150
(2317)                  ; ;  388: 
(2318)                  ; ;  389: 
(2319)                  ; ;  390: BEGIN {WolfIsland}
(2320)                  ; _pc65_main .sub
(2321) 12A8 ABDA        ; 	phx.w
(2322) 12AA ABBA        ; 	tsx.w
(2323)                  ; ;  391: 
(2324)                  ; ;  392:     Initialize;
(2325) 12AC ABDA        ; 	phx.w
(2326) 12AE 201F02      ; 	jsr initialize_013
(2327) 12B1 C202        ; 	adj #2
(2328)                  ; ;  393: 
(2329)                  ; ;  394:     t   := 0;
(2330)                  ; 	lda #0
(2331) 12B3 AB9CCE16    ; 	stz.w t_008
(2332)                  ; ;  395:     xpt := 1;
(2333) 12B7 A901        ; 	lda #1
(2334) 12B9 AB8DD016    ; 	sta.w xpt_009
(2335)                  ; ;  396:     read(seed);
(2336) 12BD ABE2D216    ; 	psh.w #seed_010
(2337) 12C1 20FFFF      ; 	jsr _iread
(2338) 12C4 8B6B        ; 	pli.s
(2339) 12C6 AB8300      ; 	sta.w 0,I++
(2340)                  ; ;  397: 
(2341)                  ; ;  398:     PrintIsland;
(2342) 12C9 ABDA        ; 	phx.w
(2343) 12CB 205D10      ; 	jsr printisland_125
(2344) 12CE C202        ; 	adj #2
(2345)                  ; ;  399: 
(2346)                  ; ;  400:     {Loop once per time period.}
(2347)                  ; ;  401:     REPEAT
(2348)                  ; L_166
(2349)                  ; ;  402:     writeln;
(2350) 12D0 20DA13      ; 	jsr _writeln
(2351)                  ; ;  403: 
(2352)                  ; ;  404:     t := t + 1;
(2353)                  ; 	lda.w t_008
(2354)                  ; 	pha.w
(2355)                  ; 	lda #1
(2356)                  ; 	clc
(2357)                  ; 	adc.w 1,S
(2358)                  ; 	adj #2
(2359) 12D3 ABEECE16    ; 	inc.w t_008
(2360)                  ; ;  405:     EventsOccur;
(2361) 12D7 ABDA        ; 	phx.w
(2362) 12D9 20480F      ; 	jsr eventsoccur_104
(2363) 12DC C202        ; 	adj #2
(2364)                  ; ;  406:     ResetIsland;
(2365) 12DE ABDA        ; 	phx.w
(2366) 12E0 209211      ; 	jsr resetisland_150
(2367) 12E3 C202        ; 	adj #2
(2368)                  ; ;  407: 
(2369)                  ; ;  408:     {Time to print the island?}
(2370)                  ; ;  409:     IF t = printtimes[xpt] THEN BEGIN
(2371) 12E5 ABADCE16    ; 	lda.w t_008
(2372) 12E9 AB48        ; 	pha.w
(2373) 12EB ABE26416    ; 	psh.w #printtimes_004
(2374) 12EF ABADD016    ; 	lda.w xpt_009
(2375) 12F3 AB3A        ; 	dec.w a
(2376) 12F5 AB0A        ; 	asl.w a
(2377) 12F7 18          ; 	clc
(2378) 12F8 CB7501      ; 	adc.w 1,S
(2379) 12FB CB9501      ; 	sta.w 1,S
(2380) 12FE 8B6B        ; 	pli.s
(2381) 1300 ABA300      ; 	lda.w 0,I++
(2382) 1303 CB4401      ; 	xma.w 1,S
(2383) 1306 CBD501      ; 	cmp.w 1,S
(2384) 1309 C202        ; 	adj #2
(2385) 130B F004        ; 	beq L_170T
(2386) 130D A900        ; 	lda #0
(2387) 130F 8002        ; 	bra L_170
(2388) 1311 A901        ; L_170T lda #1
(2389)                  ; 	lda #0
(2390)                  ; L_170
(2391) 1313 ABC90100    ; 	cmp.w #1
(2392) 1317 F003        ; 	beq L_168
(2393) 1319 4C2713      ; 	jmp L_169
(2394)                  ; L_168
(2395)                  ; ;  410:         PrintIsland;
(2396) 131C ABDA        ; 	phx.w
(2397) 131E 205D10      ; 	jsr printisland_125
(2398) 1321 C202        ; 	adj #2
(2399)                  ; ;  411:         xpt := xpt + 1;
(2400)                  ; 	lda.w xpt_009
(2401)                  ; 	pha.w
(2402)                  ; 	lda #1
(2403)                  ; 	clc
(2404)                  ; 	adc.w 1,S
(2405)                  ; 	adj #2
(2406) 1323 ABEED016    ; 	inc.w xpt_009
(2407)                  ; ;  412:     END;
(2408)                  ; L_169
(2409)                  ; ;  413:     UNTIL (numwolves = 0) OR (numrabbits = 0)
(2410) 1327 ABADC816    ; 	lda.w numwolves_005
(2411)                  ; 	pha.w
(2412)                  ; 	lda #0
(2413)                  ; 	xma.w 1,S
(2414) 132B ABC90000    ; 	cmp.w #0
(2415)                  ; 	adj #2
(2416) 132F F004        ; 	beq L_171T
(2417) 1331 A900        ; 	lda #0
(2418) 1333 8002        ; 	bra L_171
(2419) 1335 A901        ; L_171T lda #1
(2420)                  ; 	lda #0
(2421)                  ; L_171
(2422) 1337 AB48        ; 	pha.w
(2423) 1339 ABADCA16    ; 	lda.w numrabbits_006
(2424)                  ; 	pha.w
(2425)                  ; 	lda #0
(2426)                  ; 	xma.w 1,S
(2427) 133D ABC90000    ; 	cmp.w #0
(2428)                  ; 	adj #2
(2429) 1341 F004        ; 	beq L_172T
(2430) 1343 A900        ; 	lda #0
(2431) 1345 8002        ; 	bra L_172
(2432) 1347 A901        ; L_172T lda #1
(2433)                  ; 	lda #0
(2434)                  ; L_172
(2435)                  ; ;  414:       OR (xpt > numprinttimes);
(2436) 1349 CB1501      ; 	ora.w 1,S
(2437) 134C C202        ; 	adj #2
(2438) 134E AB48        ; 	pha.w
(2439) 1350 ABADD016    ; 	lda.w xpt_009
(2440)                  ; 	pha.w
(2441)                  ; 	lda.w numprinttimes_007
(2442)                  ; 	xma.w 1,S
(2443) 1354 ABCDCC16    ; 	cmp.w numprinttimes_007
(2444)                  ; 	adj #2
(2445) 1358 AB1004      ; 	bgt L_173T
(2446) 135B A900        ; 	lda #0
(2447) 135D 8002        ; 	bra L_173
(2448) 135F A901        ; L_173T lda #1
(2449)                  ; 	lda #0
(2450)                  ; L_173
(2451) 1361 CB1501      ; 	ora.w 1,S
(2452) 1364 C202        ; 	adj #2
(2453) 1366 ABC90100    ; 	cmp.w #1
(2454) 136A F003        ; 	beq L_167
(2455) 136C 4CD012      ; 	jmp L_166
(2456)                  ; L_167
(2457)                  ; ;  415: 
(2458)                  ; ;  416:     PrintIsland;
(2459) 136F ABDA        ; 	phx.w
(2460) 1371 205D10      ; 	jsr printisland_125
(2461) 1374 C202        ; 	adj #2
(2462)                  ; ;  417: 
(2463)                  ; ;  418: END {WolfIsland}.
(2464) 1376 ABFA        ; 	plx.w
(2465) 1378 60          ; 	rts
(2466)                  ; 	.end _pc65_main
(2467)                  ; 
(2468)                  ; ;
(2469)                  ; ;   unsigned division 16 x 16
(2470)                  ; ;
(2471)                  ;             .cod
(2472)                  ; ;
(2473)                  ; _Q          .equ    5
(2474)                  ; _D          .equ    3
(2475)                  ; ;
(2476)                  ; _idiv       .proc
(2477) 1379 A900        ;             lda #0          ; clear remainder (A)
(2478) 137B 0B          ;             dup a           ; push
(2479) 137C CBB505      ;             lda.w _Q,S      ; load dividend (Q)
(2480) 137F A010        ;             ldy #16         ; bit counter
(2481)                  ; ;
(2482)                  ; _idiv_Lp    
(2483) 1381 18          ;             clc
(2484) 1382 AB0A        ;             asl.w a         ; shift AQ left
(2485) 1384 1B          ;             swp a
(2486) 1385 AB2A        ;             rol.w a
(2487)                  ; ;
(2488) 1387 B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
(2489)                  ; ;
(2490)                  ; _idiv_Minus
(2491) 1389 38          ;             sec
(2492) 138A CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
(2493)                  ; ;
(2494) 138D 8004        ;             bra _idiv_Next
(2495)                  ; ;
(2496)                  ; _idiv_Plus
(2497) 138F 18          ;             clc
(2498) 1390 CB7503      ;             adc.w _D,S      ; add divisor (D)
(2499)                  ; ;
(2500)                  ; _idiv_Next    
(2501) 1393 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
(2502) 1394 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
(2503) 1396 AB1A        ;             inc.w a
(2504)                  ; ;
(2505)                  ; _idiv_Dec
(2506) 1398 88          ;             dey             ; loop until loop counter == 0
(2507) 1399 D0E6        ;             bne _idiv_Lp
(2508)                  ; ;
(2509)                  ; _idiv_Exit
(2510) 139B 1B          ;             swp a           ; Test remainder
(2511) 139C AB090000    ;             ora.w #0
(2512) 13A0 1004        ;             bpl _idiv_Finish
(2513) 13A2 18          ;             clc
(2514) 13A3 CB7503      ;             adc.w 3,S
(2515)                  ; _idiv_Finish
(2516) 13A6 1B          ;             swp a
(2517)                  ; ;
(2518) 13A7 60          ;             rts
(2519)                  ; ;
(2520)                  ;             .endp _idiv
(2521)                  ; 
(2522)                  ; ;
(2523)                  ; ; signed multiplication: 16 x 16 => 32
(2524)                  ; ;
(2525)                  ;             .cod
(2526)                  ; ;
(2527)                  ; _M          .equ    5
(2528)                  ; _R          .equ    3
(2529)                  ; ;
(2530)                  ; _imul       .proc
(2531) 13A8 A010        ;             ldy #16             ; y = bit count
(2532) 13AA A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
(2533) 13AC 0B          ;             dup a               ; A = { 0,  0,  x}
(2534) 13AD 0B          ;             dup a               ; A = { 0,  0,  0}
(2535) 13AE CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
(2536) 13B1 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
(2537) 13B3 AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
(2538) 13B7 18          ;             clc                 ; initialize Booth recoding bit
(2539) 13B8 2B          ;             rot a               ; A = {PH, PL, `R}
(2540)                  ; ;
(2541) 13B9 8003        ;             bra _imul_TstB
(2542)                  ; ;
(2543)                  ; _imul_Lp
(2544) 13BB AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
(2545) 13BD 2B          ;             rot a               ; A = {PH, PL, `R}
(2546)                  ; _imul_TstB
(2547) 13BE 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
(2548)                  ; ;
(2549)                  ; _imul_AddShft
(2550) 13C0 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
(2551)                  ; _imul_AddM
(2552) 13C2 18          ;             clc
(2553) 13C3 CB7505      ;             adc.w _M,S          ; PH += M
(2554) 13C6 8006        ;             bra _imul_ShftP
(2555)                  ; ;
(2556)                  ; _imul_SubShft
(2557) 13C8 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
(2558)                  ; _imul_SubM
(2559) 13CA 38          ;             sec
(2560) 13CB CBF505      ;             sbc.w _M,S          ; PH -= M
(2561)                  ; ;
(2562)                  ; _imul_ShftP
(2563) 13CE BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
(2564) 13D0 2B          ;             rot a               ; A = {PL, `R, PH}
(2565) 13D1 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
(2566) 13D3 2B          ;             rot a               ; A = {`R, PH, PL}
(2567)                  ; ;
(2568)                  ; _imul_Dec
(2569) 13D4 88          ;             dey
(2570) 13D5 D0E4        ;             bne _imul_Lp
(2571)                  ; ;
(2572)                  ; _imul_Exit
(2573) 13D7 2B          ;             rot a               ; A = {PH, PL, `R}
(2574) 13D8 1B          ;             swp a               ; A = {PL, PH, `R}
(2575)                  ; ;
(2576) 13D9 60          ;             rts
(2577)                  ; ;
(2578)                  ;             .endp _imul
(2579)                  ; 
(2580)                  ; ;
(2581)                  ; ; put <newLine> to output
(2582)                  ; ;
(2583)                  ;             .cod
(2584)                  ; ;
(2585)                  ; _newLine    .equ    0x0A
(2586)                  ; _putChar    .equ    0xF001
(2587)                  ; ;
(2588)                  ; _writeln    .proc
(2589) 13DA A90A        ;             lda #_newLine
(2590) 13DC 8D01F0      ;             sta _putChar
(2591)                  ; ;
(2592) 13DF 60          ;             rts
(2593)                  ; ;
(2594)                  ;             .endp _writeln
(2595)                  ; ;
(2596)                  ; ; put string to output
(2597)                  ; ;
(2598)                  ;             .cod
(2599)                  ; ;
(2600)                  ; _sPtrOff    .equ    7
(2601)                  ; _sLenOff    .equ    3
(2602)                  ; ;
(2603)                  ; _swrite     .proc
(2604) 13E0 CBB403      ;             ldy.w _sLenOff,S        ; load string length
(2605) 13E3 CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
(2606) 13E6 9B0B        ;             tai                     ; transfer sptr to IP
(2607)                  ; ;
(2608)                  ; _swrite_Lp
(2609) 13E8 A300        ;             lda 0,I++               ; load char from strig
(2610) 13EA 8D01F0      ;             sta _putChar            ; write char to output
(2611)                  ; ;
(2612) 13ED AB88        ;             dey.w                   ; loop while string length <> 0
(2613) 13EF D0F7        ;             bne _swrite_Lp
(2614)                  ; ;
(2615) 13F1 60          ;             rts
(2616)                  ; ;
(2617)                  ;             .endp _swrite
(2618)                  ; ;
(2619)                  ; ; put integer to output
(2620)                  ; ;
(2621)                  ;             .cod
(2622)                  ; ;
(2623)                  ; _iValOff    .equ    7
(2624)                  ; _fLenOff    .equ    5
(2625)                  ; _iCntOff    .equ    -1
(2626)                  ; ;
(2627)                  ; _iwrite     .proc
(2628) 13F2 ABDA        ;             phx.w                   ; save current base pointer
(2629) 13F4 ABBA        ;             tsx.w                   ; assign new base pointer
(2630)                  ; ;
(2631) 13F6 B505        ;             lda _fLenOff,X          ; load field width specifier
(2632) 13F8 C905        ;             cmp #5                  ; compare against max integer digit count
(2633) 13FA AB3002      ;             ble _iwrite_SetCnt
(2634) 13FD A905        ;             lda #5
(2635)                  ; ;
(2636)                  ; _iwrite_SetCnt
(2637) 13FF AB48        ;             pha.w                   ; set iteration count to fld width
(2638) 1401 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
(2639)                  ; ;
(2640)                  ; _iwrite_Lp
(2641) 1404 AB48        ;             pha.w                   ; push dividend argument to _idiv
(2642) 1406 ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
(2643) 140A 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
(2644) 140E C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
(2645) 1410 1B          ;             swp a                   ; put the remainder into ATOS
(2646)                  ; ;
(2647) 1411 18          ;             clc                     ; convert remainder into ASCII character
(2648) 1412 6930        ;             adc #48
(2649) 1414 48          ;             pha                     ; push LS digit of integer onto stack
(2650)                  ; ;
(2651) 1415 2B          ;             rot a                   ; rotate quotient into ATOS position
(2652)                  ; ;
(2653) 1416 ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
(2654) 1419 D0E9        ;             bne _iwrite_Lp
(2655)                  ; ;-------------------------------------------------------------------------------
(2656) 141B 0B          ;             dup a                   ; save integer part of the conversion
(2657)                  ; ;-------------------------------------------------------------------------------
(2658)                  ; _iwrite_Fill
(2659) 141C B505        ;             lda _fLenOff,X          ; load field width specifier
(2660) 141E C905        ;             cmp #5                  ; compare against max integer digit count
(2661) 1420 AB300A      ;             ble _iwrite_GenPtr
(2662) 1423 38          ;             sec                     ; subtract max integer length from fld len
(2663) 1424 E905        ;             sbc #5
(2664) 1426 A8          ;             tay                     ; set difference as loop counter
(2665) 1427 A930        ;             lda #48                 ; fill remaining field with '0'
(2666)                  ; ;
(2667)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
(2668) 1429 48          ;             pha
(2669) 142A 88          ;             dey
(2670) 142B D0FC        ;             bne _iwrite_Fill_Lp
(2671)                  ; ;-------------------------------------------------------------------------------
(2672)                  ; _iwrite_GenPtr
(2673) 142D EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
(2674) 1430 AB1A        ;             inc.w a                 ; remove stack pointer write bias
(2675) 1432 AB48        ;             pha.w                   ; push string pointer to stack
(2676)                  ; ;-------------------------------------------------------------------------------
(2677) 1434 2B          ;             rot a                   ; restore integer part of the conversion
(2678)                  ; ;-------------------------------------------------------------------------------
(2679) 1435 ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
(2680) 1439 F00F        ;             beq _iwrite_Sup0
(2681) 143B A000        ;             ldy #0
(2682)                  ; _iwrite_ErrLp
(2683) 143D A92A        ;             lda #0x2A               ; fill integer field with '*'
(2684) 143F 8B9101      ;             sta (1,S),Y
(2685) 1442 C8          ;             iny
(2686) 1443 FBD505      ;             cmp.y _fLenOff,X
(2687) 1446 D0F5        ;             bne _iwrite_ErrLp
(2688) 1448 8014        ;             bra _iwrite_Exit
(2689)                  ; ;-------------------------------------------------------------------------------
(2690)                  ; _iwrite_Sup0
(2691) 144A A000        ;             ldy #0                  ; initialize string index
(2692)                  ; _iwrite_Sup0_Lp
(2693) 144C 8BB101      ;             lda (1,S),Y
(2694) 144F C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
(2695) 1451 D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
(2696) 1453 A920        ;             lda #32                 ; replace leading 0 with ' '
(2697) 1455 8B9101      ;             sta (1,S),Y
(2698) 1458 C8          ;             iny                     ; increment string index and compare to fLen
(2699) 1459 FBD505      ;             cmp.y _fLenOff,X
(2700) 145C D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
(2701)                  ; ;-------------------------------------------------------------------------------
(2702)                  ; _iwrite_Exit
(2703) 145E ABE20000    ;             psh.w #0                ; NULL argument
(2704) 1462 B505        ;             lda _fLenOff,X          ; push field width specifier
(2705) 1464 AB48        ;             pha.w
(2706) 1466 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
(2707) 146A C206        ;             adj #6                  ; remove parameters to _swrite() from stack
(2708)                  ; ;
(2709) 146C AB9A        ;             txs.w                   ; deallocate stack variables
(2710) 146E ABFA        ;             plx.w                   ; restore previous base pointer
(2711) 1470 60          ;             rts
(2712)                  ; ;
(2713)                  ;             .endp _iwrite
(2714)                  ; 
(2715)                  ; 	.dat
(2716)                  ; 
(2717) 1471 7220        ; S_149 .str "r "
(2718) 1473 5720        ; S_144 .str "W "
(2719) 1475 2E20        ; S_139 .str ". "
(2720) 1477 203A2057    ; S_129 .str " : Wolf Island"
       147B 6F6C662049736C616E64
(2721) 1485 203A2052    ; S_103 .str " : Rabbit born at "
       1489 616262697420626F726E20617420
(2722) 1497 203A2057    ; S_087 .str " : Wolf born at "
       149B 6F6C6620626F726E20617420
(2723) 14A7 203A2052    ; S_080 .str " : Rabbit eaten at "
       14AB 616262697420656174656E20617420
(2724) 14BA 2C20        ; S_071 .str ", "
(2725) 14BC 203A2057    ; S_070 .str " : Wolf died at "
       14C0 6F6C66206469656420617420
(2726) 14CC 74203D      ; S_069 .str "t ="
(2727) 14CF 00          ; _bss_start .byt 0
(2728) 14D0 00000000    ; island_002 .byt 0[242]
       14D4 0000000000000000000000000000000000000000000000000000000000000000
       14F4 0000000000000000000000000000000000000000000000000000000000000000
       1514 0000000000000000000000000000000000000000000000000000000000000000
       1534 0000000000000000000000000000000000000000000000000000000000000000
       1554 0000000000000000000000000000000000000000000000000000000000000000
       1574 0000000000000000000000000000000000000000000000000000000000000000
       1594 0000000000000000000000000000000000000000000000000000000000000000
       15B4 0000000000000000000000000000
(2729) 15C2 00000000    ; foodunits_003 .byt 0[162]
       15C6 0000000000000000000000000000000000000000000000000000000000000000
       15E6 0000000000000000000000000000000000000000000000000000000000000000
       1606 0000000000000000000000000000000000000000000000000000000000000000
       1626 0000000000000000000000000000000000000000000000000000000000000000
       1646 000000000000000000000000000000000000000000000000000000000000
(2730) 1664 00000000    ; printtimes_004 .byt 0[100]
       1668 0000000000000000000000000000000000000000000000000000000000000000
       1688 0000000000000000000000000000000000000000000000000000000000000000
       16A8 0000000000000000000000000000000000000000000000000000000000000000
(2731) 16C8 0000        ; numwolves_005 .wrd 0
(2732) 16CA 0000        ; numrabbits_006 .wrd 0
(2733) 16CC 0000        ; numprinttimes_007 .wrd 0
(2734) 16CE 0000        ; t_008 .wrd 0
(2735) 16D0 0000        ; xpt_009 .wrd 0
(2736) 16D2 0000        ; seed_010 .wrd 0
(2737) 16D4 00000000    ; rowoffset_011 .byt 0[10]
       16D8 000000000000
(2738) 16DE 00000000    ; coloffset_012 .byt 0[10]
       16E2 000000000000
(2739) 16E8 00          ; _bss_end .byt 0
(2740) 16E9 00000000    ; _stk .byt 0[1023]
       16ED 0000000000000000000000000000000000000000000000000000000000000000
       170D 0000000000000000000000000000000000000000000000000000000000000000
       172D 0000000000000000000000000000000000000000000000000000000000000000
       174D 0000000000000000000000000000000000000000000000000000000000000000
       176D 0000000000000000000000000000000000000000000000000000000000000000
       178D 0000000000000000000000000000000000000000000000000000000000000000
       17AD 0000000000000000000000000000000000000000000000000000000000000000
       17CD 0000000000000000000000000000000000000000000000000000000000000000
       17ED 0000000000000000000000000000000000000000000000000000000000000000
       180D 0000000000000000000000000000000000000000000000000000000000000000
       182D 0000000000000000000000000000000000000000000000000000000000000000
       184D 0000000000000000000000000000000000000000000000000000000000000000
       186D 0000000000000000000000000000000000000000000000000000000000000000
       188D 0000000000000000000000000000000000000000000000000000000000000000
       18AD 0000000000000000000000000000000000000000000000000000000000000000
       18CD 0000000000000000000000000000000000000000000000000000000000000000
       18ED 0000000000000000000000000000000000000000000000000000000000000000
       190D 0000000000000000000000000000000000000000000000000000000000000000
       192D 0000000000000000000000000000000000000000000000000000000000000000
       194D 0000000000000000000000000000000000000000000000000000000000000000
       196D 0000000000000000000000000000000000000000000000000000000000000000
       198D 0000000000000000000000000000000000000000000000000000000000000000
       19AD 0000000000000000000000000000000000000000000000000000000000000000
       19CD 0000000000000000000000000000000000000000000000000000000000000000
       19ED 0000000000000000000000000000000000000000000000000000000000000000
       1A0D 0000000000000000000000000000000000000000000000000000000000000000
       1A2D 0000000000000000000000000000000000000000000000000000000000000000
       1A4D 0000000000000000000000000000000000000000000000000000000000000000
       1A6D 0000000000000000000000000000000000000000000000000000000000000000
       1A8D 0000000000000000000000000000000000000000000000000000000000000000
       1AAD 0000000000000000000000000000000000000000000000000000000000000000
       1ACD 000000000000000000000000000000000000000000000000000000
(2741) 1AE8 FF          ; _stk_top .byt -1
(2742)                  ; 
(2743)                  ; 	.end
