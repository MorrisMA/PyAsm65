(   1)                  ; ;    1: PROGRAM WolfIsland (input, output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w
(   9) 0202 CBA2C51A    ; 	lds.w #_stk_top
(  10) 0206 9CAC14      ; 	stz _bss_start
(  11) 0209 ABA2AC14    ; 	ldx.w #_bss_start
(  12) 020D ABA0AD14    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9C51A    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE9AC14    ; 	sbc.w #_bss_start
(  16) 021A 540F        ; 	mov #15
(  17) 021C 4C4713      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: {   Wolf Island is a simulation of a 9 x 9 island of wolves and rabbits.
(  20)                  ; ;    4:     The wolves eat rabbits, and the rabbits eat grass.  Their initial
(  21)                  ; ;    5:     locations are:
(  22)                  ; ;    6: 
(  23)                  ; ;    7:             . . . . . . . . .
(  24)                  ; ;    8:             . W . . . . . W .
(  25)                  ; ;    9:             . . . . . . . . .
(  26)                  ; ;   10:             . . . r r r . . .
(  27)                  ; ;   11:             . . . r r r . . .
(  28)                  ; ;   12:             . . . r r r . . .
(  29)                  ; ;   13:             . . . . . . . . .
(  30)                  ; ;   14:             . W . . . . . W .
(  31)                  ; ;   15:             . . . . . . . . .
(  32)                  ; ;   16: 
(  33)                  ; ;   17:     A wolf or rabbit can move up, down, left, or right into an adjacent
(  34)                  ; ;   18:     location.  Diagonal moves are not allowed.
(  35)                  ; ;   19: 
(  36)                  ; ;   20:     Time is measured in discrete time units.  Wolves reproduce every
(  37)                  ; ;   21:     12 time units, and rabbits every 5 units.  An animal reproduces
(  38)                  ; ;   22:     by splitting into two.
(  39)                  ; ;   23: 
(  40)                  ; ;   24:     Each wolf starts out with 6 food units and loses 1 every time unit.
(  41)                  ; ;   25:     A wolf gains 6 food units by eating a rabbit.  It starves to death
(  42)                  ; ;   26:     if it reaches 0 food units.  Since there's always enough grass to
(  43)                  ; ;   27:     eat, rabbits don't worry about food units.
(  44)                  ; ;   28: 
(  45)                  ; ;   29:     The order of events from time unit T-1 to T is:
(  46)                  ; ;   30: 
(  47)                  ; ;   31:     (1) For each wolf:
(  48)                  ; ;   32: 
(  49)                  ; ;   33:     Lose a food unit.  Die if 0 food units and remove.
(  50)                  ; ;   34: 
(  51)                  ; ;   35:     Eat a rabbit if there is one in an adjacent location by moving
(  52)                  ; ;   36:     into the rabbit's location.  Increase the wolf's food units
(  53)                  ; ;   37:     by 6 and remove the rabbit.
(  54)                  ; ;   38: 
(  55)                  ; ;   39:     Otherwise, randomly choose to move into an adjacent empty
(  56)                  ; ;   40:     location, or stay put.
(  57)                  ; ;   41: 
(  58)                  ; ;   42:     If wolf reproduction time (T = 12,24,36,...), split and leave
(  59)                  ; ;   43:     behind an offspring in the previous location.  Each split wolf
(  60)                  ; ;   44:     has half (DIV 2) the food units.  If there was no move, the
(  61)                  ; ;   45:     baby was stillborn, but the food units are still halved.
(  62)                  ; ;   46: 
(  63)                  ; ;   47:     (2) For each rabbit:
(  64)                  ; ;   48: 
(  65)                  ; ;   49:     Randomly choose to move into an adjacent empty, or stay put.
(  66)                  ; ;   50: 
(  67)                  ; ;   51:     If rabbit reproduction time (T = 5,10,15,...), split and leave
(  68)                  ; ;   52:     behind an offspring in the previous location.  If there was no
(  69)                  ; ;   53:     move, the baby was stillborn.
(  70)                  ; ;   54: 
(  71)                  ; ;   55:     The simulation ends when all the wolves are dead or all the
(  72)                  ; ;   56:     rabbits are eaten.
(  73)                  ; ;   57: 
(  74)                  ; ;   58:     The island is printed at times T = 0,1,2,3,4,5,6,7,8,9,10,
(  75)                  ; ;   59:     15,20,25,30,...,80.  A message is printed whenever a wolf is
(  76)                  ; ;   60:     born or dies, and whenever a rabbit is born or is eaten.
(  77)                  ; ;   61: }
(  78)                  ; ;   62: 
(  79)                  ; ;   63: CONST
(  80)                  ; ;   64:     size            = 9;    {size of island}
(  81)                  ; ;   65:     max             = 10;       {size plus border}
(  82)                  ; ;   66:     wolfreprotime   = 12;       {wolf reproduction period}
(  83)                  ; ;   67:     rabbitreprotime = 5;        {rabbit reproduction period}
(  84)                  ; ;   68:     rabbitfoodunits = 6;        {rabbit food unit worth to wolf}
(  85)                  ; ;   69:     initfoodunits   = 6;        {wolf's initial food units}
(  86)                  ; ;   70:     maxprinttimes   = 50;       {max. no. times to print island}
(  87)                  ; ;   71: 
(  88)                  ; ;   72: TYPE
(  89)                  ; ;   73:     posint   = 0..32767;
(  90)                  ; ;   74:     index    = 0..max;          {index range of island matrix}
(  91)                  ; ;   75: 
(  92)                  ; ;   76:     contents = (wolf, rabbit, newwolf, newrabbit, empty, border);
(  93)                  ; ;   77:     {Contents each each island location.  Each time a wolf or
(  94)                  ; ;   78:      rabbit moves, newwolf or newrabbit is initially placed in
(  95)                  ; ;   79:      the new location.  This prevents a wolf or rabbit from
(  96)                  ; ;   80:      being processed again in its new location during the same
(  97)                  ; ;   81:      time period.}
(  98)                  ; ;   82: 
(  99)                  ; ;   83: VAR
( 100)                  ; ;   84:     island     : ARRAY [index, index] OF contents;
( 101)                  ; ;   85:                 {Wolf Island with border}
( 102)                  ; ;   86:     foodunits  : ARRAY [1..size, 1..size] OF posint;
( 103)                  ; ;   87:                 {wolves' food unit matrix}
( 104)                  ; ;   88:     printtimes : ARRAY [1..maxprinttimes] OF posint;
( 105)                  ; ;   89:                 {times to print island}
( 106)                  ; ;   90: 
( 107)                  ; ;   91:     numwolves, numrabbits : posint; {no. of wolves and rabbits}
( 108)                  ; ;   92:     numprinttimes         : posint;     {no. of print times}
( 109)                  ; ;   93:     t                 : posint;     {time}
( 110)                  ; ;   94:     xpt  : 1..maxprinttimes;        {print times index}
( 111)                  ; ;   95:     seed : posint;                  {random number seed}
( 112)                  ; ;   96: 
( 113)                  ; ;   97:     rowoffset : ARRAY [0..4] OF -1..+1;
( 114)                  ; ;   98:     coloffset : ARRAY [0..4] OF -1..+1;
( 115)                  ; ;   99:     {Row and column offsets.  When added to the current row and
( 116)                  ; ;  100:      column of a wolf's or rabbit's location, gives the row and
( 117)                  ; ;  101:      column of the same or an adjacent location.}
( 118)                  ; ;  102: 
( 119)                  ; ;  103: 
( 120)                  ; ;  104: PROCEDURE Initialize;
( 121)                  ; ;  105: 
( 122)                  ; ;  106:     {Initialize all arrays.}
( 123)                  ; ;  107: 
( 124)                  ; ;  108:     VAR
( 125)                  ; ;  109:     i        : posint;
( 126)                  ; ;  110:     row, col : index;
( 127)                  ; ;  111: 
( 128)                  ; ;  112:     BEGIN
( 129)                  ; i_014 .equ -1
( 130)                  ; row_015 .equ -3
( 131)                  ; col_016 .equ -5
( 132)                  ; initialize_013 .sub
( 133) 021F ABDA        ; 	phx.w
( 134) 0221 ABBA        ; 	tsx.w
( 135) 0223 C2FA        ; 	adj #-6
( 136)                  ; ;  113: 
( 137)                  ; ;  114:     {Initialize the island and wolf food matrices.}
( 138)                  ; ;  115:     FOR i := 0 TO max DO BEGIN
( 139) 0225 A900        ; 	lda #0
( 140) 0227 AB95FF      ; 	sta.w i_014,X
( 141)                  ; L_017
( 142) 022A A90A        ; 	lda #10
( 143) 022C ABD5FF      ; 	cmp.w i_014,X
( 144) 022F AB5003      ; 	bge L_018
( 145) 0232 4CE302      ; 	jmp L_019
( 146)                  ; L_018
( 147)                  ; ;  116:         island[0,   i] := border;
( 148) 0235 ABE2AD14    ; 	psh.w #island_002
( 149) 0239 ABE20000    ; 	psh.w #0
( 150)                  ; 	pha.w
( 151) 023D ABE21600    ; 	psh.w #22
( 152) 0241 20FFFF      ; 	jsr _imul
( 153) 0244 C204        ; 	adj #4
( 154) 0246 18          ; 	clc
( 155) 0247 CB7501      ; 	adc.w 1,S
( 156) 024A CB9501      ; 	sta.w 1,S
( 157) 024D ABB5FF      ; 	lda.w i_014,X
( 158) 0250 AB0A        ; 	asl.w a
( 159) 0252 18          ; 	clc
( 160) 0253 CB7501      ; 	adc.w 1,S
( 161) 0256 CB9501      ; 	sta.w 1,S
( 162) 0259 A905        ; 	lda #5
( 163) 025B 6B          ; 	pli
( 164) 025C AB8300      ; 	sta.w 0,I++
( 165)                  ; ;  117:         island[max, i] := border;
( 166) 025F ABE2AD14    ; 	psh.w #island_002
( 167) 0263 ABE20A00    ; 	psh.w #10
( 168)                  ; 	pha.w
( 169) 0267 ABE21600    ; 	psh.w #22
( 170) 026B 20FFFF      ; 	jsr _imul
( 171) 026E C204        ; 	adj #4
( 172) 0270 18          ; 	clc
( 173) 0271 CB7501      ; 	adc.w 1,S
( 174) 0274 CB9501      ; 	sta.w 1,S
( 175) 0277 ABB5FF      ; 	lda.w i_014,X
( 176) 027A AB0A        ; 	asl.w a
( 177) 027C 18          ; 	clc
( 178) 027D CB7501      ; 	adc.w 1,S
( 179) 0280 CB9501      ; 	sta.w 1,S
( 180) 0283 A905        ; 	lda #5
( 181) 0285 6B          ; 	pli
( 182) 0286 AB8300      ; 	sta.w 0,I++
( 183)                  ; ;  118:         island[i, 0]   := border;
( 184) 0289 ABE2AD14    ; 	psh.w #island_002
( 185) 028D ABB5FF      ; 	lda.w i_014,X
( 186) 0290 AB48        ; 	pha.w
( 187) 0292 ABE21600    ; 	psh.w #22
( 188) 0296 20FFFF      ; 	jsr _imul
( 189) 0299 C204        ; 	adj #4
( 190) 029B 18          ; 	clc
( 191) 029C CB7501      ; 	adc.w 1,S
( 192) 029F CB9501      ; 	sta.w 1,S
( 193) 02A2 A900        ; 	lda #0
( 194) 02A4 AB0A        ; 	asl.w a
( 195) 02A6 18          ; 	clc
( 196) 02A7 CB7501      ; 	adc.w 1,S
( 197) 02AA CB9501      ; 	sta.w 1,S
( 198) 02AD A905        ; 	lda #5
( 199) 02AF 6B          ; 	pli
( 200) 02B0 AB8300      ; 	sta.w 0,I++
( 201)                  ; ;  119:         island[i, max] := border;
( 202) 02B3 ABE2AD14    ; 	psh.w #island_002
( 203) 02B7 ABB5FF      ; 	lda.w i_014,X
( 204) 02BA AB48        ; 	pha.w
( 205) 02BC ABE21600    ; 	psh.w #22
( 206) 02C0 20FFFF      ; 	jsr _imul
( 207) 02C3 C204        ; 	adj #4
( 208) 02C5 18          ; 	clc
( 209) 02C6 CB7501      ; 	adc.w 1,S
( 210) 02C9 CB9501      ; 	sta.w 1,S
( 211) 02CC A90A        ; 	lda #10
( 212) 02CE AB0A        ; 	asl.w a
( 213) 02D0 18          ; 	clc
( 214) 02D1 CB7501      ; 	adc.w 1,S
( 215) 02D4 CB9501      ; 	sta.w 1,S
( 216) 02D7 A905        ; 	lda #5
( 217) 02D9 6B          ; 	pli
( 218) 02DA AB8300      ; 	sta.w 0,I++
( 219)                  ; ;  120:     END;
( 220) 02DD ABF6FF      ; 	inc.w i_014,X
( 221) 02E0 4C2A02      ; 	jmp L_017
( 222)                  ; L_019
( 223) 02E3 ABD6FF      ; 	dec.w i_014,X
( 224)                  ; ;  121:     FOR row := 1 TO size DO BEGIN
( 225) 02E6 A901        ; 	lda #1
( 226) 02E8 AB95FD      ; 	sta.w row_015,X
( 227)                  ; L_020
( 228) 02EB A909        ; 	lda #9
( 229) 02ED ABD5FD      ; 	cmp.w row_015,X
( 230) 02F0 AB5003      ; 	bge L_021
( 231) 02F3 4C6F03      ; 	jmp L_022
( 232)                  ; L_021
( 233)                  ; ;  122:         FOR col := 1 TO size DO BEGIN
( 234) 02F6 A901        ; 	lda #1
( 235) 02F8 AB95FB      ; 	sta.w col_016,X
( 236)                  ; L_023
( 237) 02FB A909        ; 	lda #9
( 238) 02FD ABD5FB      ; 	cmp.w col_016,X
( 239) 0300 AB5003      ; 	bge L_024
( 240) 0303 4C6603      ; 	jmp L_025
( 241)                  ; L_024
( 242)                  ; ;  123:         island[row, col]    := empty;
( 243) 0306 ABE2AD14    ; 	psh.w #island_002
( 244) 030A ABB5FD      ; 	lda.w row_015,X
( 245) 030D AB48        ; 	pha.w
( 246) 030F ABE21600    ; 	psh.w #22
( 247) 0313 20FFFF      ; 	jsr _imul
( 248) 0316 C204        ; 	adj #4
( 249) 0318 18          ; 	clc
( 250) 0319 CB7501      ; 	adc.w 1,S
( 251) 031C CB9501      ; 	sta.w 1,S
( 252) 031F ABB5FB      ; 	lda.w col_016,X
( 253) 0322 AB0A        ; 	asl.w a
( 254) 0324 18          ; 	clc
( 255) 0325 CB7501      ; 	adc.w 1,S
( 256) 0328 CB9501      ; 	sta.w 1,S
( 257) 032B A904        ; 	lda #4
( 258) 032D 6B          ; 	pli
( 259) 032E AB8300      ; 	sta.w 0,I++
( 260)                  ; ;  124:         foodunits[row, col] := 0;
( 261) 0331 ABE29F15    ; 	psh.w #foodunits_003
( 262) 0335 ABB5FD      ; 	lda.w row_015,X
( 263) 0338 AB3A        ; 	dec.w a
( 264) 033A AB48        ; 	pha.w
( 265) 033C ABE21200    ; 	psh.w #18
( 266) 0340 20FFFF      ; 	jsr _imul
( 267) 0343 C204        ; 	adj #4
( 268) 0345 18          ; 	clc
( 269) 0346 CB7501      ; 	adc.w 1,S
( 270) 0349 CB9501      ; 	sta.w 1,S
( 271) 034C ABB5FB      ; 	lda.w col_016,X
( 272) 034F AB3A        ; 	dec.w a
( 273) 0351 AB0A        ; 	asl.w a
( 274) 0353 18          ; 	clc
( 275) 0354 CB7501      ; 	adc.w 1,S
( 276) 0357 CB9501      ; 	sta.w 1,S
( 277) 035A A900        ; 	lda #0
( 278) 035C 6B          ; 	pli
( 279) 035D AB8300      ; 	sta.w 0,I++
( 280)                  ; ;  125:         END;
( 281) 0360 ABF6FB      ; 	inc.w col_016,X
( 282) 0363 4CFB02      ; 	jmp L_023
( 283)                  ; L_025
( 284) 0366 ABD6FB      ; 	dec.w col_016,X
( 285)                  ; ;  126:     END;
( 286) 0369 ABF6FD      ; 	inc.w row_015,X
( 287) 036C 4CEB02      ; 	jmp L_020
( 288)                  ; L_022
( 289) 036F ABD6FD      ; 	dec.w row_015,X
( 290)                  ; ;  127: 
( 291)                  ; ;  128:     {Place wolves on the island.}
( 292)                  ; ;  129:     read(numwolves);
( 293) 0372 ABE2A516    ; 	psh.w #numwolves_005
( 294) 0376 20FFFF      ; 	jsr _iread
( 295) 0379 6B          ; 	pli
( 296) 037A AB8300      ; 	sta.w 0,I++
( 297)                  ; ;  130:     FOR i := 1 TO numwolves DO BEGIN
( 298) 037D A901        ; 	lda #1
( 299) 037F AB95FF      ; 	sta.w i_014,X
( 300)                  ; L_026
( 301) 0382 ABADA516    ; 	lda.w numwolves_005
( 302) 0386 ABD5FF      ; 	cmp.w i_014,X
( 303) 0389 AB5003      ; 	bge L_027
( 304) 038C 4C0F04      ; 	jmp L_028
( 305)                  ; L_027
( 306)                  ; ;  131:         read(row, col);
( 307) 038F AB8A        ; 	txa.w
( 308) 0391 18          ; 	clc
( 309) 0392 AB69FDFF    ; 	adc.w #row_015
( 310) 0396 AB48        ; 	pha.w
( 311) 0398 20FFFF      ; 	jsr _iread
( 312) 039B 6B          ; 	pli
( 313) 039C AB8300      ; 	sta.w 0,I++
( 314) 039F AB8A        ; 	txa.w
( 315) 03A1 18          ; 	clc
( 316) 03A2 AB69FBFF    ; 	adc.w #col_016
( 317) 03A6 AB48        ; 	pha.w
( 318) 03A8 20FFFF      ; 	jsr _iread
( 319) 03AB 6B          ; 	pli
( 320) 03AC AB8300      ; 	sta.w 0,I++
( 321)                  ; ;  132:         island[row, col]    := wolf;
( 322) 03AF ABE2AD14    ; 	psh.w #island_002
( 323) 03B3 ABB5FD      ; 	lda.w row_015,X
( 324) 03B6 AB48        ; 	pha.w
( 325) 03B8 ABE21600    ; 	psh.w #22
( 326) 03BC 20FFFF      ; 	jsr _imul
( 327) 03BF C204        ; 	adj #4
( 328) 03C1 18          ; 	clc
( 329) 03C2 CB7501      ; 	adc.w 1,S
( 330) 03C5 CB9501      ; 	sta.w 1,S
( 331) 03C8 ABB5FB      ; 	lda.w col_016,X
( 332) 03CB AB0A        ; 	asl.w a
( 333) 03CD 18          ; 	clc
( 334) 03CE CB7501      ; 	adc.w 1,S
( 335) 03D1 CB9501      ; 	sta.w 1,S
( 336) 03D4 A900        ; 	lda #0
( 337) 03D6 6B          ; 	pli
( 338) 03D7 AB8300      ; 	sta.w 0,I++
( 339)                  ; ;  133:         foodunits[row, col] := initfoodunits;
( 340) 03DA ABE29F15    ; 	psh.w #foodunits_003
( 341) 03DE ABB5FD      ; 	lda.w row_015,X
( 342) 03E1 AB3A        ; 	dec.w a
( 343) 03E3 AB48        ; 	pha.w
( 344) 03E5 ABE21200    ; 	psh.w #18
( 345) 03E9 20FFFF      ; 	jsr _imul
( 346) 03EC C204        ; 	adj #4
( 347) 03EE 18          ; 	clc
( 348) 03EF CB7501      ; 	adc.w 1,S
( 349) 03F2 CB9501      ; 	sta.w 1,S
( 350) 03F5 ABB5FB      ; 	lda.w col_016,X
( 351) 03F8 AB3A        ; 	dec.w a
( 352) 03FA AB0A        ; 	asl.w a
( 353) 03FC 18          ; 	clc
( 354) 03FD CB7501      ; 	adc.w 1,S
( 355) 0400 CB9501      ; 	sta.w 1,S
( 356) 0403 A906        ; 	lda #6
( 357) 0405 6B          ; 	pli
( 358) 0406 AB8300      ; 	sta.w 0,I++
( 359)                  ; ;  134:     END;
( 360) 0409 ABF6FF      ; 	inc.w i_014,X
( 361) 040C 4C8203      ; 	jmp L_026
( 362)                  ; L_028
( 363) 040F ABD6FF      ; 	dec.w i_014,X
( 364)                  ; ;  135: 
( 365)                  ; ;  136:     {Place rabbits on the island.}
( 366)                  ; ;  137:     read(numrabbits);
( 367) 0412 ABE2A716    ; 	psh.w #numrabbits_006
( 368) 0416 20FFFF      ; 	jsr _iread
( 369) 0419 6B          ; 	pli
( 370) 041A AB8300      ; 	sta.w 0,I++
( 371)                  ; ;  138:     FOR i := 1 TO numrabbits DO BEGIN
( 372) 041D A901        ; 	lda #1
( 373) 041F AB95FF      ; 	sta.w i_014,X
( 374)                  ; L_029
( 375) 0422 ABADA716    ; 	lda.w numrabbits_006
( 376) 0426 ABD5FF      ; 	cmp.w i_014,X
( 377) 0429 AB5003      ; 	bge L_030
( 378) 042C 4C8004      ; 	jmp L_031
( 379)                  ; L_030
( 380)                  ; ;  139:         read(row, col);
( 381) 042F AB8A        ; 	txa.w
( 382) 0431 18          ; 	clc
( 383) 0432 AB69FDFF    ; 	adc.w #row_015
( 384) 0436 AB48        ; 	pha.w
( 385) 0438 20FFFF      ; 	jsr _iread
( 386) 043B 6B          ; 	pli
( 387) 043C AB8300      ; 	sta.w 0,I++
( 388) 043F AB8A        ; 	txa.w
( 389) 0441 18          ; 	clc
( 390) 0442 AB69FBFF    ; 	adc.w #col_016
( 391) 0446 AB48        ; 	pha.w
( 392) 0448 20FFFF      ; 	jsr _iread
( 393) 044B 6B          ; 	pli
( 394) 044C AB8300      ; 	sta.w 0,I++
( 395)                  ; ;  140:         island[row, col] := rabbit;
( 396) 044F ABE2AD14    ; 	psh.w #island_002
( 397) 0453 ABB5FD      ; 	lda.w row_015,X
( 398) 0456 AB48        ; 	pha.w
( 399) 0458 ABE21600    ; 	psh.w #22
( 400) 045C 20FFFF      ; 	jsr _imul
( 401) 045F C204        ; 	adj #4
( 402) 0461 18          ; 	clc
( 403) 0462 CB7501      ; 	adc.w 1,S
( 404) 0465 CB9501      ; 	sta.w 1,S
( 405) 0468 ABB5FB      ; 	lda.w col_016,X
( 406) 046B AB0A        ; 	asl.w a
( 407) 046D 18          ; 	clc
( 408) 046E CB7501      ; 	adc.w 1,S
( 409) 0471 CB9501      ; 	sta.w 1,S
( 410) 0474 A901        ; 	lda #1
( 411) 0476 6B          ; 	pli
( 412) 0477 AB8300      ; 	sta.w 0,I++
( 413)                  ; ;  141:     END;
( 414) 047A ABF6FF      ; 	inc.w i_014,X
( 415) 047D 4C2204      ; 	jmp L_029
( 416)                  ; L_031
( 417) 0480 ABD6FF      ; 	dec.w i_014,X
( 418)                  ; ;  142: 
( 419)                  ; ;  143:     {Read print times.}
( 420)                  ; ;  144:     read(numprinttimes);
( 421) 0483 ABE2A916    ; 	psh.w #numprinttimes_007
( 422) 0487 20FFFF      ; 	jsr _iread
( 423) 048A 6B          ; 	pli
( 424) 048B AB8300      ; 	sta.w 0,I++
( 425)                  ; ;  145:     FOR i := 1 TO numprinttimes DO BEGIN
( 426) 048E A901        ; 	lda #1
( 427) 0490 AB95FF      ; 	sta.w i_014,X
( 428)                  ; L_032
( 429) 0493 ABADA916    ; 	lda.w numprinttimes_007
( 430) 0497 ABD5FF      ; 	cmp.w i_014,X
( 431) 049A AB5003      ; 	bge L_033
( 432) 049D 4CBF04      ; 	jmp L_034
( 433)                  ; L_033
( 434)                  ; ;  146:         read(printtimes[i]);
( 435) 04A0 ABE24116    ; 	psh.w #printtimes_004
( 436) 04A4 ABB5FF      ; 	lda.w i_014,X
( 437) 04A7 AB3A        ; 	dec.w a
( 438) 04A9 AB0A        ; 	asl.w a
( 439) 04AB 18          ; 	clc
( 440) 04AC CB7501      ; 	adc.w 1,S
( 441) 04AF CB9501      ; 	sta.w 1,S
( 442) 04B2 20FFFF      ; 	jsr _iread
( 443) 04B5 6B          ; 	pli
( 444) 04B6 AB8300      ; 	sta.w 0,I++
( 445)                  ; ;  147:     END;
( 446) 04B9 ABF6FF      ; 	inc.w i_014,X
( 447) 04BC 4C9304      ; 	jmp L_032
( 448)                  ; L_034
( 449) 04BF ABD6FF      ; 	dec.w i_014,X
( 450)                  ; ;  148: 
( 451)                  ; ;  149:     {Initialize the row and column offsets for moves.}
( 452)                  ; ;  150:     rowoffset[0] :=  0; coloffset[0] :=  0; {stay put}
( 453) 04C2 ABE2B116    ; 	psh.w #rowoffset_011
( 454) 04C6 A900        ; 	lda #0
( 455) 04C8 AB0A        ; 	asl.w a
( 456) 04CA 18          ; 	clc
( 457) 04CB CB7501      ; 	adc.w 1,S
( 458) 04CE CB9501      ; 	sta.w 1,S
( 459) 04D1 A900        ; 	lda #0
( 460) 04D3 6B          ; 	pli
( 461) 04D4 AB8300      ; 	sta.w 0,I++
( 462) 04D7 ABE2BB16    ; 	psh.w #coloffset_012
( 463) 04DB A900        ; 	lda #0
( 464) 04DD AB0A        ; 	asl.w a
( 465) 04DF 18          ; 	clc
( 466) 04E0 CB7501      ; 	adc.w 1,S
( 467) 04E3 CB9501      ; 	sta.w 1,S
( 468) 04E6 A900        ; 	lda #0
( 469) 04E8 6B          ; 	pli
( 470) 04E9 AB8300      ; 	sta.w 0,I++
( 471)                  ; ;  151:     rowoffset[1] := -1; coloffset[1] :=  0; {up}
( 472) 04EC ABE2B116    ; 	psh.w #rowoffset_011
( 473) 04F0 A901        ; 	lda #1
( 474) 04F2 AB0A        ; 	asl.w a
( 475) 04F4 18          ; 	clc
( 476) 04F5 CB7501      ; 	adc.w 1,S
( 477) 04F8 CB9501      ; 	sta.w 1,S
( 478) 04FB A901        ; 	lda #1
( 479) 04FD AB49FFFF    ; 	eor.w #-1
( 480) 0501 AB1A        ; 	inc.w a
( 481) 0503 6B          ; 	pli
( 482) 0504 AB8300      ; 	sta.w 0,I++
( 483) 0507 ABE2BB16    ; 	psh.w #coloffset_012
( 484) 050B A901        ; 	lda #1
( 485) 050D AB0A        ; 	asl.w a
( 486) 050F 18          ; 	clc
( 487) 0510 CB7501      ; 	adc.w 1,S
( 488) 0513 CB9501      ; 	sta.w 1,S
( 489) 0516 A900        ; 	lda #0
( 490) 0518 6B          ; 	pli
( 491) 0519 AB8300      ; 	sta.w 0,I++
( 492)                  ; ;  152:     rowoffset[2] :=  0; coloffset[2] := -1; {left}
( 493) 051C ABE2B116    ; 	psh.w #rowoffset_011
( 494) 0520 A902        ; 	lda #2
( 495) 0522 AB0A        ; 	asl.w a
( 496) 0524 18          ; 	clc
( 497) 0525 CB7501      ; 	adc.w 1,S
( 498) 0528 CB9501      ; 	sta.w 1,S
( 499) 052B A900        ; 	lda #0
( 500) 052D 6B          ; 	pli
( 501) 052E AB8300      ; 	sta.w 0,I++
( 502) 0531 ABE2BB16    ; 	psh.w #coloffset_012
( 503) 0535 A902        ; 	lda #2
( 504) 0537 AB0A        ; 	asl.w a
( 505) 0539 18          ; 	clc
( 506) 053A CB7501      ; 	adc.w 1,S
( 507) 053D CB9501      ; 	sta.w 1,S
( 508) 0540 A901        ; 	lda #1
( 509) 0542 AB49FFFF    ; 	eor.w #-1
( 510) 0546 AB1A        ; 	inc.w a
( 511) 0548 6B          ; 	pli
( 512) 0549 AB8300      ; 	sta.w 0,I++
( 513)                  ; ;  153:     rowoffset[3] :=  0; coloffset[3] := +1; {right}
( 514) 054C ABE2B116    ; 	psh.w #rowoffset_011
( 515) 0550 A903        ; 	lda #3
( 516) 0552 AB0A        ; 	asl.w a
( 517) 0554 18          ; 	clc
( 518) 0555 CB7501      ; 	adc.w 1,S
( 519) 0558 CB9501      ; 	sta.w 1,S
( 520) 055B A900        ; 	lda #0
( 521) 055D 6B          ; 	pli
( 522) 055E AB8300      ; 	sta.w 0,I++
( 523) 0561 ABE2BB16    ; 	psh.w #coloffset_012
( 524) 0565 A903        ; 	lda #3
( 525) 0567 AB0A        ; 	asl.w a
( 526) 0569 18          ; 	clc
( 527) 056A CB7501      ; 	adc.w 1,S
( 528) 056D CB9501      ; 	sta.w 1,S
( 529) 0570 A901        ; 	lda #1
( 530) 0572 6B          ; 	pli
( 531) 0573 AB8300      ; 	sta.w 0,I++
( 532)                  ; ;  154:     rowoffset[4] := +1; coloffset[4] :=  0; {down}
( 533) 0576 ABE2B116    ; 	psh.w #rowoffset_011
( 534) 057A A904        ; 	lda #4
( 535) 057C AB0A        ; 	asl.w a
( 536) 057E 18          ; 	clc
( 537) 057F CB7501      ; 	adc.w 1,S
( 538) 0582 CB9501      ; 	sta.w 1,S
( 539) 0585 A901        ; 	lda #1
( 540) 0587 6B          ; 	pli
( 541) 0588 AB8300      ; 	sta.w 0,I++
( 542) 058B ABE2BB16    ; 	psh.w #coloffset_012
( 543) 058F A904        ; 	lda #4
( 544) 0591 AB0A        ; 	asl.w a
( 545) 0593 18          ; 	clc
( 546) 0594 CB7501      ; 	adc.w 1,S
( 547) 0597 CB9501      ; 	sta.w 1,S
( 548) 059A A900        ; 	lda #0
( 549) 059C 6B          ; 	pli
( 550) 059D AB8300      ; 	sta.w 0,I++
( 551)                  ; ;  155:     END {Initialize};
( 552) 05A0 AB9A        ; 	txs.w
( 553) 05A2 ABFA        ; 	plx.w
( 554) 05A4 60          ; 	rts
( 555)                  ; 	.end initialize_013
( 556)                  ; ;  156: 
( 557)                  ; ;  157: 
( 558)                  ; ;  158: FUNCTION random (limit : posint) : posint;
( 559)                  ; ;  159: 
( 560)                  ; ;  160:     {Return a random integer from 0..limit-1.}
( 561)                  ; ;  161: 
( 562)                  ; ;  162:     CONST
( 563)                  ; ;  163:     multiplier = 21;
( 564)                  ; ;  164:     increment  = 77;
( 565)                  ; ;  165:     divisor    = 1024;
( 566)                  ; ;  166: 
( 567)                  ; ;  167:     BEGIN
( 568)                  ; limit_036 .equ +7
( 569)                  ; random_035 .sub
( 570) 05A5 ABDA        ; 	phx.w
( 571) 05A7 ABBA        ; 	tsx.w
( 572) 05A9 C2FC        ; 	adj #-4
( 573)                  ; ;  168:     seed   := (seed*multiplier + increment) MOD divisor;
( 574) 05AB ABADAF16    ; 	lda.w seed_010
( 575) 05AF AB48        ; 	pha.w
( 576) 05B1 ABE21500    ; 	psh.w #21
( 577)                  ; 	pha.w
( 578) 05B5 20FFFF      ; 	jsr _imul
( 579) 05B8 C204        ; 	adj #4
( 580) 05BA AB48        ; 	pha.w
( 581) 05BC A94D        ; 	lda #77
( 582) 05BE 18          ; 	clc
( 583) 05BF CB7501      ; 	adc.w 1,S
( 584) 05C2 C202        ; 	adj #2
( 585) 05C4 AB48        ; 	pha.w
( 586) 05C6 ABE20004    ; 	psh.w #1024
( 587)                  ; 	pha.w
( 588) 05CA 20FFFF      ; 	jsr _idiv
( 589) 05CD C204        ; 	adj #4
( 590) 05CF 1B          ; 	swp a
( 591) 05D0 AB8DAF16    ; 	sta.w seed_010
( 592)                  ; ;  169:     random := (seed*limit) DIV divisor;
( 593) 05D4 ABADAF16    ; 	lda.w seed_010
( 594) 05D8 AB48        ; 	pha.w
( 595) 05DA ABB507      ; 	lda.w limit_036,X
( 596) 05DD AB48        ; 	pha.w
( 597) 05DF 20FFFF      ; 	jsr _imul
( 598) 05E2 C204        ; 	adj #4
( 599) 05E4 AB48        ; 	pha.w
( 600) 05E6 ABE20004    ; 	psh.w #1024
( 601)                  ; 	pha.w
( 602) 05EA 20FFFF      ; 	jsr _idiv
( 603) 05ED C204        ; 	adj #4
( 604) 05EF AB95FD      ; 	sta.w RETURN_VALUE,X
( 605)                  ; ;  170:     END {random};
( 606) 05F2 ABB5FD      ; 	lda.w RETURN_VALUE,X
( 607) 05F5 AB9A        ; 	txs.w
( 608) 05F7 ABFA        ; 	plx.w
( 609) 05F9 60          ; 	rts
( 610)                  ; 	.end random_035
( 611)                  ; ;  171: 
( 612)                  ; ;  172: 
( 613)                  ; ;  173: PROCEDURE NewLocation (creature : contents;
( 614)                  ; ;  174:                oldrow, oldcol : index;
( 615)                  ; ;  175:                VAR newrow, newcol : index);
( 616)                  ; ;  176: 
( 617)                  ; ;  177:     {Find a new location for the creature currently at
( 618)                  ; ;  178:      island[oldrow, oldcol].}
( 619)                  ; ;  179: 
( 620)                  ; ;  180: 
( 621)                  ; ;  181:     VAR
( 622)                  ; ;  182:     adj  : 0..4;        {adjacent locations index}
( 623)                  ; ;  183:     what : contents;    {contents of location}
( 624)                  ; ;  184:     done : boolean;
( 625)                  ; ;  185: 
( 626)                  ; ;  186:     BEGIN
( 627)                  ; creature_038 .equ +15
( 628)                  ; oldrow_039 .equ +13
( 629)                  ; oldcol_040 .equ +11
( 630)                  ; newrow_041 .equ +9
( 631)                  ; newcol_042 .equ +7
( 632)                  ; adj_043 .equ -1
( 633)                  ; what_044 .equ -3
( 634)                  ; done_045 .equ -5
( 635)                  ; newlocation_037 .sub
( 636) 05FA ABDA        ; 	phx.w
( 637) 05FC ABBA        ; 	tsx.w
( 638) 05FE C2FA        ; 	adj #-6
( 639)                  ; ;  187:     done := false;
( 640) 0600 A900        ; 	lda #0
( 641) 0602 AB95FB      ; 	sta.w done_045,X
( 642)                  ; ;  188: 
( 643)                  ; ;  189:     {A wolf first tries to eat a rabbit.
( 644)                  ; ;  190:      Check adjacent locations.}
( 645)                  ; ;  191:     IF creature = wolf THEN BEGIN
( 646) 0605 ABB50F      ; 	lda.w creature_038,X
( 647) 0608 AB48        ; 	pha.w
( 648) 060A A900        ; 	lda #0
( 649) 060C CB4401      ; 	xma.w 1,S
( 650) 060F CBD501      ; 	cmp.w 1,S
( 651) 0612 C202        ; 	adj #2
( 652) 0614 08          ; 	php
( 653) 0615 A901        ; 	lda #1
( 654) 0617 28          ; 	plp
( 655) 0618 F002        ; 	beq L_048
( 656) 061A A900        ; 	lda #0
( 657)                  ; L_048
( 658) 061C ABC90100    ; 	cmp.w #1
( 659) 0620 F003        ; 	beq L_046
( 660) 0622 4CFA06      ; 	jmp L_047
( 661)                  ; L_046
( 662)                  ; ;  192:         adj := 0;
( 663) 0625 A900        ; 	lda #0
( 664) 0627 AB95FF      ; 	sta.w adj_043,X
( 665)                  ; ;  193:         REPEAT
( 666)                  ; L_049
( 667)                  ; ;  194:         adj := adj + 1;
( 668) 062A ABB5FF      ; 	lda.w adj_043,X
( 669) 062D AB48        ; 	pha.w
( 670) 062F A901        ; 	lda #1
( 671) 0631 18          ; 	clc
( 672) 0632 CB7501      ; 	adc.w 1,S
( 673) 0635 C202        ; 	adj #2
( 674) 0637 AB95FF      ; 	sta.w adj_043,X
( 675)                  ; ;  195:         newrow := oldrow + rowoffset[adj];
( 676) 063A ABB509      ; 	lda.w newrow_041,X
( 677) 063D AB48        ; 	pha.w
( 678) 063F ABB50D      ; 	lda.w oldrow_039,X
( 679) 0642 AB48        ; 	pha.w
( 680) 0644 ABE2B116    ; 	psh.w #rowoffset_011
( 681) 0648 ABB5FF      ; 	lda.w adj_043,X
( 682) 064B AB0A        ; 	asl.w a
( 683) 064D 18          ; 	clc
( 684) 064E CB7501      ; 	adc.w 1,S
( 685) 0651 CB9501      ; 	sta.w 1,S
( 686) 0654 6B          ; 	pli
( 687) 0655 ABA300      ; 	lda.w 0,I++
( 688) 0658 18          ; 	clc
( 689) 0659 CB7501      ; 	adc.w 1,S
( 690) 065C C202        ; 	adj #2
( 691) 065E 6B          ; 	pli
( 692) 065F AB8300      ; 	sta.w 0,I++
( 693)                  ; ;  196:         newcol := oldcol + coloffset[adj];
( 694) 0662 ABB507      ; 	lda.w newcol_042,X
( 695) 0665 AB48        ; 	pha.w
( 696) 0667 ABB50B      ; 	lda.w oldcol_040,X
( 697) 066A AB48        ; 	pha.w
( 698) 066C ABE2BB16    ; 	psh.w #coloffset_012
( 699) 0670 ABB5FF      ; 	lda.w adj_043,X
( 700) 0673 AB0A        ; 	asl.w a
( 701) 0675 18          ; 	clc
( 702) 0676 CB7501      ; 	adc.w 1,S
( 703) 0679 CB9501      ; 	sta.w 1,S
( 704) 067C 6B          ; 	pli
( 705) 067D ABA300      ; 	lda.w 0,I++
( 706) 0680 18          ; 	clc
( 707) 0681 CB7501      ; 	adc.w 1,S
( 708) 0684 C202        ; 	adj #2
( 709) 0686 6B          ; 	pli
( 710) 0687 AB8300      ; 	sta.w 0,I++
( 711)                  ; ;  197:         what   := island[newrow, newcol];
( 712) 068A ABE2AD14    ; 	psh.w #island_002
( 713) 068E ABA109      ; 	lda.w (newrow_041,X)
( 714) 0691 AB48        ; 	pha.w
( 715) 0693 ABE21600    ; 	psh.w #22
( 716) 0697 20FFFF      ; 	jsr _imul
( 717) 069A C204        ; 	adj #4
( 718) 069C 18          ; 	clc
( 719) 069D CB7501      ; 	adc.w 1,S
( 720) 06A0 CB9501      ; 	sta.w 1,S
( 721) 06A3 ABA107      ; 	lda.w (newcol_042,X)
( 722) 06A6 AB0A        ; 	asl.w a
( 723) 06A8 18          ; 	clc
( 724) 06A9 CB7501      ; 	adc.w 1,S
( 725) 06AC CB9501      ; 	sta.w 1,S
( 726) 06AF 6B          ; 	pli
( 727) 06B0 ABA300      ; 	lda.w 0,I++
( 728) 06B3 AB95FD      ; 	sta.w what_044,X
( 729)                  ; ;  198:         done   := what = rabbit;
( 730) 06B6 ABB5FD      ; 	lda.w what_044,X
( 731) 06B9 AB48        ; 	pha.w
( 732) 06BB A901        ; 	lda #1
( 733) 06BD CB4401      ; 	xma.w 1,S
( 734) 06C0 CBD501      ; 	cmp.w 1,S
( 735) 06C3 C202        ; 	adj #2
( 736) 06C5 08          ; 	php
( 737) 06C6 A901        ; 	lda #1
( 738) 06C8 28          ; 	plp
( 739) 06C9 F002        ; 	beq L_051
( 740) 06CB A900        ; 	lda #0
( 741)                  ; L_051
( 742) 06CD AB95FB      ; 	sta.w done_045,X
( 743)                  ; ;  199:         UNTIL done OR (adj = 4);
( 744) 06D0 ABB5FB      ; 	lda.w done_045,X
( 745) 06D3 AB48        ; 	pha.w
( 746) 06D5 ABB5FF      ; 	lda.w adj_043,X
( 747) 06D8 AB48        ; 	pha.w
( 748) 06DA A904        ; 	lda #4
( 749) 06DC CB4401      ; 	xma.w 1,S
( 750) 06DF CBD501      ; 	cmp.w 1,S
( 751) 06E2 C202        ; 	adj #2
( 752) 06E4 08          ; 	php
( 753) 06E5 A901        ; 	lda #1
( 754) 06E7 28          ; 	plp
( 755) 06E8 F002        ; 	beq L_052
( 756) 06EA A900        ; 	lda #0
( 757)                  ; L_052
( 758) 06EC CB1501      ; 	ora.w 1,S
( 759) 06EF C202        ; 	adj #2
( 760) 06F1 ABC90100    ; 	cmp.w #1
( 761) 06F5 F003        ; 	beq L_050
( 762) 06F7 4C2A06      ; 	jmp L_049
( 763)                  ; L_050
( 764)                  ; ;  200:     END;
( 765)                  ; L_047
( 766)                  ; ;  201: 
( 767)                  ; ;  202:     {Move randomly into an adjacent location or stay put.}
( 768)                  ; ;  203:     IF NOT done THEN BEGIN
( 769) 06FA ABB5FB      ; 	lda.w done_045,X
( 770) 06FD 4901        ; 	eor #1
( 771) 06FF ABC90100    ; 	cmp.w #1
( 772) 0703 F003        ; 	beq L_053
( 773) 0705 4CF307      ; 	jmp L_054
( 774)                  ; L_053
( 775)                  ; ;  204:         REPEAT
( 776)                  ; L_055
( 777)                  ; ;  205:         adj := random(5);
( 778) 0708 ABE20500    ; 	psh.w #5
( 779)                  ; 	pha.w
( 780) 070C ABB505      ; 	lda.w STATIC_LINK,X
( 781) 070F AB48        ; 	pha.w
( 782) 0711 20A505      ; 	jsr random_035
( 783) 0714 C204        ; 	adj #4
( 784) 0716 AB95FF      ; 	sta.w adj_043,X
( 785)                  ; ;  206:         newrow := oldrow + rowoffset[adj];
( 786) 0719 ABB509      ; 	lda.w newrow_041,X
( 787) 071C AB48        ; 	pha.w
( 788) 071E ABB50D      ; 	lda.w oldrow_039,X
( 789) 0721 AB48        ; 	pha.w
( 790) 0723 ABE2B116    ; 	psh.w #rowoffset_011
( 791) 0727 ABB5FF      ; 	lda.w adj_043,X
( 792) 072A AB0A        ; 	asl.w a
( 793) 072C 18          ; 	clc
( 794) 072D CB7501      ; 	adc.w 1,S
( 795) 0730 CB9501      ; 	sta.w 1,S
( 796) 0733 6B          ; 	pli
( 797) 0734 ABA300      ; 	lda.w 0,I++
( 798) 0737 18          ; 	clc
( 799) 0738 CB7501      ; 	adc.w 1,S
( 800) 073B C202        ; 	adj #2
( 801) 073D 6B          ; 	pli
( 802) 073E AB8300      ; 	sta.w 0,I++
( 803)                  ; ;  207:         newcol := oldcol + coloffset[adj];
( 804) 0741 ABB507      ; 	lda.w newcol_042,X
( 805) 0744 AB48        ; 	pha.w
( 806) 0746 ABB50B      ; 	lda.w oldcol_040,X
( 807) 0749 AB48        ; 	pha.w
( 808) 074B ABE2BB16    ; 	psh.w #coloffset_012
( 809) 074F ABB5FF      ; 	lda.w adj_043,X
( 810) 0752 AB0A        ; 	asl.w a
( 811) 0754 18          ; 	clc
( 812) 0755 CB7501      ; 	adc.w 1,S
( 813) 0758 CB9501      ; 	sta.w 1,S
( 814) 075B 6B          ; 	pli
( 815) 075C ABA300      ; 	lda.w 0,I++
( 816) 075F 18          ; 	clc
( 817) 0760 CB7501      ; 	adc.w 1,S
( 818) 0763 C202        ; 	adj #2
( 819) 0765 6B          ; 	pli
( 820) 0766 AB8300      ; 	sta.w 0,I++
( 821)                  ; ;  208:         what   := island[newrow, newcol];
( 822) 0769 ABE2AD14    ; 	psh.w #island_002
( 823) 076D ABA109      ; 	lda.w (newrow_041,X)
( 824) 0770 AB48        ; 	pha.w
( 825) 0772 ABE21600    ; 	psh.w #22
( 826) 0776 20FFFF      ; 	jsr _imul
( 827) 0779 C204        ; 	adj #4
( 828) 077B 18          ; 	clc
( 829) 077C CB7501      ; 	adc.w 1,S
( 830) 077F CB9501      ; 	sta.w 1,S
( 831) 0782 ABA107      ; 	lda.w (newcol_042,X)
( 832) 0785 AB0A        ; 	asl.w a
( 833) 0787 18          ; 	clc
( 834) 0788 CB7501      ; 	adc.w 1,S
( 835) 078B CB9501      ; 	sta.w 1,S
( 836) 078E 6B          ; 	pli
( 837) 078F ABA300      ; 	lda.w 0,I++
( 838) 0792 AB95FD      ; 	sta.w what_044,X
( 839)                  ; ;  209:         UNTIL    (what = empty)
( 840) 0795 ABB5FD      ; 	lda.w what_044,X
( 841) 0798 AB48        ; 	pha.w
( 842) 079A A904        ; 	lda #4
( 843) 079C CB4401      ; 	xma.w 1,S
( 844) 079F CBD501      ; 	cmp.w 1,S
( 845) 07A2 C202        ; 	adj #2
( 846) 07A4 08          ; 	php
( 847) 07A5 A901        ; 	lda #1
( 848) 07A7 28          ; 	plp
( 849) 07A8 F002        ; 	beq L_057
( 850) 07AA A900        ; 	lda #0
( 851)                  ; L_057
( 852)                  ; ;  210:           OR ((newrow = oldrow) AND (newcol = oldcol));
( 853) 07AC AB48        ; 	pha.w
( 854) 07AE ABA109      ; 	lda.w (newrow_041,X)
( 855) 07B1 AB48        ; 	pha.w
( 856) 07B3 ABB50D      ; 	lda.w oldrow_039,X
( 857) 07B6 CB4401      ; 	xma.w 1,S
( 858) 07B9 CBD501      ; 	cmp.w 1,S
( 859) 07BC C202        ; 	adj #2
( 860) 07BE 08          ; 	php
( 861) 07BF A901        ; 	lda #1
( 862) 07C1 28          ; 	plp
( 863) 07C2 F002        ; 	beq L_058
( 864) 07C4 A900        ; 	lda #0
( 865)                  ; L_058
( 866) 07C6 AB48        ; 	pha.w
( 867) 07C8 ABA107      ; 	lda.w (newcol_042,X)
( 868) 07CB AB48        ; 	pha.w
( 869) 07CD ABB50B      ; 	lda.w oldcol_040,X
( 870) 07D0 CB4401      ; 	xma.w 1,S
( 871) 07D3 CBD501      ; 	cmp.w 1,S
( 872) 07D6 C202        ; 	adj #2
( 873) 07D8 08          ; 	php
( 874) 07D9 A901        ; 	lda #1
( 875) 07DB 28          ; 	plp
( 876) 07DC F002        ; 	beq L_059
( 877) 07DE A900        ; 	lda #0
( 878)                  ; L_059
( 879) 07E0 CB3501      ; 	and.w 1,S
( 880) 07E3 C202        ; 	adj #2
( 881) 07E5 CB1501      ; 	ora.w 1,S
( 882) 07E8 C202        ; 	adj #2
( 883) 07EA ABC90100    ; 	cmp.w #1
( 884) 07EE F003        ; 	beq L_056
( 885) 07F0 4C0807      ; 	jmp L_055
( 886)                  ; L_056
( 887)                  ; ;  211:     END;
( 888)                  ; L_054
( 889)                  ; ;  212:     END {NewLocation};
( 890) 07F3 AB9A        ; 	txs.w
( 891) 07F5 ABFA        ; 	plx.w
( 892) 07F7 60          ; 	rts
( 893)                  ; 	.end newlocation_037
( 894)                  ; ;  213: 
( 895)                  ; ;  214: 
( 896)                  ; ;  215: PROCEDURE ProcessWolf (oldrow, oldcol : index);
( 897)                  ; ;  216: 
( 898)                  ; ;  217:     {Process the wolf located at island[oldrow, oldcol].}
( 899)                  ; ;  218: 
( 900)                  ; ;  219:     VAR
( 901)                  ; ;  220:     newrow, newcol : index;     {new row and column}
( 902)                  ; ;  221:     moved : boolean;            {true iff wolf moved}
( 903)                  ; ;  222: 
( 904)                  ; ;  223:     BEGIN
( 905)                  ; oldrow_061 .equ +9
( 906)                  ; oldcol_062 .equ +7
( 907)                  ; newrow_063 .equ -1
( 908)                  ; newcol_064 .equ -3
( 909)                  ; moved_065 .equ -5
( 910)                  ; processwolf_060 .sub
( 911) 07F8 ABDA        ; 	phx.w
( 912) 07FA ABBA        ; 	tsx.w
( 913) 07FC C2FA        ; 	adj #-6
( 914)                  ; ;  224: 
( 915)                  ; ;  225:     {Lose a food unit.}
( 916)                  ; ;  226:     foodunits[oldrow, oldcol] := foodunits[oldrow, oldcol] - 1;
( 917) 07FE ABE29F15    ; 	psh.w #foodunits_003
( 918) 0802 ABB509      ; 	lda.w oldrow_061,X
( 919) 0805 AB3A        ; 	dec.w a
( 920) 0807 AB48        ; 	pha.w
( 921) 0809 ABE21200    ; 	psh.w #18
( 922) 080D 20FFFF      ; 	jsr _imul
( 923) 0810 C204        ; 	adj #4
( 924) 0812 18          ; 	clc
( 925) 0813 CB7501      ; 	adc.w 1,S
( 926) 0816 CB9501      ; 	sta.w 1,S
( 927) 0819 ABB507      ; 	lda.w oldcol_062,X
( 928) 081C AB3A        ; 	dec.w a
( 929) 081E AB0A        ; 	asl.w a
( 930) 0820 18          ; 	clc
( 931) 0821 CB7501      ; 	adc.w 1,S
( 932) 0824 CB9501      ; 	sta.w 1,S
( 933) 0827 ABE29F15    ; 	psh.w #foodunits_003
( 934) 082B ABB509      ; 	lda.w oldrow_061,X
( 935) 082E AB3A        ; 	dec.w a
( 936) 0830 AB48        ; 	pha.w
( 937) 0832 ABE21200    ; 	psh.w #18
( 938) 0836 20FFFF      ; 	jsr _imul
( 939) 0839 C204        ; 	adj #4
( 940) 083B 18          ; 	clc
( 941) 083C CB7501      ; 	adc.w 1,S
( 942) 083F CB9501      ; 	sta.w 1,S
( 943) 0842 ABB507      ; 	lda.w oldcol_062,X
( 944) 0845 AB3A        ; 	dec.w a
( 945) 0847 AB0A        ; 	asl.w a
( 946) 0849 18          ; 	clc
( 947) 084A CB7501      ; 	adc.w 1,S
( 948) 084D CB9501      ; 	sta.w 1,S
( 949) 0850 6B          ; 	pli
( 950) 0851 ABA300      ; 	lda.w 0,I++
( 951) 0854 AB48        ; 	pha.w
( 952) 0856 A901        ; 	lda #1
( 953) 0858 CB4401      ; 	xma.w 1,S
( 954) 085B 38          ; 	sec
( 955) 085C CBF501      ; 	sbc.w 1,S
( 956) 085F C202        ; 	adj #2
( 957) 0861 6B          ; 	pli
( 958) 0862 AB8300      ; 	sta.w 0,I++
( 959)                  ; ;  227: 
( 960)                  ; ;  228:     IF foodunits[oldrow, oldcol] = 0 THEN BEGIN
( 961) 0865 ABE29F15    ; 	psh.w #foodunits_003
( 962) 0869 ABB509      ; 	lda.w oldrow_061,X
( 963) 086C AB3A        ; 	dec.w a
( 964) 086E AB48        ; 	pha.w
( 965) 0870 ABE21200    ; 	psh.w #18
( 966) 0874 20FFFF      ; 	jsr _imul
( 967) 0877 C204        ; 	adj #4
( 968) 0879 18          ; 	clc
( 969) 087A CB7501      ; 	adc.w 1,S
( 970) 087D CB9501      ; 	sta.w 1,S
( 971) 0880 ABB507      ; 	lda.w oldcol_062,X
( 972) 0883 AB3A        ; 	dec.w a
( 973) 0885 AB0A        ; 	asl.w a
( 974) 0887 18          ; 	clc
( 975) 0888 CB7501      ; 	adc.w 1,S
( 976) 088B CB9501      ; 	sta.w 1,S
( 977) 088E 6B          ; 	pli
( 978) 088F ABA300      ; 	lda.w 0,I++
( 979) 0892 AB48        ; 	pha.w
( 980) 0894 A900        ; 	lda #0
( 981) 0896 CB4401      ; 	xma.w 1,S
( 982) 0899 CBD501      ; 	cmp.w 1,S
( 983) 089C C202        ; 	adj #2
( 984) 089E 08          ; 	php
( 985) 089F A901        ; 	lda #1
( 986) 08A1 28          ; 	plp
( 987) 08A2 F002        ; 	beq L_068
( 988) 08A4 A900        ; 	lda #0
( 989)                  ; L_068
( 990) 08A6 ABC90100    ; 	cmp.w #1
( 991) 08AA F003        ; 	beq L_066
( 992) 08AC 4C6D09      ; 	jmp L_067
( 993)                  ; L_066
( 994)                  ; ;  229: 
( 995)                  ; ;  230:         {Die of starvation.}
( 996)                  ; ;  231:         island[oldrow, oldcol] := empty;
( 997) 08AF ABE2AD14    ; 	psh.w #island_002
( 998) 08B3 ABB509      ; 	lda.w oldrow_061,X
( 999) 08B6 AB48        ; 	pha.w
(1000) 08B8 ABE21600    ; 	psh.w #22
(1001) 08BC 20FFFF      ; 	jsr _imul
(1002) 08BF C204        ; 	adj #4
(1003) 08C1 18          ; 	clc
(1004) 08C2 CB7501      ; 	adc.w 1,S
(1005) 08C5 CB9501      ; 	sta.w 1,S
(1006) 08C8 ABB507      ; 	lda.w oldcol_062,X
(1007) 08CB AB0A        ; 	asl.w a
(1008) 08CD 18          ; 	clc
(1009) 08CE CB7501      ; 	adc.w 1,S
(1010) 08D1 CB9501      ; 	sta.w 1,S
(1011) 08D4 A904        ; 	lda #4
(1012) 08D6 6B          ; 	pli
(1013) 08D7 AB8300      ; 	sta.w 0,I++
(1014)                  ; ;  232:         numwolves := numwolves - 1;
(1015) 08DA ABADA516    ; 	lda.w numwolves_005
(1016) 08DE AB48        ; 	pha.w
(1017) 08E0 A901        ; 	lda #1
(1018) 08E2 CB4401      ; 	xma.w 1,S
(1019) 08E5 38          ; 	sec
(1020) 08E6 CBF501      ; 	sbc.w 1,S
(1021) 08E9 C202        ; 	adj #2
(1022) 08EB AB8DA516    ; 	sta.w numwolves_005
(1023)                  ; ;  233:         writeln('t =', t:4, ' : Wolf died at ',
(1024) 08EF ABE2A914    ; 	psh.w #S_069
(1025) 08F3 ABE20000    ; 	psh.w #0
(1026) 08F7 ABE20300    ; 	psh.w #3
(1027) 08FB 20FFFF      ; 	jsr _swrite
(1028) 08FE C206        ; 	adj #6
(1029) 0900 ABADAB16    ; 	lda.w t_008
(1030) 0904 AB48        ; 	pha.w
(1031) 0906 ABE20400    ; 	psh.w #4
(1032)                  ; 	pha.w
(1033) 090A 20FFFF      ; 	jsr _iwrite
(1034) 090D C204        ; 	adj #4
(1035) 090F ABE29914    ; 	psh.w #S_070
(1036) 0913 ABE20000    ; 	psh.w #0
(1037) 0917 ABE21000    ; 	psh.w #16
(1038) 091B 20FFFF      ; 	jsr _swrite
(1039) 091E C206        ; 	adj #6
(1040)                  ; ;  234:             '[', oldrow:1, ', ', oldcol:1, ']');
(1041) 0920 ABE25B00    ; 	psh.w #91
(1042)                  ; 	pha.w
(1043) 0924 ABE20000    ; 	psh.w #0
(1044) 0928 20FFFF      ; 	jsr _cwrite
(1045) 092B C204        ; 	adj #4
(1046) 092D ABB509      ; 	lda.w oldrow_061,X
(1047) 0930 AB48        ; 	pha.w
(1048) 0932 ABE20100    ; 	psh.w #1
(1049)                  ; 	pha.w
(1050) 0936 20FFFF      ; 	jsr _iwrite
(1051) 0939 C204        ; 	adj #4
(1052) 093B ABE29714    ; 	psh.w #S_071
(1053) 093F ABE20000    ; 	psh.w #0
(1054) 0943 ABE20200    ; 	psh.w #2
(1055) 0947 20FFFF      ; 	jsr _swrite
(1056) 094A C206        ; 	adj #6
(1057) 094C ABB507      ; 	lda.w oldcol_062,X
(1058) 094F AB48        ; 	pha.w
(1059) 0951 ABE20100    ; 	psh.w #1
(1060)                  ; 	pha.w
(1061) 0955 20FFFF      ; 	jsr _iwrite
(1062) 0958 C204        ; 	adj #4
(1063) 095A ABE25D00    ; 	psh.w #93
(1064)                  ; 	pha.w
(1065) 095E ABE20000    ; 	psh.w #0
(1066) 0962 20FFFF      ; 	jsr _cwrite
(1067) 0965 C204        ; 	adj #4
(1068) 0967 20FFFF      ; 	jsr _writeln
(1069)                  ; ;  235:     END
(1070)                  ; ;  236:     ELSE BEGIN
(1071) 096A 4CEF0D      ; 	jmp L_072
(1072)                  ; L_067
(1073)                  ; ;  237: 
(1074)                  ; ;  238:         {Move to adjacent location, or stay put.}
(1075)                  ; ;  239:         NewLocation(wolf, oldrow, oldcol, newrow, newcol);
(1076) 096D ABE20000    ; 	psh.w #0
(1077)                  ; 	pha.w
(1078) 0971 ABB509      ; 	lda.w oldrow_061,X
(1079) 0974 AB48        ; 	pha.w
(1080) 0976 ABB507      ; 	lda.w oldcol_062,X
(1081) 0979 AB48        ; 	pha.w
(1082) 097B AB8A        ; 	txa.w
(1083) 097D 18          ; 	clc
(1084) 097E AB69FFFF    ; 	adc.w #newrow_063
(1085) 0982 AB48        ; 	pha.w
(1086) 0984 AB8A        ; 	txa.w
(1087) 0986 18          ; 	clc
(1088) 0987 AB69FDFF    ; 	adc.w #newcol_064
(1089) 098B AB48        ; 	pha.w
(1090) 098D ABB505      ; 	lda.w STATIC_LINK,X
(1091) 0990 AB48        ; 	pha.w
(1092) 0992 20FA05      ; 	jsr newlocation_037
(1093) 0995 C20C        ; 	adj #12
(1094)                  ; ;  240:         moved := (newrow <> oldrow) OR (newcol <> oldcol);
(1095) 0997 ABB5FF      ; 	lda.w newrow_063,X
(1096) 099A AB48        ; 	pha.w
(1097) 099C ABB509      ; 	lda.w oldrow_061,X
(1098) 099F CB4401      ; 	xma.w 1,S
(1099) 09A2 CBD501      ; 	cmp.w 1,S
(1100) 09A5 C202        ; 	adj #2
(1101) 09A7 08          ; 	php
(1102) 09A8 A901        ; 	lda #1
(1103) 09AA 28          ; 	plp
(1104) 09AB D002        ; 	bne L_073
(1105) 09AD A900        ; 	lda #0
(1106)                  ; L_073
(1107) 09AF AB48        ; 	pha.w
(1108) 09B1 ABB5FD      ; 	lda.w newcol_064,X
(1109) 09B4 AB48        ; 	pha.w
(1110) 09B6 ABB507      ; 	lda.w oldcol_062,X
(1111) 09B9 CB4401      ; 	xma.w 1,S
(1112) 09BC CBD501      ; 	cmp.w 1,S
(1113) 09BF C202        ; 	adj #2
(1114) 09C1 08          ; 	php
(1115) 09C2 A901        ; 	lda #1
(1116) 09C4 28          ; 	plp
(1117) 09C5 D002        ; 	bne L_074
(1118) 09C7 A900        ; 	lda #0
(1119)                  ; L_074
(1120) 09C9 CB1501      ; 	ora.w 1,S
(1121) 09CC C202        ; 	adj #2
(1122) 09CE AB95FB      ; 	sta.w moved_065,X
(1123)                  ; ;  241: 
(1124)                  ; ;  242:         IF moved THEN BEGIN
(1125) 09D1 ABB5FB      ; 	lda.w moved_065,X
(1126) 09D4 ABC90100    ; 	cmp.w #1
(1127) 09D8 F003        ; 	beq L_075
(1128) 09DA 4CF60B      ; 	jmp L_076
(1129)                  ; L_075
(1130)                  ; ;  243: 
(1131)                  ; ;  244:         {If there's a rabbit there, eat it.}
(1132)                  ; ;  245:         IF island[newrow, newcol] = rabbit THEN BEGIN
(1133) 09DD ABE2AD14    ; 	psh.w #island_002
(1134) 09E1 ABB5FF      ; 	lda.w newrow_063,X
(1135) 09E4 AB48        ; 	pha.w
(1136) 09E6 ABE21600    ; 	psh.w #22
(1137) 09EA 20FFFF      ; 	jsr _imul
(1138) 09ED C204        ; 	adj #4
(1139) 09EF 18          ; 	clc
(1140) 09F0 CB7501      ; 	adc.w 1,S
(1141) 09F3 CB9501      ; 	sta.w 1,S
(1142) 09F6 ABB5FD      ; 	lda.w newcol_064,X
(1143) 09F9 AB0A        ; 	asl.w a
(1144) 09FB 18          ; 	clc
(1145) 09FC CB7501      ; 	adc.w 1,S
(1146) 09FF CB9501      ; 	sta.w 1,S
(1147) 0A02 6B          ; 	pli
(1148) 0A03 ABA300      ; 	lda.w 0,I++
(1149) 0A06 AB48        ; 	pha.w
(1150) 0A08 A901        ; 	lda #1
(1151) 0A0A CB4401      ; 	xma.w 1,S
(1152) 0A0D CBD501      ; 	cmp.w 1,S
(1153) 0A10 C202        ; 	adj #2
(1154) 0A12 08          ; 	php
(1155) 0A13 A901        ; 	lda #1
(1156) 0A15 28          ; 	plp
(1157) 0A16 F002        ; 	beq L_079
(1158) 0A18 A900        ; 	lda #0
(1159)                  ; L_079
(1160) 0A1A ABC90100    ; 	cmp.w #1
(1161) 0A1E F003        ; 	beq L_077
(1162) 0A20 4C170B      ; 	jmp L_078
(1163)                  ; L_077
(1164)                  ; ;  246:             foodunits[oldrow, oldcol] :=
(1165) 0A23 ABE29F15    ; 	psh.w #foodunits_003
(1166) 0A27 ABB509      ; 	lda.w oldrow_061,X
(1167) 0A2A AB3A        ; 	dec.w a
(1168) 0A2C AB48        ; 	pha.w
(1169) 0A2E ABE21200    ; 	psh.w #18
(1170) 0A32 20FFFF      ; 	jsr _imul
(1171) 0A35 C204        ; 	adj #4
(1172) 0A37 18          ; 	clc
(1173) 0A38 CB7501      ; 	adc.w 1,S
(1174) 0A3B CB9501      ; 	sta.w 1,S
(1175) 0A3E ABB507      ; 	lda.w oldcol_062,X
(1176) 0A41 AB3A        ; 	dec.w a
(1177) 0A43 AB0A        ; 	asl.w a
(1178) 0A45 18          ; 	clc
(1179) 0A46 CB7501      ; 	adc.w 1,S
(1180) 0A49 CB9501      ; 	sta.w 1,S
(1181)                  ; ;  247:             foodunits[oldrow, oldcol] + rabbitfoodunits;
(1182) 0A4C ABE29F15    ; 	psh.w #foodunits_003
(1183) 0A50 ABB509      ; 	lda.w oldrow_061,X
(1184) 0A53 AB3A        ; 	dec.w a
(1185) 0A55 AB48        ; 	pha.w
(1186) 0A57 ABE21200    ; 	psh.w #18
(1187) 0A5B 20FFFF      ; 	jsr _imul
(1188) 0A5E C204        ; 	adj #4
(1189) 0A60 18          ; 	clc
(1190) 0A61 CB7501      ; 	adc.w 1,S
(1191) 0A64 CB9501      ; 	sta.w 1,S
(1192) 0A67 ABB507      ; 	lda.w oldcol_062,X
(1193) 0A6A AB3A        ; 	dec.w a
(1194) 0A6C AB0A        ; 	asl.w a
(1195) 0A6E 18          ; 	clc
(1196) 0A6F CB7501      ; 	adc.w 1,S
(1197) 0A72 CB9501      ; 	sta.w 1,S
(1198) 0A75 6B          ; 	pli
(1199) 0A76 ABA300      ; 	lda.w 0,I++
(1200) 0A79 AB48        ; 	pha.w
(1201) 0A7B A906        ; 	lda #6
(1202) 0A7D 18          ; 	clc
(1203) 0A7E CB7501      ; 	adc.w 1,S
(1204) 0A81 C202        ; 	adj #2
(1205) 0A83 6B          ; 	pli
(1206) 0A84 AB8300      ; 	sta.w 0,I++
(1207)                  ; ;  248:             numrabbits := numrabbits - 1;
(1208) 0A87 ABADA716    ; 	lda.w numrabbits_006
(1209) 0A8B AB48        ; 	pha.w
(1210) 0A8D A901        ; 	lda #1
(1211) 0A8F CB4401      ; 	xma.w 1,S
(1212) 0A92 38          ; 	sec
(1213) 0A93 CBF501      ; 	sbc.w 1,S
(1214) 0A96 C202        ; 	adj #2
(1215) 0A98 AB8DA716    ; 	sta.w numrabbits_006
(1216)                  ; ;  249:             writeln('t =', t:4, ' : Rabbit eaten at ',
(1217) 0A9C ABE2A914    ; 	psh.w #S_069
(1218) 0AA0 ABE20000    ; 	psh.w #0
(1219) 0AA4 ABE20300    ; 	psh.w #3
(1220) 0AA8 20FFFF      ; 	jsr _swrite
(1221) 0AAB C206        ; 	adj #6
(1222) 0AAD ABADAB16    ; 	lda.w t_008
(1223) 0AB1 AB48        ; 	pha.w
(1224) 0AB3 ABE20400    ; 	psh.w #4
(1225)                  ; 	pha.w
(1226) 0AB7 20FFFF      ; 	jsr _iwrite
(1227) 0ABA C204        ; 	adj #4
(1228) 0ABC ABE28414    ; 	psh.w #S_080
(1229) 0AC0 ABE20000    ; 	psh.w #0
(1230) 0AC4 ABE21300    ; 	psh.w #19
(1231) 0AC8 20FFFF      ; 	jsr _swrite
(1232) 0ACB C206        ; 	adj #6
(1233)                  ; ;  250:                 '[', newrow:1, ', ', newcol:1, ']');
(1234) 0ACD ABE25B00    ; 	psh.w #91
(1235)                  ; 	pha.w
(1236) 0AD1 ABE20000    ; 	psh.w #0
(1237) 0AD5 20FFFF      ; 	jsr _cwrite
(1238) 0AD8 C204        ; 	adj #4
(1239) 0ADA ABB5FF      ; 	lda.w newrow_063,X
(1240) 0ADD AB48        ; 	pha.w
(1241) 0ADF ABE20100    ; 	psh.w #1
(1242)                  ; 	pha.w
(1243) 0AE3 20FFFF      ; 	jsr _iwrite
(1244) 0AE6 C204        ; 	adj #4
(1245) 0AE8 ABE29714    ; 	psh.w #S_071
(1246) 0AEC ABE20000    ; 	psh.w #0
(1247) 0AF0 ABE20200    ; 	psh.w #2
(1248) 0AF4 20FFFF      ; 	jsr _swrite
(1249) 0AF7 C206        ; 	adj #6
(1250) 0AF9 ABB5FD      ; 	lda.w newcol_064,X
(1251) 0AFC AB48        ; 	pha.w
(1252) 0AFE ABE20100    ; 	psh.w #1
(1253)                  ; 	pha.w
(1254) 0B02 20FFFF      ; 	jsr _iwrite
(1255) 0B05 C204        ; 	adj #4
(1256) 0B07 ABE25D00    ; 	psh.w #93
(1257)                  ; 	pha.w
(1258) 0B0B ABE20000    ; 	psh.w #0
(1259) 0B0F 20FFFF      ; 	jsr _cwrite
(1260) 0B12 C204        ; 	adj #4
(1261) 0B14 20FFFF      ; 	jsr _writeln
(1262)                  ; ;  251:         END;
(1263)                  ; L_078
(1264)                  ; ;  252: 
(1265)                  ; ;  253:         {Set new (or same) location.}
(1266)                  ; ;  254:         island[newrow, newcol] := newwolf;
(1267) 0B17 ABE2AD14    ; 	psh.w #island_002
(1268) 0B1B ABB5FF      ; 	lda.w newrow_063,X
(1269) 0B1E AB48        ; 	pha.w
(1270) 0B20 ABE21600    ; 	psh.w #22
(1271) 0B24 20FFFF      ; 	jsr _imul
(1272) 0B27 C204        ; 	adj #4
(1273) 0B29 18          ; 	clc
(1274) 0B2A CB7501      ; 	adc.w 1,S
(1275) 0B2D CB9501      ; 	sta.w 1,S
(1276) 0B30 ABB5FD      ; 	lda.w newcol_064,X
(1277) 0B33 AB0A        ; 	asl.w a
(1278) 0B35 18          ; 	clc
(1279) 0B36 CB7501      ; 	adc.w 1,S
(1280) 0B39 CB9501      ; 	sta.w 1,S
(1281) 0B3C A902        ; 	lda #2
(1282) 0B3E 6B          ; 	pli
(1283) 0B3F AB8300      ; 	sta.w 0,I++
(1284)                  ; ;  255:         island[oldrow, oldcol] := empty;
(1285) 0B42 ABE2AD14    ; 	psh.w #island_002
(1286) 0B46 ABB509      ; 	lda.w oldrow_061,X
(1287) 0B49 AB48        ; 	pha.w
(1288) 0B4B ABE21600    ; 	psh.w #22
(1289) 0B4F 20FFFF      ; 	jsr _imul
(1290) 0B52 C204        ; 	adj #4
(1291) 0B54 18          ; 	clc
(1292) 0B55 CB7501      ; 	adc.w 1,S
(1293) 0B58 CB9501      ; 	sta.w 1,S
(1294) 0B5B ABB507      ; 	lda.w oldcol_062,X
(1295) 0B5E AB0A        ; 	asl.w a
(1296) 0B60 18          ; 	clc
(1297) 0B61 CB7501      ; 	adc.w 1,S
(1298) 0B64 CB9501      ; 	sta.w 1,S
(1299) 0B67 A904        ; 	lda #4
(1300) 0B69 6B          ; 	pli
(1301) 0B6A AB8300      ; 	sta.w 0,I++
(1302)                  ; ;  256:         foodunits[newrow, newcol] := foodunits[oldrow, oldcol];
(1303) 0B6D ABE29F15    ; 	psh.w #foodunits_003
(1304) 0B71 ABB5FF      ; 	lda.w newrow_063,X
(1305) 0B74 AB3A        ; 	dec.w a
(1306) 0B76 AB48        ; 	pha.w
(1307) 0B78 ABE21200    ; 	psh.w #18
(1308) 0B7C 20FFFF      ; 	jsr _imul
(1309) 0B7F C204        ; 	adj #4
(1310) 0B81 18          ; 	clc
(1311) 0B82 CB7501      ; 	adc.w 1,S
(1312) 0B85 CB9501      ; 	sta.w 1,S
(1313) 0B88 ABB5FD      ; 	lda.w newcol_064,X
(1314) 0B8B AB3A        ; 	dec.w a
(1315) 0B8D AB0A        ; 	asl.w a
(1316) 0B8F 18          ; 	clc
(1317) 0B90 CB7501      ; 	adc.w 1,S
(1318) 0B93 CB9501      ; 	sta.w 1,S
(1319) 0B96 ABE29F15    ; 	psh.w #foodunits_003
(1320) 0B9A ABB509      ; 	lda.w oldrow_061,X
(1321) 0B9D AB3A        ; 	dec.w a
(1322) 0B9F AB48        ; 	pha.w
(1323) 0BA1 ABE21200    ; 	psh.w #18
(1324) 0BA5 20FFFF      ; 	jsr _imul
(1325) 0BA8 C204        ; 	adj #4
(1326) 0BAA 18          ; 	clc
(1327) 0BAB CB7501      ; 	adc.w 1,S
(1328) 0BAE CB9501      ; 	sta.w 1,S
(1329) 0BB1 ABB507      ; 	lda.w oldcol_062,X
(1330) 0BB4 AB3A        ; 	dec.w a
(1331) 0BB6 AB0A        ; 	asl.w a
(1332) 0BB8 18          ; 	clc
(1333) 0BB9 CB7501      ; 	adc.w 1,S
(1334) 0BBC CB9501      ; 	sta.w 1,S
(1335) 0BBF 6B          ; 	pli
(1336) 0BC0 ABA300      ; 	lda.w 0,I++
(1337) 0BC3 6B          ; 	pli
(1338) 0BC4 AB8300      ; 	sta.w 0,I++
(1339)                  ; ;  257:         foodunits[oldrow, oldcol] := 0;
(1340) 0BC7 ABE29F15    ; 	psh.w #foodunits_003
(1341) 0BCB ABB509      ; 	lda.w oldrow_061,X
(1342) 0BCE AB3A        ; 	dec.w a
(1343) 0BD0 AB48        ; 	pha.w
(1344) 0BD2 ABE21200    ; 	psh.w #18
(1345) 0BD6 20FFFF      ; 	jsr _imul
(1346) 0BD9 C204        ; 	adj #4
(1347) 0BDB 18          ; 	clc
(1348) 0BDC CB7501      ; 	adc.w 1,S
(1349) 0BDF CB9501      ; 	sta.w 1,S
(1350) 0BE2 ABB507      ; 	lda.w oldcol_062,X
(1351) 0BE5 AB3A        ; 	dec.w a
(1352) 0BE7 AB0A        ; 	asl.w a
(1353) 0BE9 18          ; 	clc
(1354) 0BEA CB7501      ; 	adc.w 1,S
(1355) 0BED CB9501      ; 	sta.w 1,S
(1356) 0BF0 A900        ; 	lda #0
(1357) 0BF2 6B          ; 	pli
(1358) 0BF3 AB8300      ; 	sta.w 0,I++
(1359)                  ; ;  258:         END;
(1360)                  ; L_076
(1361)                  ; ;  259: 
(1362)                  ; ;  260:         {Wolf reproduction time?}
(1363)                  ; ;  261:         IF     ((t MOD wolfreprotime) = 0)
(1364) 0BF6 ABADAB16    ; 	lda.w t_008
(1365) 0BFA AB48        ; 	pha.w
(1366) 0BFC ABE20C00    ; 	psh.w #12
(1367)                  ; 	pha.w
(1368) 0C00 20FFFF      ; 	jsr _idiv
(1369) 0C03 C204        ; 	adj #4
(1370) 0C05 1B          ; 	swp a
(1371) 0C06 AB48        ; 	pha.w
(1372) 0C08 A900        ; 	lda #0
(1373) 0C0A CB4401      ; 	xma.w 1,S
(1374) 0C0D CBD501      ; 	cmp.w 1,S
(1375) 0C10 C202        ; 	adj #2
(1376) 0C12 08          ; 	php
(1377) 0C13 A901        ; 	lda #1
(1378) 0C15 28          ; 	plp
(1379) 0C16 F002        ; 	beq L_083
(1380) 0C18 A900        ; 	lda #0
(1381)                  ; L_083
(1382)                  ; ;  262:            AND (foodunits[newrow, newcol] > 1) THEN BEGIN
(1383) 0C1A AB48        ; 	pha.w
(1384) 0C1C ABE29F15    ; 	psh.w #foodunits_003
(1385) 0C20 ABB5FF      ; 	lda.w newrow_063,X
(1386) 0C23 AB3A        ; 	dec.w a
(1387) 0C25 AB48        ; 	pha.w
(1388) 0C27 ABE21200    ; 	psh.w #18
(1389) 0C2B 20FFFF      ; 	jsr _imul
(1390) 0C2E C204        ; 	adj #4
(1391) 0C30 18          ; 	clc
(1392) 0C31 CB7501      ; 	adc.w 1,S
(1393) 0C34 CB9501      ; 	sta.w 1,S
(1394) 0C37 ABB5FD      ; 	lda.w newcol_064,X
(1395) 0C3A AB3A        ; 	dec.w a
(1396) 0C3C AB0A        ; 	asl.w a
(1397) 0C3E 18          ; 	clc
(1398) 0C3F CB7501      ; 	adc.w 1,S
(1399) 0C42 CB9501      ; 	sta.w 1,S
(1400) 0C45 6B          ; 	pli
(1401) 0C46 ABA300      ; 	lda.w 0,I++
(1402) 0C49 AB48        ; 	pha.w
(1403) 0C4B A901        ; 	lda #1
(1404) 0C4D CB4401      ; 	xma.w 1,S
(1405) 0C50 CBD501      ; 	cmp.w 1,S
(1406) 0C53 C202        ; 	adj #2
(1407) 0C55 08          ; 	php
(1408) 0C56 A901        ; 	lda #1
(1409) 0C58 28          ; 	plp
(1410) 0C59 AB1002      ; 	bgt L_084
(1411) 0C5C A900        ; 	lda #0
(1412)                  ; L_084
(1413) 0C5E CB3501      ; 	and.w 1,S
(1414) 0C61 C202        ; 	adj #2
(1415) 0C63 ABC90100    ; 	cmp.w #1
(1416) 0C67 F003        ; 	beq L_081
(1417) 0C69 4CEF0D      ; 	jmp L_082
(1418)                  ; L_081
(1419)                  ; ;  263:         foodunits[newrow, newcol] :=
(1420) 0C6C ABE29F15    ; 	psh.w #foodunits_003
(1421) 0C70 ABB5FF      ; 	lda.w newrow_063,X
(1422) 0C73 AB3A        ; 	dec.w a
(1423) 0C75 AB48        ; 	pha.w
(1424) 0C77 ABE21200    ; 	psh.w #18
(1425) 0C7B 20FFFF      ; 	jsr _imul
(1426) 0C7E C204        ; 	adj #4
(1427) 0C80 18          ; 	clc
(1428) 0C81 CB7501      ; 	adc.w 1,S
(1429) 0C84 CB9501      ; 	sta.w 1,S
(1430) 0C87 ABB5FD      ; 	lda.w newcol_064,X
(1431) 0C8A AB3A        ; 	dec.w a
(1432) 0C8C AB0A        ; 	asl.w a
(1433) 0C8E 18          ; 	clc
(1434) 0C8F CB7501      ; 	adc.w 1,S
(1435) 0C92 CB9501      ; 	sta.w 1,S
(1436)                  ; ;  264:             foodunits[newrow, newcol] DIV 2;
(1437) 0C95 ABE29F15    ; 	psh.w #foodunits_003
(1438) 0C99 ABB5FF      ; 	lda.w newrow_063,X
(1439) 0C9C AB3A        ; 	dec.w a
(1440) 0C9E AB48        ; 	pha.w
(1441) 0CA0 ABE21200    ; 	psh.w #18
(1442) 0CA4 20FFFF      ; 	jsr _imul
(1443) 0CA7 C204        ; 	adj #4
(1444) 0CA9 18          ; 	clc
(1445) 0CAA CB7501      ; 	adc.w 1,S
(1446) 0CAD CB9501      ; 	sta.w 1,S
(1447) 0CB0 ABB5FD      ; 	lda.w newcol_064,X
(1448) 0CB3 AB3A        ; 	dec.w a
(1449) 0CB5 AB0A        ; 	asl.w a
(1450) 0CB7 18          ; 	clc
(1451) 0CB8 CB7501      ; 	adc.w 1,S
(1452) 0CBB CB9501      ; 	sta.w 1,S
(1453) 0CBE 6B          ; 	pli
(1454) 0CBF ABA300      ; 	lda.w 0,I++
(1455) 0CC2 AB48        ; 	pha.w
(1456) 0CC4 ABE20200    ; 	psh.w #2
(1457)                  ; 	pha.w
(1458) 0CC8 20FFFF      ; 	jsr _idiv
(1459) 0CCB C204        ; 	adj #4
(1460) 0CCD 6B          ; 	pli
(1461) 0CCE AB8300      ; 	sta.w 0,I++
(1462)                  ; ;  265: 
(1463)                  ; ;  266:         {If moved, then leave behind an offspring.}
(1464)                  ; ;  267:         IF moved THEN BEGIN
(1465) 0CD1 ABB5FB      ; 	lda.w moved_065,X
(1466) 0CD4 ABC90100    ; 	cmp.w #1
(1467) 0CD8 F003        ; 	beq L_085
(1468) 0CDA 4CEF0D      ; 	jmp L_086
(1469)                  ; L_085
(1470)                  ; ;  268:             island[oldrow, oldcol] := newwolf;
(1471) 0CDD ABE2AD14    ; 	psh.w #island_002
(1472) 0CE1 ABB509      ; 	lda.w oldrow_061,X
(1473) 0CE4 AB48        ; 	pha.w
(1474) 0CE6 ABE21600    ; 	psh.w #22
(1475) 0CEA 20FFFF      ; 	jsr _imul
(1476) 0CED C204        ; 	adj #4
(1477) 0CEF 18          ; 	clc
(1478) 0CF0 CB7501      ; 	adc.w 1,S
(1479) 0CF3 CB9501      ; 	sta.w 1,S
(1480) 0CF6 ABB507      ; 	lda.w oldcol_062,X
(1481) 0CF9 AB0A        ; 	asl.w a
(1482) 0CFB 18          ; 	clc
(1483) 0CFC CB7501      ; 	adc.w 1,S
(1484) 0CFF CB9501      ; 	sta.w 1,S
(1485) 0D02 A902        ; 	lda #2
(1486) 0D04 6B          ; 	pli
(1487) 0D05 AB8300      ; 	sta.w 0,I++
(1488)                  ; ;  269:             foodunits[oldrow, oldcol] :=
(1489) 0D08 ABE29F15    ; 	psh.w #foodunits_003
(1490) 0D0C ABB509      ; 	lda.w oldrow_061,X
(1491) 0D0F AB3A        ; 	dec.w a
(1492) 0D11 AB48        ; 	pha.w
(1493) 0D13 ABE21200    ; 	psh.w #18
(1494) 0D17 20FFFF      ; 	jsr _imul
(1495) 0D1A C204        ; 	adj #4
(1496) 0D1C 18          ; 	clc
(1497) 0D1D CB7501      ; 	adc.w 1,S
(1498) 0D20 CB9501      ; 	sta.w 1,S
(1499) 0D23 ABB507      ; 	lda.w oldcol_062,X
(1500) 0D26 AB3A        ; 	dec.w a
(1501) 0D28 AB0A        ; 	asl.w a
(1502) 0D2A 18          ; 	clc
(1503) 0D2B CB7501      ; 	adc.w 1,S
(1504) 0D2E CB9501      ; 	sta.w 1,S
(1505)                  ; ;  270:             foodunits[newrow, newcol];
(1506) 0D31 ABE29F15    ; 	psh.w #foodunits_003
(1507) 0D35 ABB5FF      ; 	lda.w newrow_063,X
(1508) 0D38 AB3A        ; 	dec.w a
(1509) 0D3A AB48        ; 	pha.w
(1510) 0D3C ABE21200    ; 	psh.w #18
(1511) 0D40 20FFFF      ; 	jsr _imul
(1512) 0D43 C204        ; 	adj #4
(1513) 0D45 18          ; 	clc
(1514) 0D46 CB7501      ; 	adc.w 1,S
(1515) 0D49 CB9501      ; 	sta.w 1,S
(1516) 0D4C ABB5FD      ; 	lda.w newcol_064,X
(1517) 0D4F AB3A        ; 	dec.w a
(1518) 0D51 AB0A        ; 	asl.w a
(1519) 0D53 18          ; 	clc
(1520) 0D54 CB7501      ; 	adc.w 1,S
(1521) 0D57 CB9501      ; 	sta.w 1,S
(1522) 0D5A 6B          ; 	pli
(1523) 0D5B ABA300      ; 	lda.w 0,I++
(1524) 0D5E 6B          ; 	pli
(1525) 0D5F AB8300      ; 	sta.w 0,I++
(1526)                  ; ;  271:             numwolves := numwolves + 1;
(1527) 0D62 ABADA516    ; 	lda.w numwolves_005
(1528) 0D66 AB48        ; 	pha.w
(1529) 0D68 A901        ; 	lda #1
(1530) 0D6A 18          ; 	clc
(1531) 0D6B CB7501      ; 	adc.w 1,S
(1532) 0D6E C202        ; 	adj #2
(1533) 0D70 AB8DA516    ; 	sta.w numwolves_005
(1534)                  ; ;  272:             writeln('t =', t:4, ' : Wolf born at ',
(1535) 0D74 ABE2A914    ; 	psh.w #S_069
(1536) 0D78 ABE20000    ; 	psh.w #0
(1537) 0D7C ABE20300    ; 	psh.w #3
(1538) 0D80 20FFFF      ; 	jsr _swrite
(1539) 0D83 C206        ; 	adj #6
(1540) 0D85 ABADAB16    ; 	lda.w t_008
(1541) 0D89 AB48        ; 	pha.w
(1542) 0D8B ABE20400    ; 	psh.w #4
(1543)                  ; 	pha.w
(1544) 0D8F 20FFFF      ; 	jsr _iwrite
(1545) 0D92 C204        ; 	adj #4
(1546) 0D94 ABE27414    ; 	psh.w #S_087
(1547) 0D98 ABE20000    ; 	psh.w #0
(1548) 0D9C ABE21000    ; 	psh.w #16
(1549) 0DA0 20FFFF      ; 	jsr _swrite
(1550) 0DA3 C206        ; 	adj #6
(1551)                  ; ;  273:                 '[', oldrow:1, ', ', oldcol:1, ']');
(1552) 0DA5 ABE25B00    ; 	psh.w #91
(1553)                  ; 	pha.w
(1554) 0DA9 ABE20000    ; 	psh.w #0
(1555) 0DAD 20FFFF      ; 	jsr _cwrite
(1556) 0DB0 C204        ; 	adj #4
(1557) 0DB2 ABB509      ; 	lda.w oldrow_061,X
(1558) 0DB5 AB48        ; 	pha.w
(1559) 0DB7 ABE20100    ; 	psh.w #1
(1560)                  ; 	pha.w
(1561) 0DBB 20FFFF      ; 	jsr _iwrite
(1562) 0DBE C204        ; 	adj #4
(1563) 0DC0 ABE29714    ; 	psh.w #S_071
(1564) 0DC4 ABE20000    ; 	psh.w #0
(1565) 0DC8 ABE20200    ; 	psh.w #2
(1566) 0DCC 20FFFF      ; 	jsr _swrite
(1567) 0DCF C206        ; 	adj #6
(1568) 0DD1 ABB507      ; 	lda.w oldcol_062,X
(1569) 0DD4 AB48        ; 	pha.w
(1570) 0DD6 ABE20100    ; 	psh.w #1
(1571)                  ; 	pha.w
(1572) 0DDA 20FFFF      ; 	jsr _iwrite
(1573) 0DDD C204        ; 	adj #4
(1574) 0DDF ABE25D00    ; 	psh.w #93
(1575)                  ; 	pha.w
(1576) 0DE3 ABE20000    ; 	psh.w #0
(1577) 0DE7 20FFFF      ; 	jsr _cwrite
(1578) 0DEA C204        ; 	adj #4
(1579) 0DEC 20FFFF      ; 	jsr _writeln
(1580)                  ; ;  274:         END;
(1581)                  ; L_086
(1582)                  ; ;  275:         END;
(1583)                  ; L_082
(1584)                  ; ;  276:     END;
(1585)                  ; L_072
(1586)                  ; ;  277:     END {ProcessWolf};
(1587) 0DEF AB9A        ; 	txs.w
(1588) 0DF1 ABFA        ; 	plx.w
(1589) 0DF3 60          ; 	rts
(1590)                  ; 	.end processwolf_060
(1591)                  ; ;  278: 
(1592)                  ; ;  279: 
(1593)                  ; ;  280: PROCEDURE ProcessRabbit (oldrow, oldcol : index);
(1594)                  ; ;  281: 
(1595)                  ; ;  282:     {Process the rabbit located at island[oldrow, oldcol].}
(1596)                  ; ;  283: 
(1597)                  ; ;  284:     VAR
(1598)                  ; ;  285:     newrow, newcol : index;     {new row and column}
(1599)                  ; ;  286:     moved : boolean;            {true iff rabbit moved}
(1600)                  ; ;  287: 
(1601)                  ; ;  288:     BEGIN
(1602)                  ; oldrow_089 .equ +9
(1603)                  ; oldcol_090 .equ +7
(1604)                  ; newrow_091 .equ -1
(1605)                  ; newcol_092 .equ -3
(1606)                  ; moved_093 .equ -5
(1607)                  ; processrabbit_088 .sub
(1608) 0DF4 ABDA        ; 	phx.w
(1609) 0DF6 ABBA        ; 	tsx.w
(1610) 0DF8 C2FA        ; 	adj #-6
(1611)                  ; ;  289: 
(1612)                  ; ;  290:     {Move to adjacent location, or stay put.}
(1613)                  ; ;  291:     NewLocation(rabbit, oldrow, oldcol, newrow, newcol);
(1614) 0DFA ABE20100    ; 	psh.w #1
(1615)                  ; 	pha.w
(1616) 0DFE ABB509      ; 	lda.w oldrow_089,X
(1617) 0E01 AB48        ; 	pha.w
(1618) 0E03 ABB507      ; 	lda.w oldcol_090,X
(1619) 0E06 AB48        ; 	pha.w
(1620) 0E08 AB8A        ; 	txa.w
(1621) 0E0A 18          ; 	clc
(1622) 0E0B AB69FFFF    ; 	adc.w #newrow_091
(1623) 0E0F AB48        ; 	pha.w
(1624) 0E11 AB8A        ; 	txa.w
(1625) 0E13 18          ; 	clc
(1626) 0E14 AB69FDFF    ; 	adc.w #newcol_092
(1627) 0E18 AB48        ; 	pha.w
(1628) 0E1A ABB505      ; 	lda.w STATIC_LINK,X
(1629) 0E1D AB48        ; 	pha.w
(1630) 0E1F 20FA05      ; 	jsr newlocation_037
(1631) 0E22 C20C        ; 	adj #12
(1632)                  ; ;  292:     moved := (newrow <> oldrow) OR (newcol <> oldcol);
(1633) 0E24 ABB5FF      ; 	lda.w newrow_091,X
(1634) 0E27 AB48        ; 	pha.w
(1635) 0E29 ABB509      ; 	lda.w oldrow_089,X
(1636) 0E2C CB4401      ; 	xma.w 1,S
(1637) 0E2F CBD501      ; 	cmp.w 1,S
(1638) 0E32 C202        ; 	adj #2
(1639) 0E34 08          ; 	php
(1640) 0E35 A901        ; 	lda #1
(1641) 0E37 28          ; 	plp
(1642) 0E38 D002        ; 	bne L_094
(1643) 0E3A A900        ; 	lda #0
(1644)                  ; L_094
(1645) 0E3C AB48        ; 	pha.w
(1646) 0E3E ABB5FD      ; 	lda.w newcol_092,X
(1647) 0E41 AB48        ; 	pha.w
(1648) 0E43 ABB507      ; 	lda.w oldcol_090,X
(1649) 0E46 CB4401      ; 	xma.w 1,S
(1650) 0E49 CBD501      ; 	cmp.w 1,S
(1651) 0E4C C202        ; 	adj #2
(1652) 0E4E 08          ; 	php
(1653) 0E4F A901        ; 	lda #1
(1654) 0E51 28          ; 	plp
(1655) 0E52 D002        ; 	bne L_095
(1656) 0E54 A900        ; 	lda #0
(1657)                  ; L_095
(1658) 0E56 CB1501      ; 	ora.w 1,S
(1659) 0E59 C202        ; 	adj #2
(1660) 0E5B AB95FB      ; 	sta.w moved_093,X
(1661)                  ; ;  293:     IF moved THEN BEGIN
(1662) 0E5E ABB5FB      ; 	lda.w moved_093,X
(1663) 0E61 ABC90100    ; 	cmp.w #1
(1664) 0E65 F003        ; 	beq L_096
(1665) 0E67 4CC00E      ; 	jmp L_097
(1666)                  ; L_096
(1667)                  ; ;  294:         island[newrow, newcol] := newrabbit;
(1668) 0E6A ABE2AD14    ; 	psh.w #island_002
(1669) 0E6E ABB5FF      ; 	lda.w newrow_091,X
(1670) 0E71 AB48        ; 	pha.w
(1671) 0E73 ABE21600    ; 	psh.w #22
(1672) 0E77 20FFFF      ; 	jsr _imul
(1673) 0E7A C204        ; 	adj #4
(1674) 0E7C 18          ; 	clc
(1675) 0E7D CB7501      ; 	adc.w 1,S
(1676) 0E80 CB9501      ; 	sta.w 1,S
(1677) 0E83 ABB5FD      ; 	lda.w newcol_092,X
(1678) 0E86 AB0A        ; 	asl.w a
(1679) 0E88 18          ; 	clc
(1680) 0E89 CB7501      ; 	adc.w 1,S
(1681) 0E8C CB9501      ; 	sta.w 1,S
(1682) 0E8F A903        ; 	lda #3
(1683) 0E91 6B          ; 	pli
(1684) 0E92 AB8300      ; 	sta.w 0,I++
(1685)                  ; ;  295:         island[oldrow, oldcol] := empty;
(1686) 0E95 ABE2AD14    ; 	psh.w #island_002
(1687) 0E99 ABB509      ; 	lda.w oldrow_089,X
(1688) 0E9C AB48        ; 	pha.w
(1689) 0E9E ABE21600    ; 	psh.w #22
(1690) 0EA2 20FFFF      ; 	jsr _imul
(1691) 0EA5 C204        ; 	adj #4
(1692) 0EA7 18          ; 	clc
(1693) 0EA8 CB7501      ; 	adc.w 1,S
(1694) 0EAB CB9501      ; 	sta.w 1,S
(1695) 0EAE ABB507      ; 	lda.w oldcol_090,X
(1696) 0EB1 AB0A        ; 	asl.w a
(1697) 0EB3 18          ; 	clc
(1698) 0EB4 CB7501      ; 	adc.w 1,S
(1699) 0EB7 CB9501      ; 	sta.w 1,S
(1700) 0EBA A904        ; 	lda #4
(1701) 0EBC 6B          ; 	pli
(1702) 0EBD AB8300      ; 	sta.w 0,I++
(1703)                  ; ;  296:     END;
(1704)                  ; L_097
(1705)                  ; ;  297: 
(1706)                  ; ;  298:     {Rabbit reproduction time?}
(1707)                  ; ;  299:     IF (t MOD rabbitreprotime) = 0 THEN BEGIN
(1708) 0EC0 ABADAB16    ; 	lda.w t_008
(1709) 0EC4 AB48        ; 	pha.w
(1710) 0EC6 ABE20500    ; 	psh.w #5
(1711)                  ; 	pha.w
(1712) 0ECA 20FFFF      ; 	jsr _idiv
(1713) 0ECD C204        ; 	adj #4
(1714) 0ECF 1B          ; 	swp a
(1715) 0ED0 AB48        ; 	pha.w
(1716) 0ED2 A900        ; 	lda #0
(1717) 0ED4 CB4401      ; 	xma.w 1,S
(1718) 0ED7 CBD501      ; 	cmp.w 1,S
(1719) 0EDA C202        ; 	adj #2
(1720) 0EDC 08          ; 	php
(1721) 0EDD A901        ; 	lda #1
(1722) 0EDF 28          ; 	plp
(1723) 0EE0 F002        ; 	beq L_100
(1724) 0EE2 A900        ; 	lda #0
(1725)                  ; L_100
(1726) 0EE4 ABC90100    ; 	cmp.w #1
(1727) 0EE8 F003        ; 	beq L_098
(1728) 0EEA 4CB10F      ; 	jmp L_099
(1729)                  ; L_098
(1730)                  ; ;  300: 
(1731)                  ; ;  301:         {If moved, then leave behind an offspring.}
(1732)                  ; ;  302:         IF moved THEN BEGIN
(1733) 0EED ABB5FB      ; 	lda.w moved_093,X
(1734) 0EF0 ABC90100    ; 	cmp.w #1
(1735) 0EF4 F003        ; 	beq L_101
(1736) 0EF6 4CB10F      ; 	jmp L_102
(1737)                  ; L_101
(1738)                  ; ;  303:         island[oldrow, oldcol] := newrabbit;
(1739) 0EF9 ABE2AD14    ; 	psh.w #island_002
(1740) 0EFD ABB509      ; 	lda.w oldrow_089,X
(1741) 0F00 AB48        ; 	pha.w
(1742) 0F02 ABE21600    ; 	psh.w #22
(1743) 0F06 20FFFF      ; 	jsr _imul
(1744) 0F09 C204        ; 	adj #4
(1745) 0F0B 18          ; 	clc
(1746) 0F0C CB7501      ; 	adc.w 1,S
(1747) 0F0F CB9501      ; 	sta.w 1,S
(1748) 0F12 ABB507      ; 	lda.w oldcol_090,X
(1749) 0F15 AB0A        ; 	asl.w a
(1750) 0F17 18          ; 	clc
(1751) 0F18 CB7501      ; 	adc.w 1,S
(1752) 0F1B CB9501      ; 	sta.w 1,S
(1753) 0F1E A903        ; 	lda #3
(1754) 0F20 6B          ; 	pli
(1755) 0F21 AB8300      ; 	sta.w 0,I++
(1756)                  ; ;  304:         numrabbits := numrabbits + 1;
(1757) 0F24 ABADA716    ; 	lda.w numrabbits_006
(1758) 0F28 AB48        ; 	pha.w
(1759) 0F2A A901        ; 	lda #1
(1760) 0F2C 18          ; 	clc
(1761) 0F2D CB7501      ; 	adc.w 1,S
(1762) 0F30 C202        ; 	adj #2
(1763) 0F32 AB8DA716    ; 	sta.w numrabbits_006
(1764)                  ; ;  305:         writeln('t =', t:4, ' : Rabbit born at ',
(1765) 0F36 ABE2A914    ; 	psh.w #S_069
(1766) 0F3A ABE20000    ; 	psh.w #0
(1767) 0F3E ABE20300    ; 	psh.w #3
(1768) 0F42 20FFFF      ; 	jsr _swrite
(1769) 0F45 C206        ; 	adj #6
(1770) 0F47 ABADAB16    ; 	lda.w t_008
(1771) 0F4B AB48        ; 	pha.w
(1772) 0F4D ABE20400    ; 	psh.w #4
(1773)                  ; 	pha.w
(1774) 0F51 20FFFF      ; 	jsr _iwrite
(1775) 0F54 C204        ; 	adj #4
(1776) 0F56 ABE26214    ; 	psh.w #S_103
(1777) 0F5A ABE20000    ; 	psh.w #0
(1778) 0F5E ABE21200    ; 	psh.w #18
(1779) 0F62 20FFFF      ; 	jsr _swrite
(1780) 0F65 C206        ; 	adj #6
(1781)                  ; ;  306:             '[', oldrow:1, ', ', oldcol:1, ']');
(1782) 0F67 ABE25B00    ; 	psh.w #91
(1783)                  ; 	pha.w
(1784) 0F6B ABE20000    ; 	psh.w #0
(1785) 0F6F 20FFFF      ; 	jsr _cwrite
(1786) 0F72 C204        ; 	adj #4
(1787) 0F74 ABB509      ; 	lda.w oldrow_089,X
(1788) 0F77 AB48        ; 	pha.w
(1789) 0F79 ABE20100    ; 	psh.w #1
(1790)                  ; 	pha.w
(1791) 0F7D 20FFFF      ; 	jsr _iwrite
(1792) 0F80 C204        ; 	adj #4
(1793) 0F82 ABE29714    ; 	psh.w #S_071
(1794) 0F86 ABE20000    ; 	psh.w #0
(1795) 0F8A ABE20200    ; 	psh.w #2
(1796) 0F8E 20FFFF      ; 	jsr _swrite
(1797) 0F91 C206        ; 	adj #6
(1798) 0F93 ABB507      ; 	lda.w oldcol_090,X
(1799) 0F96 AB48        ; 	pha.w
(1800) 0F98 ABE20100    ; 	psh.w #1
(1801)                  ; 	pha.w
(1802) 0F9C 20FFFF      ; 	jsr _iwrite
(1803) 0F9F C204        ; 	adj #4
(1804) 0FA1 ABE25D00    ; 	psh.w #93
(1805)                  ; 	pha.w
(1806) 0FA5 ABE20000    ; 	psh.w #0
(1807) 0FA9 20FFFF      ; 	jsr _cwrite
(1808) 0FAC C204        ; 	adj #4
(1809) 0FAE 20FFFF      ; 	jsr _writeln
(1810)                  ; ;  307:         END;
(1811)                  ; L_102
(1812)                  ; ;  308:     END;
(1813)                  ; L_099
(1814)                  ; ;  309:     END {ProcessRabbit};
(1815) 0FB1 AB9A        ; 	txs.w
(1816) 0FB3 ABFA        ; 	plx.w
(1817) 0FB5 60          ; 	rts
(1818)                  ; 	.end processrabbit_088
(1819)                  ; ;  310: 
(1820)                  ; ;  311: 
(1821)                  ; ;  312: PROCEDURE EventsOccur;
(1822)                  ; ;  313: 
(1823)                  ; ;  314:     {Perform the events that occur for each time unit.}
(1824)                  ; ;  315: 
(1825)                  ; ;  316:     VAR
(1826)                  ; ;  317:     row, col : index;
(1827)                  ; ;  318: 
(1828)                  ; ;  319:     BEGIN
(1829)                  ; row_105 .equ -1
(1830)                  ; col_106 .equ -3
(1831)                  ; eventsoccur_104 .sub
(1832) 0FB6 ABDA        ; 	phx.w
(1833) 0FB8 ABBA        ; 	tsx.w
(1834) 0FBA C2FC        ; 	adj #-4
(1835)                  ; ;  320: 
(1836)                  ; ;  321:     {Scan for wolves and process each one in turn.}
(1837)                  ; ;  322:     FOR row := 1 TO size DO BEGIN
(1838) 0FBC A901        ; 	lda #1
(1839) 0FBE AB95FF      ; 	sta.w row_105,X
(1840)                  ; L_107
(1841) 0FC1 A909        ; 	lda #9
(1842) 0FC3 ABD5FF      ; 	cmp.w row_105,X
(1843) 0FC6 AB5003      ; 	bge L_108
(1844) 0FC9 4C4510      ; 	jmp L_109
(1845)                  ; L_108
(1846)                  ; ;  323:         FOR col := 1 TO size DO BEGIN
(1847) 0FCC A901        ; 	lda #1
(1848) 0FCE AB95FD      ; 	sta.w col_106,X
(1849)                  ; L_110
(1850) 0FD1 A909        ; 	lda #9
(1851) 0FD3 ABD5FD      ; 	cmp.w col_106,X
(1852) 0FD6 AB5003      ; 	bge L_111
(1853) 0FD9 4C3C10      ; 	jmp L_112
(1854)                  ; L_111
(1855)                  ; ;  324:         IF island[row, col] = wolf THEN BEGIN
(1856) 0FDC ABE2AD14    ; 	psh.w #island_002
(1857) 0FE0 ABB5FF      ; 	lda.w row_105,X
(1858) 0FE3 AB48        ; 	pha.w
(1859) 0FE5 ABE21600    ; 	psh.w #22
(1860) 0FE9 20FFFF      ; 	jsr _imul
(1861) 0FEC C204        ; 	adj #4
(1862) 0FEE 18          ; 	clc
(1863) 0FEF CB7501      ; 	adc.w 1,S
(1864) 0FF2 CB9501      ; 	sta.w 1,S
(1865) 0FF5 ABB5FD      ; 	lda.w col_106,X
(1866) 0FF8 AB0A        ; 	asl.w a
(1867) 0FFA 18          ; 	clc
(1868) 0FFB CB7501      ; 	adc.w 1,S
(1869) 0FFE CB9501      ; 	sta.w 1,S
(1870) 1001 6B          ; 	pli
(1871) 1002 ABA300      ; 	lda.w 0,I++
(1872) 1005 AB48        ; 	pha.w
(1873) 1007 A900        ; 	lda #0
(1874) 1009 CB4401      ; 	xma.w 1,S
(1875) 100C CBD501      ; 	cmp.w 1,S
(1876) 100F C202        ; 	adj #2
(1877) 1011 08          ; 	php
(1878) 1012 A901        ; 	lda #1
(1879) 1014 28          ; 	plp
(1880) 1015 F002        ; 	beq L_115
(1881) 1017 A900        ; 	lda #0
(1882)                  ; L_115
(1883) 1019 ABC90100    ; 	cmp.w #1
(1884) 101D F003        ; 	beq L_113
(1885) 101F 4C3610      ; 	jmp L_114
(1886)                  ; L_113
(1887)                  ; ;  325:             ProcessWolf(row, col);
(1888) 1022 ABB5FF      ; 	lda.w row_105,X
(1889) 1025 AB48        ; 	pha.w
(1890) 1027 ABB5FD      ; 	lda.w col_106,X
(1891) 102A AB48        ; 	pha.w
(1892) 102C ABB505      ; 	lda.w STATIC_LINK,X
(1893) 102F AB48        ; 	pha.w
(1894) 1031 20F807      ; 	jsr processwolf_060
(1895) 1034 C206        ; 	adj #6
(1896)                  ; ;  326:         END;
(1897)                  ; L_114
(1898)                  ; ;  327:         END;
(1899) 1036 ABF6FD      ; 	inc.w col_106,X
(1900) 1039 4CD10F      ; 	jmp L_110
(1901)                  ; L_112
(1902) 103C ABD6FD      ; 	dec.w col_106,X
(1903)                  ; ;  328:     END;
(1904) 103F ABF6FF      ; 	inc.w row_105,X
(1905) 1042 4CC10F      ; 	jmp L_107
(1906)                  ; L_109
(1907) 1045 ABD6FF      ; 	dec.w row_105,X
(1908)                  ; ;  329: 
(1909)                  ; ;  330: 
(1910)                  ; ;  331:     {Scan for rabbits and process each one in turn.}
(1911)                  ; ;  332:     FOR row := 1 TO size DO BEGIN
(1912) 1048 A901        ; 	lda #1
(1913) 104A AB95FF      ; 	sta.w row_105,X
(1914)                  ; L_116
(1915) 104D A909        ; 	lda #9
(1916) 104F ABD5FF      ; 	cmp.w row_105,X
(1917) 1052 AB5003      ; 	bge L_117
(1918) 1055 4CD110      ; 	jmp L_118
(1919)                  ; L_117
(1920)                  ; ;  333:         FOR col := 1 TO size DO BEGIN
(1921) 1058 A901        ; 	lda #1
(1922) 105A AB95FD      ; 	sta.w col_106,X
(1923)                  ; L_119
(1924) 105D A909        ; 	lda #9
(1925) 105F ABD5FD      ; 	cmp.w col_106,X
(1926) 1062 AB5003      ; 	bge L_120
(1927) 1065 4CC810      ; 	jmp L_121
(1928)                  ; L_120
(1929)                  ; ;  334:         IF island[row, col] = rabbit THEN BEGIN
(1930) 1068 ABE2AD14    ; 	psh.w #island_002
(1931) 106C ABB5FF      ; 	lda.w row_105,X
(1932) 106F AB48        ; 	pha.w
(1933) 1071 ABE21600    ; 	psh.w #22
(1934) 1075 20FFFF      ; 	jsr _imul
(1935) 1078 C204        ; 	adj #4
(1936) 107A 18          ; 	clc
(1937) 107B CB7501      ; 	adc.w 1,S
(1938) 107E CB9501      ; 	sta.w 1,S
(1939) 1081 ABB5FD      ; 	lda.w col_106,X
(1940) 1084 AB0A        ; 	asl.w a
(1941) 1086 18          ; 	clc
(1942) 1087 CB7501      ; 	adc.w 1,S
(1943) 108A CB9501      ; 	sta.w 1,S
(1944) 108D 6B          ; 	pli
(1945) 108E ABA300      ; 	lda.w 0,I++
(1946) 1091 AB48        ; 	pha.w
(1947) 1093 A901        ; 	lda #1
(1948) 1095 CB4401      ; 	xma.w 1,S
(1949) 1098 CBD501      ; 	cmp.w 1,S
(1950) 109B C202        ; 	adj #2
(1951) 109D 08          ; 	php
(1952) 109E A901        ; 	lda #1
(1953) 10A0 28          ; 	plp
(1954) 10A1 F002        ; 	beq L_124
(1955) 10A3 A900        ; 	lda #0
(1956)                  ; L_124
(1957) 10A5 ABC90100    ; 	cmp.w #1
(1958) 10A9 F003        ; 	beq L_122
(1959) 10AB 4CC210      ; 	jmp L_123
(1960)                  ; L_122
(1961)                  ; ;  335:             ProcessRabbit(row, col);
(1962) 10AE ABB5FF      ; 	lda.w row_105,X
(1963) 10B1 AB48        ; 	pha.w
(1964) 10B3 ABB5FD      ; 	lda.w col_106,X
(1965) 10B6 AB48        ; 	pha.w
(1966) 10B8 ABB505      ; 	lda.w STATIC_LINK,X
(1967) 10BB AB48        ; 	pha.w
(1968) 10BD 20F40D      ; 	jsr processrabbit_088
(1969) 10C0 C206        ; 	adj #6
(1970)                  ; ;  336:         END;
(1971)                  ; L_123
(1972)                  ; ;  337:         END;
(1973) 10C2 ABF6FD      ; 	inc.w col_106,X
(1974) 10C5 4C5D10      ; 	jmp L_119
(1975)                  ; L_121
(1976) 10C8 ABD6FD      ; 	dec.w col_106,X
(1977)                  ; ;  338:     END;
(1978) 10CB ABF6FF      ; 	inc.w row_105,X
(1979) 10CE 4C4D10      ; 	jmp L_116
(1980)                  ; L_118
(1981) 10D1 ABD6FF      ; 	dec.w row_105,X
(1982)                  ; ;  339:     END {EventsOccur};
(1983) 10D4 AB9A        ; 	txs.w
(1984) 10D6 ABFA        ; 	plx.w
(1985) 10D8 60          ; 	rts
(1986)                  ; 	.end eventsoccur_104
(1987)                  ; ;  340: 
(1988)                  ; ;  341: 
(1989)                  ; ;  342: PROCEDURE PrintIsland;
(1990)                  ; ;  343: 
(1991)                  ; ;  344:     {Print the island.}
(1992)                  ; ;  345: 
(1993)                  ; ;  346:     VAR
(1994)                  ; ;  347:     row, col : index;
(1995)                  ; ;  348:     cnts     : contents;
(1996)                  ; ;  349: 
(1997)                  ; ;  350:     BEGIN
(1998)                  ; row_126 .equ -1
(1999)                  ; col_127 .equ -3
(2000)                  ; cnts_128 .equ -5
(2001)                  ; printisland_125 .sub
(2002) 10D9 ABDA        ; 	phx.w
(2003) 10DB ABBA        ; 	tsx.w
(2004) 10DD C2FA        ; 	adj #-6
(2005)                  ; ;  351:     writeln;
(2006) 10DF 20FFFF      ; 	jsr _writeln
(2007)                  ; ;  352:     writeln('t =', t:4, ' : Wolf Island');
(2008) 10E2 ABE2A914    ; 	psh.w #S_069
(2009) 10E6 ABE20000    ; 	psh.w #0
(2010) 10EA ABE20300    ; 	psh.w #3
(2011) 10EE 20FFFF      ; 	jsr _swrite
(2012) 10F1 C206        ; 	adj #6
(2013) 10F3 ABADAB16    ; 	lda.w t_008
(2014) 10F7 AB48        ; 	pha.w
(2015) 10F9 ABE20400    ; 	psh.w #4
(2016)                  ; 	pha.w
(2017) 10FD 20FFFF      ; 	jsr _iwrite
(2018) 1100 C204        ; 	adj #4
(2019) 1102 ABE25414    ; 	psh.w #S_129
(2020) 1106 ABE20000    ; 	psh.w #0
(2021) 110A ABE20E00    ; 	psh.w #14
(2022) 110E 20FFFF      ; 	jsr _swrite
(2023) 1111 C206        ; 	adj #6
(2024) 1113 20FFFF      ; 	jsr _writeln
(2025)                  ; ;  353:     writeln;
(2026) 1116 20FFFF      ; 	jsr _writeln
(2027)                  ; ;  354: 
(2028)                  ; ;  355:     FOR row := 1 TO size DO BEGIN
(2029) 1119 A901        ; 	lda #1
(2030) 111B AB95FF      ; 	sta.w row_126,X
(2031)                  ; L_130
(2032) 111E A909        ; 	lda #9
(2033) 1120 ABD5FF      ; 	cmp.w row_126,X
(2034) 1123 AB5003      ; 	bge L_131
(2035) 1126 4C1D12      ; 	jmp L_132
(2036)                  ; L_131
(2037)                  ; ;  356:         write(' ':10);
(2038) 1129 ABE22000    ; 	psh.w #32
(2039)                  ; 	pha.w
(2040) 112D ABE20A00    ; 	psh.w #10
(2041)                  ; 	pha.w
(2042) 1131 20FFFF      ; 	jsr _cwrite
(2043) 1134 C204        ; 	adj #4
(2044)                  ; ;  357:         FOR col := 1 TO size DO BEGIN
(2045) 1136 A901        ; 	lda #1
(2046) 1138 AB95FD      ; 	sta.w col_127,X
(2047)                  ; L_133
(2048) 113B A909        ; 	lda #9
(2049) 113D ABD5FD      ; 	cmp.w col_127,X
(2050) 1140 AB5003      ; 	bge L_134
(2051) 1143 4C1112      ; 	jmp L_135
(2052)                  ; L_134
(2053)                  ; ;  358:         cnts := island[row, col];
(2054) 1146 ABE2AD14    ; 	psh.w #island_002
(2055) 114A ABB5FF      ; 	lda.w row_126,X
(2056) 114D AB48        ; 	pha.w
(2057) 114F ABE21600    ; 	psh.w #22
(2058) 1153 20FFFF      ; 	jsr _imul
(2059) 1156 C204        ; 	adj #4
(2060) 1158 18          ; 	clc
(2061) 1159 CB7501      ; 	adc.w 1,S
(2062) 115C CB9501      ; 	sta.w 1,S
(2063) 115F ABB5FD      ; 	lda.w col_127,X
(2064) 1162 AB0A        ; 	asl.w a
(2065) 1164 18          ; 	clc
(2066) 1165 CB7501      ; 	adc.w 1,S
(2067) 1168 CB9501      ; 	sta.w 1,S
(2068) 116B 6B          ; 	pli
(2069) 116C ABA300      ; 	lda.w 0,I++
(2070) 116F AB95FB      ; 	sta.w cnts_128,X
(2071)                  ; ;  359:         IF      cnts = empty  THEN write('. ')
(2072) 1172 ABB5FB      ; 	lda.w cnts_128,X
(2073) 1175 AB48        ; 	pha.w
(2074) 1177 A904        ; 	lda #4
(2075) 1179 CB4401      ; 	xma.w 1,S
(2076) 117C CBD501      ; 	cmp.w 1,S
(2077) 117F C202        ; 	adj #2
(2078) 1181 08          ; 	php
(2079) 1182 A901        ; 	lda #1
(2080) 1184 28          ; 	plp
(2081) 1185 F002        ; 	beq L_138
(2082) 1187 A900        ; 	lda #0
(2083)                  ; L_138
(2084) 1189 ABC90100    ; 	cmp.w #1
(2085) 118D F003        ; 	beq L_136
(2086) 118F 4CA611      ; 	jmp L_137
(2087)                  ; L_136
(2088) 1192 ABE25214    ; 	psh.w #S_139
(2089) 1196 ABE20000    ; 	psh.w #0
(2090) 119A ABE20200    ; 	psh.w #2
(2091) 119E 20FFFF      ; 	jsr _swrite
(2092) 11A1 C206        ; 	adj #6
(2093)                  ; ;  360:         ELSE IF cnts = wolf   THEN write('W ')
(2094) 11A3 4C0B12      ; 	jmp L_140
(2095)                  ; L_137
(2096) 11A6 ABB5FB      ; 	lda.w cnts_128,X
(2097) 11A9 AB48        ; 	pha.w
(2098) 11AB A900        ; 	lda #0
(2099) 11AD CB4401      ; 	xma.w 1,S
(2100) 11B0 CBD501      ; 	cmp.w 1,S
(2101) 11B3 C202        ; 	adj #2
(2102) 11B5 08          ; 	php
(2103) 11B6 A901        ; 	lda #1
(2104) 11B8 28          ; 	plp
(2105) 11B9 F002        ; 	beq L_143
(2106) 11BB A900        ; 	lda #0
(2107)                  ; L_143
(2108) 11BD ABC90100    ; 	cmp.w #1
(2109) 11C1 F003        ; 	beq L_141
(2110) 11C3 4CDA11      ; 	jmp L_142
(2111)                  ; L_141
(2112) 11C6 ABE25014    ; 	psh.w #S_144
(2113) 11CA ABE20000    ; 	psh.w #0
(2114) 11CE ABE20200    ; 	psh.w #2
(2115) 11D2 20FFFF      ; 	jsr _swrite
(2116) 11D5 C206        ; 	adj #6
(2117)                  ; ;  361:         ELSE IF cnts = rabbit THEN write('r ')
(2118) 11D7 4C0B12      ; 	jmp L_145
(2119)                  ; L_142
(2120) 11DA ABB5FB      ; 	lda.w cnts_128,X
(2121) 11DD AB48        ; 	pha.w
(2122) 11DF A901        ; 	lda #1
(2123) 11E1 CB4401      ; 	xma.w 1,S
(2124) 11E4 CBD501      ; 	cmp.w 1,S
(2125) 11E7 C202        ; 	adj #2
(2126) 11E9 08          ; 	php
(2127) 11EA A901        ; 	lda #1
(2128) 11EC 28          ; 	plp
(2129) 11ED F002        ; 	beq L_148
(2130) 11EF A900        ; 	lda #0
(2131)                  ; L_148
(2132) 11F1 ABC90100    ; 	cmp.w #1
(2133) 11F5 F003        ; 	beq L_146
(2134) 11F7 4C0B12      ; 	jmp L_147
(2135)                  ; L_146
(2136) 11FA ABE24E14    ; 	psh.w #S_149
(2137) 11FE ABE20000    ; 	psh.w #0
(2138) 1202 ABE20200    ; 	psh.w #2
(2139) 1206 20FFFF      ; 	jsr _swrite
(2140) 1209 C206        ; 	adj #6
(2141)                  ; ;  362:         END;
(2142)                  ; L_147
(2143)                  ; L_145
(2144)                  ; L_140
(2145) 120B ABF6FD      ; 	inc.w col_127,X
(2146) 120E 4C3B11      ; 	jmp L_133
(2147)                  ; L_135
(2148) 1211 ABD6FD      ; 	dec.w col_127,X
(2149)                  ; ;  363:         writeln;
(2150) 1214 20FFFF      ; 	jsr _writeln
(2151)                  ; ;  364:     END;
(2152) 1217 ABF6FF      ; 	inc.w row_126,X
(2153) 121A 4C1E11      ; 	jmp L_130
(2154)                  ; L_132
(2155) 121D ABD6FF      ; 	dec.w row_126,X
(2156)                  ; ;  365:     END {PrintIsland};
(2157) 1220 AB9A        ; 	txs.w
(2158) 1222 ABFA        ; 	plx.w
(2159) 1224 60          ; 	rts
(2160)                  ; 	.end printisland_125
(2161)                  ; ;  366: 
(2162)                  ; ;  367: 
(2163)                  ; ;  368: PROCEDURE ResetIsland;
(2164)                  ; ;  369: 
(2165)                  ; ;  370:     {Reset the island by setting each newwolf to wolf
(2166)                  ; ;  371:      and each newrabbit to rabbit.}
(2167)                  ; ;  372: 
(2168)                  ; ;  373:     VAR
(2169)                  ; ;  374:     row, col : index;
(2170)                  ; ;  375: 
(2171)                  ; ;  376:     BEGIN
(2172)                  ; row_151 .equ -1
(2173)                  ; col_152 .equ -3
(2174)                  ; resetisland_150 .sub
(2175) 1225 ABDA        ; 	phx.w
(2176) 1227 ABBA        ; 	tsx.w
(2177) 1229 C2FC        ; 	adj #-4
(2178)                  ; ;  377:     FOR row := 1 TO size DO BEGIN
(2179) 122B A901        ; 	lda #1
(2180) 122D AB95FF      ; 	sta.w row_151,X
(2181)                  ; L_153
(2182) 1230 A909        ; 	lda #9
(2183) 1232 ABD5FF      ; 	cmp.w row_151,X
(2184) 1235 AB5003      ; 	bge L_154
(2185) 1238 4C3F13      ; 	jmp L_155
(2186)                  ; L_154
(2187)                  ; ;  378:         FOR col := 1 TO size DO BEGIN
(2188) 123B A901        ; 	lda #1
(2189) 123D AB95FD      ; 	sta.w col_152,X
(2190)                  ; L_156
(2191) 1240 A909        ; 	lda #9
(2192) 1242 ABD5FD      ; 	cmp.w col_152,X
(2193) 1245 AB5003      ; 	bge L_157
(2194) 1248 4C3613      ; 	jmp L_158
(2195)                  ; L_157
(2196)                  ; ;  379:         IF island[row, col] = newwolf THEN BEGIN
(2197) 124B ABE2AD14    ; 	psh.w #island_002
(2198) 124F ABB5FF      ; 	lda.w row_151,X
(2199) 1252 AB48        ; 	pha.w
(2200) 1254 ABE21600    ; 	psh.w #22
(2201) 1258 20FFFF      ; 	jsr _imul
(2202) 125B C204        ; 	adj #4
(2203) 125D 18          ; 	clc
(2204) 125E CB7501      ; 	adc.w 1,S
(2205) 1261 CB9501      ; 	sta.w 1,S
(2206) 1264 ABB5FD      ; 	lda.w col_152,X
(2207) 1267 AB0A        ; 	asl.w a
(2208) 1269 18          ; 	clc
(2209) 126A CB7501      ; 	adc.w 1,S
(2210) 126D CB9501      ; 	sta.w 1,S
(2211) 1270 6B          ; 	pli
(2212) 1271 ABA300      ; 	lda.w 0,I++
(2213) 1274 AB48        ; 	pha.w
(2214) 1276 A902        ; 	lda #2
(2215) 1278 CB4401      ; 	xma.w 1,S
(2216) 127B CBD501      ; 	cmp.w 1,S
(2217) 127E C202        ; 	adj #2
(2218) 1280 08          ; 	php
(2219) 1281 A901        ; 	lda #1
(2220) 1283 28          ; 	plp
(2221) 1284 F002        ; 	beq L_161
(2222) 1286 A900        ; 	lda #0
(2223)                  ; L_161
(2224) 1288 ABC90100    ; 	cmp.w #1
(2225) 128C F003        ; 	beq L_159
(2226) 128E 4CBF12      ; 	jmp L_160
(2227)                  ; L_159
(2228)                  ; ;  380:             island[row, col] := wolf;
(2229) 1291 ABE2AD14    ; 	psh.w #island_002
(2230) 1295 ABB5FF      ; 	lda.w row_151,X
(2231) 1298 AB48        ; 	pha.w
(2232) 129A ABE21600    ; 	psh.w #22
(2233) 129E 20FFFF      ; 	jsr _imul
(2234) 12A1 C204        ; 	adj #4
(2235) 12A3 18          ; 	clc
(2236) 12A4 CB7501      ; 	adc.w 1,S
(2237) 12A7 CB9501      ; 	sta.w 1,S
(2238) 12AA ABB5FD      ; 	lda.w col_152,X
(2239) 12AD AB0A        ; 	asl.w a
(2240) 12AF 18          ; 	clc
(2241) 12B0 CB7501      ; 	adc.w 1,S
(2242) 12B3 CB9501      ; 	sta.w 1,S
(2243) 12B6 A900        ; 	lda #0
(2244) 12B8 6B          ; 	pli
(2245) 12B9 AB8300      ; 	sta.w 0,I++
(2246)                  ; ;  381:         END
(2247)                  ; ;  382:         ELSE IF island[row, col] = newrabbit THEN BEGIN
(2248) 12BC 4C3013      ; 	jmp L_162
(2249)                  ; L_160
(2250) 12BF ABE2AD14    ; 	psh.w #island_002
(2251) 12C3 ABB5FF      ; 	lda.w row_151,X
(2252) 12C6 AB48        ; 	pha.w
(2253) 12C8 ABE21600    ; 	psh.w #22
(2254) 12CC 20FFFF      ; 	jsr _imul
(2255) 12CF C204        ; 	adj #4
(2256) 12D1 18          ; 	clc
(2257) 12D2 CB7501      ; 	adc.w 1,S
(2258) 12D5 CB9501      ; 	sta.w 1,S
(2259) 12D8 ABB5FD      ; 	lda.w col_152,X
(2260) 12DB AB0A        ; 	asl.w a
(2261) 12DD 18          ; 	clc
(2262) 12DE CB7501      ; 	adc.w 1,S
(2263) 12E1 CB9501      ; 	sta.w 1,S
(2264) 12E4 6B          ; 	pli
(2265) 12E5 ABA300      ; 	lda.w 0,I++
(2266) 12E8 AB48        ; 	pha.w
(2267) 12EA A903        ; 	lda #3
(2268) 12EC CB4401      ; 	xma.w 1,S
(2269) 12EF CBD501      ; 	cmp.w 1,S
(2270) 12F2 C202        ; 	adj #2
(2271) 12F4 08          ; 	php
(2272) 12F5 A901        ; 	lda #1
(2273) 12F7 28          ; 	plp
(2274) 12F8 F002        ; 	beq L_165
(2275) 12FA A900        ; 	lda #0
(2276)                  ; L_165
(2277) 12FC ABC90100    ; 	cmp.w #1
(2278) 1300 F003        ; 	beq L_163
(2279) 1302 4C3013      ; 	jmp L_164
(2280)                  ; L_163
(2281)                  ; ;  383:             island[row, col] := rabbit;
(2282) 1305 ABE2AD14    ; 	psh.w #island_002
(2283) 1309 ABB5FF      ; 	lda.w row_151,X
(2284) 130C AB48        ; 	pha.w
(2285) 130E ABE21600    ; 	psh.w #22
(2286) 1312 20FFFF      ; 	jsr _imul
(2287) 1315 C204        ; 	adj #4
(2288) 1317 18          ; 	clc
(2289) 1318 CB7501      ; 	adc.w 1,S
(2290) 131B CB9501      ; 	sta.w 1,S
(2291) 131E ABB5FD      ; 	lda.w col_152,X
(2292) 1321 AB0A        ; 	asl.w a
(2293) 1323 18          ; 	clc
(2294) 1324 CB7501      ; 	adc.w 1,S
(2295) 1327 CB9501      ; 	sta.w 1,S
(2296) 132A A901        ; 	lda #1
(2297) 132C 6B          ; 	pli
(2298) 132D AB8300      ; 	sta.w 0,I++
(2299)                  ; ;  384:         END;
(2300)                  ; L_164
(2301)                  ; L_162
(2302)                  ; ;  385:         END;
(2303) 1330 ABF6FD      ; 	inc.w col_152,X
(2304) 1333 4C4012      ; 	jmp L_156
(2305)                  ; L_158
(2306) 1336 ABD6FD      ; 	dec.w col_152,X
(2307)                  ; ;  386:     END;
(2308) 1339 ABF6FF      ; 	inc.w row_151,X
(2309) 133C 4C3012      ; 	jmp L_153
(2310)                  ; L_155
(2311) 133F ABD6FF      ; 	dec.w row_151,X
(2312)                  ; ;  387:     END {ResetIsland};
(2313) 1342 AB9A        ; 	txs.w
(2314) 1344 ABFA        ; 	plx.w
(2315) 1346 60          ; 	rts
(2316)                  ; 	.end resetisland_150
(2317)                  ; ;  388: 
(2318)                  ; ;  389: 
(2319)                  ; ;  390: BEGIN {WolfIsland}
(2320)                  ; _pc65_main .sub
(2321) 1347 ABDA        ; 	phx.w
(2322) 1349 ABBA        ; 	tsx.w
(2323)                  ; ;  391: 
(2324)                  ; ;  392:     Initialize;
(2325) 134B ABDA        ; 	phx.w
(2326) 134D 201F02      ; 	jsr initialize_013
(2327) 1350 C202        ; 	adj #2
(2328)                  ; ;  393: 
(2329)                  ; ;  394:     t   := 0;
(2330) 1352 A900        ; 	lda #0
(2331) 1354 AB8DAB16    ; 	sta.w t_008
(2332)                  ; ;  395:     xpt := 1;
(2333) 1358 A901        ; 	lda #1
(2334) 135A AB8DAD16    ; 	sta.w xpt_009
(2335)                  ; ;  396:     read(seed);
(2336) 135E ABE2AF16    ; 	psh.w #seed_010
(2337) 1362 20FFFF      ; 	jsr _iread
(2338) 1365 6B          ; 	pli
(2339) 1366 AB8300      ; 	sta.w 0,I++
(2340)                  ; ;  397: 
(2341)                  ; ;  398:     PrintIsland;
(2342) 1369 ABDA        ; 	phx.w
(2343) 136B 20D910      ; 	jsr printisland_125
(2344) 136E C202        ; 	adj #2
(2345)                  ; ;  399: 
(2346)                  ; ;  400:     {Loop once per time period.}
(2347)                  ; ;  401:     REPEAT
(2348)                  ; L_166
(2349)                  ; ;  402:     writeln;
(2350) 1370 20FFFF      ; 	jsr _writeln
(2351)                  ; ;  403: 
(2352)                  ; ;  404:     t := t + 1;
(2353) 1373 ABADAB16    ; 	lda.w t_008
(2354) 1377 AB48        ; 	pha.w
(2355) 1379 A901        ; 	lda #1
(2356) 137B 18          ; 	clc
(2357) 137C CB7501      ; 	adc.w 1,S
(2358) 137F C202        ; 	adj #2
(2359) 1381 AB8DAB16    ; 	sta.w t_008
(2360)                  ; ;  405:     EventsOccur;
(2361) 1385 ABDA        ; 	phx.w
(2362) 1387 20B60F      ; 	jsr eventsoccur_104
(2363) 138A C202        ; 	adj #2
(2364)                  ; ;  406:     ResetIsland;
(2365) 138C ABDA        ; 	phx.w
(2366) 138E 202512      ; 	jsr resetisland_150
(2367) 1391 C202        ; 	adj #2
(2368)                  ; ;  407: 
(2369)                  ; ;  408:     {Time to print the island?}
(2370)                  ; ;  409:     IF t = printtimes[xpt] THEN BEGIN
(2371) 1393 ABADAB16    ; 	lda.w t_008
(2372) 1397 AB48        ; 	pha.w
(2373) 1399 ABE24116    ; 	psh.w #printtimes_004
(2374) 139D ABADAD16    ; 	lda.w xpt_009
(2375) 13A1 AB3A        ; 	dec.w a
(2376) 13A3 AB0A        ; 	asl.w a
(2377) 13A5 18          ; 	clc
(2378) 13A6 CB7501      ; 	adc.w 1,S
(2379) 13A9 CB9501      ; 	sta.w 1,S
(2380) 13AC 6B          ; 	pli
(2381) 13AD ABA300      ; 	lda.w 0,I++
(2382) 13B0 CB4401      ; 	xma.w 1,S
(2383) 13B3 CBD501      ; 	cmp.w 1,S
(2384) 13B6 C202        ; 	adj #2
(2385) 13B8 08          ; 	php
(2386) 13B9 A901        ; 	lda #1
(2387) 13BB 28          ; 	plp
(2388) 13BC F002        ; 	beq L_170
(2389) 13BE A900        ; 	lda #0
(2390)                  ; L_170
(2391) 13C0 ABC90100    ; 	cmp.w #1
(2392) 13C4 F003        ; 	beq L_168
(2393) 13C6 4CE213      ; 	jmp L_169
(2394)                  ; L_168
(2395)                  ; ;  410:         PrintIsland;
(2396) 13C9 ABDA        ; 	phx.w
(2397) 13CB 20D910      ; 	jsr printisland_125
(2398) 13CE C202        ; 	adj #2
(2399)                  ; ;  411:         xpt := xpt + 1;
(2400) 13D0 ABADAD16    ; 	lda.w xpt_009
(2401) 13D4 AB48        ; 	pha.w
(2402) 13D6 A901        ; 	lda #1
(2403) 13D8 18          ; 	clc
(2404) 13D9 CB7501      ; 	adc.w 1,S
(2405) 13DC C202        ; 	adj #2
(2406) 13DE AB8DAD16    ; 	sta.w xpt_009
(2407)                  ; ;  412:     END;
(2408)                  ; L_169
(2409)                  ; ;  413:     UNTIL (numwolves = 0) OR (numrabbits = 0)
(2410) 13E2 ABADA516    ; 	lda.w numwolves_005
(2411) 13E6 AB48        ; 	pha.w
(2412) 13E8 A900        ; 	lda #0
(2413) 13EA CB4401      ; 	xma.w 1,S
(2414) 13ED CBD501      ; 	cmp.w 1,S
(2415) 13F0 C202        ; 	adj #2
(2416) 13F2 08          ; 	php
(2417) 13F3 A901        ; 	lda #1
(2418) 13F5 28          ; 	plp
(2419) 13F6 F002        ; 	beq L_171
(2420) 13F8 A900        ; 	lda #0
(2421)                  ; L_171
(2422) 13FA AB48        ; 	pha.w
(2423) 13FC ABADA716    ; 	lda.w numrabbits_006
(2424) 1400 AB48        ; 	pha.w
(2425) 1402 A900        ; 	lda #0
(2426) 1404 CB4401      ; 	xma.w 1,S
(2427) 1407 CBD501      ; 	cmp.w 1,S
(2428) 140A C202        ; 	adj #2
(2429) 140C 08          ; 	php
(2430) 140D A901        ; 	lda #1
(2431) 140F 28          ; 	plp
(2432) 1410 F002        ; 	beq L_172
(2433) 1412 A900        ; 	lda #0
(2434)                  ; L_172
(2435)                  ; ;  414:       OR (xpt > numprinttimes);
(2436) 1414 CB1501      ; 	ora.w 1,S
(2437) 1417 C202        ; 	adj #2
(2438) 1419 AB48        ; 	pha.w
(2439) 141B ABADAD16    ; 	lda.w xpt_009
(2440) 141F AB48        ; 	pha.w
(2441) 1421 ABADA916    ; 	lda.w numprinttimes_007
(2442) 1425 CB4401      ; 	xma.w 1,S
(2443) 1428 CBD501      ; 	cmp.w 1,S
(2444) 142B C202        ; 	adj #2
(2445) 142D 08          ; 	php
(2446) 142E A901        ; 	lda #1
(2447) 1430 28          ; 	plp
(2448) 1431 AB1002      ; 	bgt L_173
(2449) 1434 A900        ; 	lda #0
(2450)                  ; L_173
(2451) 1436 CB1501      ; 	ora.w 1,S
(2452) 1439 C202        ; 	adj #2
(2453) 143B ABC90100    ; 	cmp.w #1
(2454) 143F F003        ; 	beq L_167
(2455) 1441 4C7013      ; 	jmp L_166
(2456)                  ; L_167
(2457)                  ; ;  415: 
(2458)                  ; ;  416:     PrintIsland;
(2459) 1444 ABDA        ; 	phx.w
(2460) 1446 20D910      ; 	jsr printisland_125
(2461) 1449 C202        ; 	adj #2
(2462)                  ; ;  417: 
(2463)                  ; ;  418: END {WolfIsland}.
(2464) 144B ABFA        ; 	plx.w
(2465) 144D 60          ; 	rts
(2466)                  ; 	.end _pc65_main
(2467)                  ; 
(2468)                  ; 	.dat
(2469)                  ; 
(2470) 144E 7220        ; S_149 .str "r "
(2471) 1450 5720        ; S_144 .str "W "
(2472) 1452 2E20        ; S_139 .str ". "
(2473) 1454 203A2057    ; S_129 .str " : Wolf Island"
       1458 6F6C662049736C616E64
(2474) 1462 203A2052    ; S_103 .str " : Rabbit born at "
       1466 616262697420626F726E20617420
(2475) 1474 203A2057    ; S_087 .str " : Wolf born at "
       1478 6F6C6620626F726E20617420
(2476) 1484 203A2052    ; S_080 .str " : Rabbit eaten at "
       1488 616262697420656174656E20617420
(2477) 1497 2C20        ; S_071 .str ", "
(2478) 1499 203A2057    ; S_070 .str " : Wolf died at "
       149D 6F6C66206469656420617420
(2479) 14A9 74203D      ; S_069 .str "t ="
(2480) 14AC 00          ; _bss_start .byt 1
(2481) 14AD 00000000    ; island_002 .byt 242
       14B1 0000000000000000000000000000000000000000000000000000000000000000
       14D1 0000000000000000000000000000000000000000000000000000000000000000
       14F1 0000000000000000000000000000000000000000000000000000000000000000
       1511 0000000000000000000000000000000000000000000000000000000000000000
       1531 0000000000000000000000000000000000000000000000000000000000000000
       1551 0000000000000000000000000000000000000000000000000000000000000000
       1571 0000000000000000000000000000000000000000000000000000000000000000
       1591 0000000000000000000000000000
(2482) 159F 00000000    ; foodunits_003 .byt 162
       15A3 0000000000000000000000000000000000000000000000000000000000000000
       15C3 0000000000000000000000000000000000000000000000000000000000000000
       15E3 0000000000000000000000000000000000000000000000000000000000000000
       1603 0000000000000000000000000000000000000000000000000000000000000000
       1623 000000000000000000000000000000000000000000000000000000000000
(2483) 1641 00000000    ; printtimes_004 .byt 100
       1645 0000000000000000000000000000000000000000000000000000000000000000
       1665 0000000000000000000000000000000000000000000000000000000000000000
       1685 0000000000000000000000000000000000000000000000000000000000000000
(2484) 16A5 0000        ; numwolves_005 .wrd 1
(2485) 16A7 0000        ; numrabbits_006 .wrd 1
(2486) 16A9 0000        ; numprinttimes_007 .wrd 1
(2487) 16AB 0000        ; t_008 .wrd 1
(2488) 16AD 0000        ; xpt_009 .wrd 1
(2489) 16AF 0000        ; seed_010 .wrd 1
(2490) 16B1 00000000    ; rowoffset_011 .byt 10
       16B5 000000000000
(2491) 16BB 00000000    ; coloffset_012 .byt 10
       16BF 000000000000
(2492) 16C5 00          ; _bss_end .byt 1
(2493) 16C6 00000000    ; _stk .byt 1023
       16CA 0000000000000000000000000000000000000000000000000000000000000000
       16EA 0000000000000000000000000000000000000000000000000000000000000000
       170A 0000000000000000000000000000000000000000000000000000000000000000
       172A 0000000000000000000000000000000000000000000000000000000000000000
       174A 0000000000000000000000000000000000000000000000000000000000000000
       176A 0000000000000000000000000000000000000000000000000000000000000000
       178A 0000000000000000000000000000000000000000000000000000000000000000
       17AA 0000000000000000000000000000000000000000000000000000000000000000
       17CA 0000000000000000000000000000000000000000000000000000000000000000
       17EA 0000000000000000000000000000000000000000000000000000000000000000
       180A 0000000000000000000000000000000000000000000000000000000000000000
       182A 0000000000000000000000000000000000000000000000000000000000000000
       184A 0000000000000000000000000000000000000000000000000000000000000000
       186A 0000000000000000000000000000000000000000000000000000000000000000
       188A 0000000000000000000000000000000000000000000000000000000000000000
       18AA 0000000000000000000000000000000000000000000000000000000000000000
       18CA 0000000000000000000000000000000000000000000000000000000000000000
       18EA 0000000000000000000000000000000000000000000000000000000000000000
       190A 0000000000000000000000000000000000000000000000000000000000000000
       192A 0000000000000000000000000000000000000000000000000000000000000000
       194A 0000000000000000000000000000000000000000000000000000000000000000
       196A 0000000000000000000000000000000000000000000000000000000000000000
       198A 0000000000000000000000000000000000000000000000000000000000000000
       19AA 0000000000000000000000000000000000000000000000000000000000000000
       19CA 0000000000000000000000000000000000000000000000000000000000000000
       19EA 0000000000000000000000000000000000000000000000000000000000000000
       1A0A 0000000000000000000000000000000000000000000000000000000000000000
       1A2A 0000000000000000000000000000000000000000000000000000000000000000
       1A4A 0000000000000000000000000000000000000000000000000000000000000000
       1A6A 0000000000000000000000000000000000000000000000000000000000000000
       1A8A 0000000000000000000000000000000000000000000000000000000000000000
       1AAA 000000000000000000000000000000000000000000000000000000
(2494) 1AC5 00          ; _stk_top .byt 1
(2495)                  ; 
(2496)                  ; 	.end
