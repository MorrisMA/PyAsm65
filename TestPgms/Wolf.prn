(   1)                  ; ;    1: PROGRAM WolfIsland (input, output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w
(   9) 0202 CBA2081B    ; 	lds.w #_stk_top
(  10) 0206 9CEF14      ; 	stz _bss_start
(  11) 0209 ABA2EF14    ; 	ldx.w #_bss_start
(  12) 020D ABA0F014    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9081B    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE9EF14    ; 	sbc.w #_bss_start
(  16) 021A 540F        ; 	mov #15
(  17) 021C 4C8813      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: {   Wolf Island is a simulation of a 9 x 9 island of wolves and rabbits.
(  20)                  ; ;    4:     The wolves eat rabbits, and the rabbits eat grass.  Their initial
(  21)                  ; ;    5:     locations are:
(  22)                  ; ;    6: 
(  23)                  ; ;    7:             . . . . . . . . .
(  24)                  ; ;    8:             . W . . . . . W .
(  25)                  ; ;    9:             . . . . . . . . .
(  26)                  ; ;   10:             . . . r r r . . .
(  27)                  ; ;   11:             . . . r r r . . .
(  28)                  ; ;   12:             . . . r r r . . .
(  29)                  ; ;   13:             . . . . . . . . .
(  30)                  ; ;   14:             . W . . . . . W .
(  31)                  ; ;   15:             . . . . . . . . .
(  32)                  ; ;   16: 
(  33)                  ; ;   17:     A wolf or rabbit can move up, down, left, or right into an adjacent
(  34)                  ; ;   18:     location.  Diagonal moves are not allowed.
(  35)                  ; ;   19: 
(  36)                  ; ;   20:     Time is measured in discrete time units.  Wolves reproduce every
(  37)                  ; ;   21:     12 time units, and rabbits every 5 units.  An animal reproduces
(  38)                  ; ;   22:     by splitting into two.
(  39)                  ; ;   23: 
(  40)                  ; ;   24:     Each wolf starts out with 6 food units and loses 1 every time unit.
(  41)                  ; ;   25:     A wolf gains 6 food units by eating a rabbit.  It starves to death
(  42)                  ; ;   26:     if it reaches 0 food units.  Since there's always enough grass to
(  43)                  ; ;   27:     eat, rabbits don't worry about food units.
(  44)                  ; ;   28: 
(  45)                  ; ;   29:     The order of events from time unit T-1 to T is:
(  46)                  ; ;   30: 
(  47)                  ; ;   31:     (1) For each wolf:
(  48)                  ; ;   32: 
(  49)                  ; ;   33:     Lose a food unit.  Die if 0 food units and remove.
(  50)                  ; ;   34: 
(  51)                  ; ;   35:     Eat a rabbit if there is one in an adjacent location by moving
(  52)                  ; ;   36:     into the rabbit's location.  Increase the wolf's food units
(  53)                  ; ;   37:     by 6 and remove the rabbit.
(  54)                  ; ;   38: 
(  55)                  ; ;   39:     Otherwise, randomly choose to move into an adjacent empty
(  56)                  ; ;   40:     location, or stay put.
(  57)                  ; ;   41: 
(  58)                  ; ;   42:     If wolf reproduction time (T = 12,24,36,...), split and leave
(  59)                  ; ;   43:     behind an offspring in the previous location.  Each split wolf
(  60)                  ; ;   44:     has half (DIV 2) the food units.  If there was no move, the
(  61)                  ; ;   45:     baby was stillborn, but the food units are still halved.
(  62)                  ; ;   46: 
(  63)                  ; ;   47:     (2) For each rabbit:
(  64)                  ; ;   48: 
(  65)                  ; ;   49:     Randomly choose to move into an adjacent empty, or stay put.
(  66)                  ; ;   50: 
(  67)                  ; ;   51:     If rabbit reproduction time (T = 5,10,15,...), split and leave
(  68)                  ; ;   52:     behind an offspring in the previous location.  If there was no
(  69)                  ; ;   53:     move, the baby was stillborn.
(  70)                  ; ;   54: 
(  71)                  ; ;   55:     The simulation ends when all the wolves are dead or all the
(  72)                  ; ;   56:     rabbits are eaten.
(  73)                  ; ;   57: 
(  74)                  ; ;   58:     The island is printed at times T = 0,1,2,3,4,5,6,7,8,9,10,
(  75)                  ; ;   59:     15,20,25,30,...,80.  A message is printed whenever a wolf is
(  76)                  ; ;   60:     born or dies, and whenever a rabbit is born or is eaten.
(  77)                  ; ;   61: }
(  78)                  ; ;   62: 
(  79)                  ; ;   63: CONST
(  80)                  ; ;   64:     size            = 9;    {size of island}
(  81)                  ; ;   65:     max             = 10;       {size plus border}
(  82)                  ; ;   66:     wolfreprotime   = 12;       {wolf reproduction period}
(  83)                  ; ;   67:     rabbitreprotime = 5;        {rabbit reproduction period}
(  84)                  ; ;   68:     rabbitfoodunits = 6;        {rabbit food unit worth to wolf}
(  85)                  ; ;   69:     initfoodunits   = 6;        {wolf's initial food units}
(  86)                  ; ;   70:     maxprinttimes   = 50;       {max. no. times to print island}
(  87)                  ; ;   71: 
(  88)                  ; ;   72: TYPE
(  89)                  ; ;   73:     posint   = 0..32767;
(  90)                  ; ;   74:     index    = 0..max;          {index range of island matrix}
(  91)                  ; ;   75: 
(  92)                  ; ;   76:     contents = (wolf, rabbit, newwolf, newrabbit, empty, border);
(  93)                  ; ;   77:     {Contents each each island location.  Each time a wolf or
(  94)                  ; ;   78:      rabbit moves, newwolf or newrabbit is initially placed in
(  95)                  ; ;   79:      the new location.  This prevents a wolf or rabbit from
(  96)                  ; ;   80:      being processed again in its new location during the same
(  97)                  ; ;   81:      time period.}
(  98)                  ; ;   82: 
(  99)                  ; ;   83: VAR
( 100)                  ; ;   84:     island     : ARRAY [index, index] OF contents;
( 101)                  ; ;   85:                 {Wolf Island with border}
( 102)                  ; ;   86:     foodunits  : ARRAY [1..size, 1..size] OF posint;
( 103)                  ; ;   87:                 {wolves' food unit matrix}
( 104)                  ; ;   88:     printtimes : ARRAY [1..maxprinttimes] OF posint;
( 105)                  ; ;   89:                 {times to print island}
( 106)                  ; ;   90: 
( 107)                  ; ;   91:     numwolves, numrabbits : posint; {no. of wolves and rabbits}
( 108)                  ; ;   92:     numprinttimes         : posint;     {no. of print times}
( 109)                  ; ;   93:     t                 : posint;     {time}
( 110)                  ; ;   94:     xpt  : 1..maxprinttimes;        {print times index}
( 111)                  ; ;   95:     seed : posint;                  {random number seed}
( 112)                  ; ;   96: 
( 113)                  ; ;   97:     rowoffset : ARRAY [0..4] OF -1..+1;
( 114)                  ; ;   98:     coloffset : ARRAY [0..4] OF -1..+1;
( 115)                  ; ;   99:     {Row and column offsets.  When added to the current row and
( 116)                  ; ;  100:      column of a wolf's or rabbit's location, gives the row and
( 117)                  ; ;  101:      column of the same or an adjacent location.}
( 118)                  ; ;  102: 
( 119)                  ; ;  103: 
( 120)                  ; ;  104: PROCEDURE Initialize;
( 121)                  ; ;  105: 
( 122)                  ; ;  106:     {Initialize all arrays.}
( 123)                  ; ;  107: 
( 124)                  ; ;  108:     VAR
( 125)                  ; ;  109:     i        : posint;
( 126)                  ; ;  110:     row, col : index;
( 127)                  ; ;  111: 
( 128)                  ; ;  112:     BEGIN
( 129)                  ; i_014 .equ -1
( 130)                  ; row_015 .equ -3
( 131)                  ; col_016 .equ -5
( 132)                  ; initialize_013 .sub
( 133) 021F ABDA        ; 	phx.w
( 134) 0221 ABBA        ; 	tsx.w
( 135) 0223 C2FA        ; 	adj #-6
( 136)                  ; ;  113: 
( 137)                  ; ;  114:     {Initialize the island and wolf food matrices.}
( 138)                  ; ;  115:     FOR i := 0 TO max DO BEGIN
( 139) 0225 A900        ; 	lda #0
( 140) 0227 AB95FF      ; 	sta.w i_014,X
( 141)                  ; L_017
( 142) 022A A90A        ; 	lda #10
( 143) 022C ABD5FF      ; 	cmp.w i_014,X
( 144) 022F AB5003      ; 	bge L_018
( 145) 0232 4CE702      ; 	jmp L_019
( 146)                  ; L_018
( 147)                  ; ;  116:         island[0,   i] := border;
( 148) 0235 ABE2F014    ; 	psh.w #island_002
( 149) 0239 ABE20000    ; 	psh.w #0
( 150)                  ; 	pha.w
( 151) 023D ABE21600    ; 	psh.w #22
( 152) 0241 20FFFF      ; 	jsr _imul
( 153) 0244 C204        ; 	adj #4
( 154) 0246 18          ; 	clc
( 155) 0247 CB7501      ; 	adc.w 1,S
( 156) 024A CB9501      ; 	sta.w 1,S
( 157) 024D ABB5FF      ; 	lda.w i_014,X
( 158) 0250 AB0A        ; 	asl.w a
( 159) 0252 18          ; 	clc
( 160) 0253 CB7501      ; 	adc.w 1,S
( 161) 0256 CB9501      ; 	sta.w 1,S
( 162) 0259 A905        ; 	lda #5
( 163) 025B 8B6B        ; 	pli.s
( 164) 025D AB8300      ; 	sta.w 0,I++
( 165)                  ; ;  117:         island[max, i] := border;
( 166) 0260 ABE2F014    ; 	psh.w #island_002
( 167) 0264 ABE20A00    ; 	psh.w #10
( 168)                  ; 	pha.w
( 169) 0268 ABE21600    ; 	psh.w #22
( 170) 026C 20FFFF      ; 	jsr _imul
( 171) 026F C204        ; 	adj #4
( 172) 0271 18          ; 	clc
( 173) 0272 CB7501      ; 	adc.w 1,S
( 174) 0275 CB9501      ; 	sta.w 1,S
( 175) 0278 ABB5FF      ; 	lda.w i_014,X
( 176) 027B AB0A        ; 	asl.w a
( 177) 027D 18          ; 	clc
( 178) 027E CB7501      ; 	adc.w 1,S
( 179) 0281 CB9501      ; 	sta.w 1,S
( 180) 0284 A905        ; 	lda #5
( 181) 0286 8B6B        ; 	pli.s
( 182) 0288 AB8300      ; 	sta.w 0,I++
( 183)                  ; ;  118:         island[i, 0]   := border;
( 184) 028B ABE2F014    ; 	psh.w #island_002
( 185) 028F ABB5FF      ; 	lda.w i_014,X
( 186) 0292 AB48        ; 	pha.w
( 187) 0294 ABE21600    ; 	psh.w #22
( 188) 0298 20FFFF      ; 	jsr _imul
( 189) 029B C204        ; 	adj #4
( 190) 029D 18          ; 	clc
( 191) 029E CB7501      ; 	adc.w 1,S
( 192) 02A1 CB9501      ; 	sta.w 1,S
( 193) 02A4 A900        ; 	lda #0
( 194) 02A6 AB0A        ; 	asl.w a
( 195) 02A8 18          ; 	clc
( 196) 02A9 CB7501      ; 	adc.w 1,S
( 197) 02AC CB9501      ; 	sta.w 1,S
( 198) 02AF A905        ; 	lda #5
( 199) 02B1 8B6B        ; 	pli.s
( 200) 02B3 AB8300      ; 	sta.w 0,I++
( 201)                  ; ;  119:         island[i, max] := border;
( 202) 02B6 ABE2F014    ; 	psh.w #island_002
( 203) 02BA ABB5FF      ; 	lda.w i_014,X
( 204) 02BD AB48        ; 	pha.w
( 205) 02BF ABE21600    ; 	psh.w #22
( 206) 02C3 20FFFF      ; 	jsr _imul
( 207) 02C6 C204        ; 	adj #4
( 208) 02C8 18          ; 	clc
( 209) 02C9 CB7501      ; 	adc.w 1,S
( 210) 02CC CB9501      ; 	sta.w 1,S
( 211) 02CF A90A        ; 	lda #10
( 212) 02D1 AB0A        ; 	asl.w a
( 213) 02D3 18          ; 	clc
( 214) 02D4 CB7501      ; 	adc.w 1,S
( 215) 02D7 CB9501      ; 	sta.w 1,S
( 216) 02DA A905        ; 	lda #5
( 217) 02DC 8B6B        ; 	pli.s
( 218) 02DE AB8300      ; 	sta.w 0,I++
( 219)                  ; ;  120:     END;
( 220) 02E1 ABF6FF      ; 	inc.w i_014,X
( 221) 02E4 4C2A02      ; 	jmp L_017
( 222)                  ; L_019
( 223) 02E7 ABD6FF      ; 	dec.w i_014,X
( 224)                  ; ;  121:     FOR row := 1 TO size DO BEGIN
( 225) 02EA A901        ; 	lda #1
( 226) 02EC AB95FD      ; 	sta.w row_015,X
( 227)                  ; L_020
( 228) 02EF A909        ; 	lda #9
( 229) 02F1 ABD5FD      ; 	cmp.w row_015,X
( 230) 02F4 AB5003      ; 	bge L_021
( 231) 02F7 4C7503      ; 	jmp L_022
( 232)                  ; L_021
( 233)                  ; ;  122:         FOR col := 1 TO size DO BEGIN
( 234) 02FA A901        ; 	lda #1
( 235) 02FC AB95FB      ; 	sta.w col_016,X
( 236)                  ; L_023
( 237) 02FF A909        ; 	lda #9
( 238) 0301 ABD5FB      ; 	cmp.w col_016,X
( 239) 0304 AB5003      ; 	bge L_024
( 240) 0307 4C6C03      ; 	jmp L_025
( 241)                  ; L_024
( 242)                  ; ;  123:         island[row, col]    := empty;
( 243) 030A ABE2F014    ; 	psh.w #island_002
( 244) 030E ABB5FD      ; 	lda.w row_015,X
( 245) 0311 AB48        ; 	pha.w
( 246) 0313 ABE21600    ; 	psh.w #22
( 247) 0317 20FFFF      ; 	jsr _imul
( 248) 031A C204        ; 	adj #4
( 249) 031C 18          ; 	clc
( 250) 031D CB7501      ; 	adc.w 1,S
( 251) 0320 CB9501      ; 	sta.w 1,S
( 252) 0323 ABB5FB      ; 	lda.w col_016,X
( 253) 0326 AB0A        ; 	asl.w a
( 254) 0328 18          ; 	clc
( 255) 0329 CB7501      ; 	adc.w 1,S
( 256) 032C CB9501      ; 	sta.w 1,S
( 257) 032F A904        ; 	lda #4
( 258) 0331 8B6B        ; 	pli.s
( 259) 0333 AB8300      ; 	sta.w 0,I++
( 260)                  ; ;  124:         foodunits[row, col] := 0;
( 261) 0336 ABE2E215    ; 	psh.w #foodunits_003
( 262) 033A ABB5FD      ; 	lda.w row_015,X
( 263) 033D AB3A        ; 	dec.w a
( 264) 033F AB48        ; 	pha.w
( 265) 0341 ABE21200    ; 	psh.w #18
( 266) 0345 20FFFF      ; 	jsr _imul
( 267) 0348 C204        ; 	adj #4
( 268) 034A 18          ; 	clc
( 269) 034B CB7501      ; 	adc.w 1,S
( 270) 034E CB9501      ; 	sta.w 1,S
( 271) 0351 ABB5FB      ; 	lda.w col_016,X
( 272) 0354 AB3A        ; 	dec.w a
( 273) 0356 AB0A        ; 	asl.w a
( 274) 0358 18          ; 	clc
( 275) 0359 CB7501      ; 	adc.w 1,S
( 276) 035C CB9501      ; 	sta.w 1,S
( 277) 035F A900        ; 	lda #0
( 278) 0361 8B6B        ; 	pli.s
( 279) 0363 AB8300      ; 	sta.w 0,I++
( 280)                  ; ;  125:         END;
( 281) 0366 ABF6FB      ; 	inc.w col_016,X
( 282) 0369 4CFF02      ; 	jmp L_023
( 283)                  ; L_025
( 284) 036C ABD6FB      ; 	dec.w col_016,X
( 285)                  ; ;  126:     END;
( 286) 036F ABF6FD      ; 	inc.w row_015,X
( 287) 0372 4CEF02      ; 	jmp L_020
( 288)                  ; L_022
( 289) 0375 ABD6FD      ; 	dec.w row_015,X
( 290)                  ; ;  127: 
( 291)                  ; ;  128:     {Place wolves on the island.}
( 292)                  ; ;  129:     read(numwolves);
( 293) 0378 ABE2E816    ; 	psh.w #numwolves_005
( 294) 037C 20FFFF      ; 	jsr _iread
( 295) 037F 8B6B        ; 	pli.s
( 296) 0381 AB8300      ; 	sta.w 0,I++
( 297)                  ; ;  130:     FOR i := 1 TO numwolves DO BEGIN
( 298) 0384 A901        ; 	lda #1
( 299) 0386 AB95FF      ; 	sta.w i_014,X
( 300)                  ; L_026
( 301) 0389 ABADE816    ; 	lda.w numwolves_005
( 302) 038D ABD5FF      ; 	cmp.w i_014,X
( 303) 0390 AB5003      ; 	bge L_027
( 304) 0393 4C1A04      ; 	jmp L_028
( 305)                  ; L_027
( 306)                  ; ;  131:         read(row, col);
( 307) 0396 AB8A        ; 	txa.w
( 308) 0398 18          ; 	clc
( 309) 0399 AB69FDFF    ; 	adc.w #row_015
( 310) 039D AB48        ; 	pha.w
( 311) 039F 20FFFF      ; 	jsr _iread
( 312) 03A2 8B6B        ; 	pli.s
( 313) 03A4 AB8300      ; 	sta.w 0,I++
( 314) 03A7 AB8A        ; 	txa.w
( 315) 03A9 18          ; 	clc
( 316) 03AA AB69FBFF    ; 	adc.w #col_016
( 317) 03AE AB48        ; 	pha.w
( 318) 03B0 20FFFF      ; 	jsr _iread
( 319) 03B3 8B6B        ; 	pli.s
( 320) 03B5 AB8300      ; 	sta.w 0,I++
( 321)                  ; ;  132:         island[row, col]    := wolf;
( 322) 03B8 ABE2F014    ; 	psh.w #island_002
( 323) 03BC ABB5FD      ; 	lda.w row_015,X
( 324) 03BF AB48        ; 	pha.w
( 325) 03C1 ABE21600    ; 	psh.w #22
( 326) 03C5 20FFFF      ; 	jsr _imul
( 327) 03C8 C204        ; 	adj #4
( 328) 03CA 18          ; 	clc
( 329) 03CB CB7501      ; 	adc.w 1,S
( 330) 03CE CB9501      ; 	sta.w 1,S
( 331) 03D1 ABB5FB      ; 	lda.w col_016,X
( 332) 03D4 AB0A        ; 	asl.w a
( 333) 03D6 18          ; 	clc
( 334) 03D7 CB7501      ; 	adc.w 1,S
( 335) 03DA CB9501      ; 	sta.w 1,S
( 336) 03DD A900        ; 	lda #0
( 337) 03DF 8B6B        ; 	pli.s
( 338) 03E1 AB8300      ; 	sta.w 0,I++
( 339)                  ; ;  133:         foodunits[row, col] := initfoodunits;
( 340) 03E4 ABE2E215    ; 	psh.w #foodunits_003
( 341) 03E8 ABB5FD      ; 	lda.w row_015,X
( 342) 03EB AB3A        ; 	dec.w a
( 343) 03ED AB48        ; 	pha.w
( 344) 03EF ABE21200    ; 	psh.w #18
( 345) 03F3 20FFFF      ; 	jsr _imul
( 346) 03F6 C204        ; 	adj #4
( 347) 03F8 18          ; 	clc
( 348) 03F9 CB7501      ; 	adc.w 1,S
( 349) 03FC CB9501      ; 	sta.w 1,S
( 350) 03FF ABB5FB      ; 	lda.w col_016,X
( 351) 0402 AB3A        ; 	dec.w a
( 352) 0404 AB0A        ; 	asl.w a
( 353) 0406 18          ; 	clc
( 354) 0407 CB7501      ; 	adc.w 1,S
( 355) 040A CB9501      ; 	sta.w 1,S
( 356) 040D A906        ; 	lda #6
( 357) 040F 8B6B        ; 	pli.s
( 358) 0411 AB8300      ; 	sta.w 0,I++
( 359)                  ; ;  134:     END;
( 360) 0414 ABF6FF      ; 	inc.w i_014,X
( 361) 0417 4C8903      ; 	jmp L_026
( 362)                  ; L_028
( 363) 041A ABD6FF      ; 	dec.w i_014,X
( 364)                  ; ;  135: 
( 365)                  ; ;  136:     {Place rabbits on the island.}
( 366)                  ; ;  137:     read(numrabbits);
( 367) 041D ABE2EA16    ; 	psh.w #numrabbits_006
( 368) 0421 20FFFF      ; 	jsr _iread
( 369) 0424 8B6B        ; 	pli.s
( 370) 0426 AB8300      ; 	sta.w 0,I++
( 371)                  ; ;  138:     FOR i := 1 TO numrabbits DO BEGIN
( 372) 0429 A901        ; 	lda #1
( 373) 042B AB95FF      ; 	sta.w i_014,X
( 374)                  ; L_029
( 375) 042E ABADEA16    ; 	lda.w numrabbits_006
( 376) 0432 ABD5FF      ; 	cmp.w i_014,X
( 377) 0435 AB5003      ; 	bge L_030
( 378) 0438 4C8F04      ; 	jmp L_031
( 379)                  ; L_030
( 380)                  ; ;  139:         read(row, col);
( 381) 043B AB8A        ; 	txa.w
( 382) 043D 18          ; 	clc
( 383) 043E AB69FDFF    ; 	adc.w #row_015
( 384) 0442 AB48        ; 	pha.w
( 385) 0444 20FFFF      ; 	jsr _iread
( 386) 0447 8B6B        ; 	pli.s
( 387) 0449 AB8300      ; 	sta.w 0,I++
( 388) 044C AB8A        ; 	txa.w
( 389) 044E 18          ; 	clc
( 390) 044F AB69FBFF    ; 	adc.w #col_016
( 391) 0453 AB48        ; 	pha.w
( 392) 0455 20FFFF      ; 	jsr _iread
( 393) 0458 8B6B        ; 	pli.s
( 394) 045A AB8300      ; 	sta.w 0,I++
( 395)                  ; ;  140:         island[row, col] := rabbit;
( 396) 045D ABE2F014    ; 	psh.w #island_002
( 397) 0461 ABB5FD      ; 	lda.w row_015,X
( 398) 0464 AB48        ; 	pha.w
( 399) 0466 ABE21600    ; 	psh.w #22
( 400) 046A 20FFFF      ; 	jsr _imul
( 401) 046D C204        ; 	adj #4
( 402) 046F 18          ; 	clc
( 403) 0470 CB7501      ; 	adc.w 1,S
( 404) 0473 CB9501      ; 	sta.w 1,S
( 405) 0476 ABB5FB      ; 	lda.w col_016,X
( 406) 0479 AB0A        ; 	asl.w a
( 407) 047B 18          ; 	clc
( 408) 047C CB7501      ; 	adc.w 1,S
( 409) 047F CB9501      ; 	sta.w 1,S
( 410) 0482 A901        ; 	lda #1
( 411) 0484 8B6B        ; 	pli.s
( 412) 0486 AB8300      ; 	sta.w 0,I++
( 413)                  ; ;  141:     END;
( 414) 0489 ABF6FF      ; 	inc.w i_014,X
( 415) 048C 4C2E04      ; 	jmp L_029
( 416)                  ; L_031
( 417) 048F ABD6FF      ; 	dec.w i_014,X
( 418)                  ; ;  142: 
( 419)                  ; ;  143:     {Read print times.}
( 420)                  ; ;  144:     read(numprinttimes);
( 421) 0492 ABE2EC16    ; 	psh.w #numprinttimes_007
( 422) 0496 20FFFF      ; 	jsr _iread
( 423) 0499 8B6B        ; 	pli.s
( 424) 049B AB8300      ; 	sta.w 0,I++
( 425)                  ; ;  145:     FOR i := 1 TO numprinttimes DO BEGIN
( 426) 049E A901        ; 	lda #1
( 427) 04A0 AB95FF      ; 	sta.w i_014,X
( 428)                  ; L_032
( 429) 04A3 ABADEC16    ; 	lda.w numprinttimes_007
( 430) 04A7 ABD5FF      ; 	cmp.w i_014,X
( 431) 04AA AB5003      ; 	bge L_033
( 432) 04AD 4CD004      ; 	jmp L_034
( 433)                  ; L_033
( 434)                  ; ;  146:         read(printtimes[i]);
( 435) 04B0 ABE28416    ; 	psh.w #printtimes_004
( 436) 04B4 ABB5FF      ; 	lda.w i_014,X
( 437) 04B7 AB3A        ; 	dec.w a
( 438) 04B9 AB0A        ; 	asl.w a
( 439) 04BB 18          ; 	clc
( 440) 04BC CB7501      ; 	adc.w 1,S
( 441) 04BF CB9501      ; 	sta.w 1,S
( 442) 04C2 20FFFF      ; 	jsr _iread
( 443) 04C5 8B6B        ; 	pli.s
( 444) 04C7 AB8300      ; 	sta.w 0,I++
( 445)                  ; ;  147:     END;
( 446) 04CA ABF6FF      ; 	inc.w i_014,X
( 447) 04CD 4CA304      ; 	jmp L_032
( 448)                  ; L_034
( 449) 04D0 ABD6FF      ; 	dec.w i_014,X
( 450)                  ; ;  148: 
( 451)                  ; ;  149:     {Initialize the row and column offsets for moves.}
( 452)                  ; ;  150:     rowoffset[0] :=  0; coloffset[0] :=  0; {stay put}
( 453) 04D3 ABE2F416    ; 	psh.w #rowoffset_011
( 454) 04D7 A900        ; 	lda #0
( 455) 04D9 AB0A        ; 	asl.w a
( 456) 04DB 18          ; 	clc
( 457) 04DC CB7501      ; 	adc.w 1,S
( 458) 04DF CB9501      ; 	sta.w 1,S
( 459) 04E2 A900        ; 	lda #0
( 460) 04E4 8B6B        ; 	pli.s
( 461) 04E6 AB8300      ; 	sta.w 0,I++
( 462) 04E9 ABE2FE16    ; 	psh.w #coloffset_012
( 463) 04ED A900        ; 	lda #0
( 464) 04EF AB0A        ; 	asl.w a
( 465) 04F1 18          ; 	clc
( 466) 04F2 CB7501      ; 	adc.w 1,S
( 467) 04F5 CB9501      ; 	sta.w 1,S
( 468) 04F8 A900        ; 	lda #0
( 469) 04FA 8B6B        ; 	pli.s
( 470) 04FC AB8300      ; 	sta.w 0,I++
( 471)                  ; ;  151:     rowoffset[1] := -1; coloffset[1] :=  0; {up}
( 472) 04FF ABE2F416    ; 	psh.w #rowoffset_011
( 473) 0503 A901        ; 	lda #1
( 474) 0505 AB0A        ; 	asl.w a
( 475) 0507 18          ; 	clc
( 476) 0508 CB7501      ; 	adc.w 1,S
( 477) 050B CB9501      ; 	sta.w 1,S
( 478) 050E A901        ; 	lda #1
( 479) 0510 AB49FFFF    ; 	eor.w #-1
( 480) 0514 AB1A        ; 	inc.w a
( 481) 0516 8B6B        ; 	pli.s
( 482) 0518 AB8300      ; 	sta.w 0,I++
( 483) 051B ABE2FE16    ; 	psh.w #coloffset_012
( 484) 051F A901        ; 	lda #1
( 485) 0521 AB0A        ; 	asl.w a
( 486) 0523 18          ; 	clc
( 487) 0524 CB7501      ; 	adc.w 1,S
( 488) 0527 CB9501      ; 	sta.w 1,S
( 489) 052A A900        ; 	lda #0
( 490) 052C 8B6B        ; 	pli.s
( 491) 052E AB8300      ; 	sta.w 0,I++
( 492)                  ; ;  152:     rowoffset[2] :=  0; coloffset[2] := -1; {left}
( 493) 0531 ABE2F416    ; 	psh.w #rowoffset_011
( 494) 0535 A902        ; 	lda #2
( 495) 0537 AB0A        ; 	asl.w a
( 496) 0539 18          ; 	clc
( 497) 053A CB7501      ; 	adc.w 1,S
( 498) 053D CB9501      ; 	sta.w 1,S
( 499) 0540 A900        ; 	lda #0
( 500) 0542 8B6B        ; 	pli.s
( 501) 0544 AB8300      ; 	sta.w 0,I++
( 502) 0547 ABE2FE16    ; 	psh.w #coloffset_012
( 503) 054B A902        ; 	lda #2
( 504) 054D AB0A        ; 	asl.w a
( 505) 054F 18          ; 	clc
( 506) 0550 CB7501      ; 	adc.w 1,S
( 507) 0553 CB9501      ; 	sta.w 1,S
( 508) 0556 A901        ; 	lda #1
( 509) 0558 AB49FFFF    ; 	eor.w #-1
( 510) 055C AB1A        ; 	inc.w a
( 511) 055E 8B6B        ; 	pli.s
( 512) 0560 AB8300      ; 	sta.w 0,I++
( 513)                  ; ;  153:     rowoffset[3] :=  0; coloffset[3] := +1; {right}
( 514) 0563 ABE2F416    ; 	psh.w #rowoffset_011
( 515) 0567 A903        ; 	lda #3
( 516) 0569 AB0A        ; 	asl.w a
( 517) 056B 18          ; 	clc
( 518) 056C CB7501      ; 	adc.w 1,S
( 519) 056F CB9501      ; 	sta.w 1,S
( 520) 0572 A900        ; 	lda #0
( 521) 0574 8B6B        ; 	pli.s
( 522) 0576 AB8300      ; 	sta.w 0,I++
( 523) 0579 ABE2FE16    ; 	psh.w #coloffset_012
( 524) 057D A903        ; 	lda #3
( 525) 057F AB0A        ; 	asl.w a
( 526) 0581 18          ; 	clc
( 527) 0582 CB7501      ; 	adc.w 1,S
( 528) 0585 CB9501      ; 	sta.w 1,S
( 529) 0588 A901        ; 	lda #1
( 530) 058A 8B6B        ; 	pli.s
( 531) 058C AB8300      ; 	sta.w 0,I++
( 532)                  ; ;  154:     rowoffset[4] := +1; coloffset[4] :=  0; {down}
( 533) 058F ABE2F416    ; 	psh.w #rowoffset_011
( 534) 0593 A904        ; 	lda #4
( 535) 0595 AB0A        ; 	asl.w a
( 536) 0597 18          ; 	clc
( 537) 0598 CB7501      ; 	adc.w 1,S
( 538) 059B CB9501      ; 	sta.w 1,S
( 539) 059E A901        ; 	lda #1
( 540) 05A0 8B6B        ; 	pli.s
( 541) 05A2 AB8300      ; 	sta.w 0,I++
( 542) 05A5 ABE2FE16    ; 	psh.w #coloffset_012
( 543) 05A9 A904        ; 	lda #4
( 544) 05AB AB0A        ; 	asl.w a
( 545) 05AD 18          ; 	clc
( 546) 05AE CB7501      ; 	adc.w 1,S
( 547) 05B1 CB9501      ; 	sta.w 1,S
( 548) 05B4 A900        ; 	lda #0
( 549) 05B6 8B6B        ; 	pli.s
( 550) 05B8 AB8300      ; 	sta.w 0,I++
( 551)                  ; ;  155:     END {Initialize};
( 552) 05BB AB9A        ; 	txs.w
( 553) 05BD ABFA        ; 	plx.w
( 554) 05BF 60          ; 	rts
( 555)                  ; 	.end initialize_013
( 556)                  ; ;  156: 
( 557)                  ; ;  157: 
( 558)                  ; ;  158: FUNCTION random (limit : posint) : posint;
( 559)                  ; ;  159: 
( 560)                  ; ;  160:     {Return a random integer from 0..limit-1.}
( 561)                  ; ;  161: 
( 562)                  ; ;  162:     CONST
( 563)                  ; ;  163:     multiplier = 21;
( 564)                  ; ;  164:     increment  = 77;
( 565)                  ; ;  165:     divisor    = 1024;
( 566)                  ; ;  166: 
( 567)                  ; ;  167:     BEGIN
( 568)                  ; limit_036 .equ +7
( 569)                  ; random_035 .sub
( 570) 05C0 ABDA        ; 	phx.w
( 571) 05C2 ABBA        ; 	tsx.w
( 572) 05C4 C2FC        ; 	adj #-4
( 573)                  ; ;  168:     seed   := (seed*multiplier + increment) MOD divisor;
( 574) 05C6 ABADF216    ; 	lda.w seed_010
( 575) 05CA AB48        ; 	pha.w
( 576) 05CC ABE21500    ; 	psh.w #21
( 577)                  ; 	pha.w
( 578) 05D0 20FFFF      ; 	jsr _imul
( 579) 05D3 C204        ; 	adj #4
( 580) 05D5 AB48        ; 	pha.w
( 581) 05D7 A94D        ; 	lda #77
( 582) 05D9 18          ; 	clc
( 583) 05DA CB7501      ; 	adc.w 1,S
( 584) 05DD C202        ; 	adj #2
( 585) 05DF AB48        ; 	pha.w
( 586) 05E1 ABE20004    ; 	psh.w #1024
( 587)                  ; 	pha.w
( 588) 05E5 20FFFF      ; 	jsr _idiv
( 589) 05E8 C204        ; 	adj #4
( 590) 05EA 1B          ; 	swp a
( 591) 05EB AB8DF216    ; 	sta.w seed_010
( 592)                  ; ;  169:     random := (seed*limit) DIV divisor;
( 593) 05EF ABADF216    ; 	lda.w seed_010
( 594) 05F3 AB48        ; 	pha.w
( 595) 05F5 ABB507      ; 	lda.w limit_036,X
( 596) 05F8 AB48        ; 	pha.w
( 597) 05FA 20FFFF      ; 	jsr _imul
( 598) 05FD C204        ; 	adj #4
( 599) 05FF AB48        ; 	pha.w
( 600) 0601 ABE20004    ; 	psh.w #1024
( 601)                  ; 	pha.w
( 602) 0605 20FFFF      ; 	jsr _idiv
( 603) 0608 C204        ; 	adj #4
( 604) 060A AB95FD      ; 	sta.w RETURN_VALUE,X
( 605)                  ; ;  170:     END {random};
( 606) 060D ABB5FD      ; 	lda.w RETURN_VALUE,X
( 607) 0610 AB9A        ; 	txs.w
( 608) 0612 ABFA        ; 	plx.w
( 609) 0614 60          ; 	rts
( 610)                  ; 	.end random_035
( 611)                  ; ;  171: 
( 612)                  ; ;  172: 
( 613)                  ; ;  173: PROCEDURE NewLocation (creature : contents;
( 614)                  ; ;  174:                oldrow, oldcol : index;
( 615)                  ; ;  175:                VAR newrow, newcol : index);
( 616)                  ; ;  176: 
( 617)                  ; ;  177:     {Find a new location for the creature currently at
( 618)                  ; ;  178:      island[oldrow, oldcol].}
( 619)                  ; ;  179: 
( 620)                  ; ;  180: 
( 621)                  ; ;  181:     VAR
( 622)                  ; ;  182:     adj  : 0..4;        {adjacent locations index}
( 623)                  ; ;  183:     what : contents;    {contents of location}
( 624)                  ; ;  184:     done : boolean;
( 625)                  ; ;  185: 
( 626)                  ; ;  186:     BEGIN
( 627)                  ; creature_038 .equ +15
( 628)                  ; oldrow_039 .equ +13
( 629)                  ; oldcol_040 .equ +11
( 630)                  ; newrow_041 .equ +9
( 631)                  ; newcol_042 .equ +7
( 632)                  ; adj_043 .equ -1
( 633)                  ; what_044 .equ -3
( 634)                  ; done_045 .equ -5
( 635)                  ; newlocation_037 .sub
( 636) 0615 ABDA        ; 	phx.w
( 637) 0617 ABBA        ; 	tsx.w
( 638) 0619 C2FA        ; 	adj #-6
( 639)                  ; ;  187:     done := false;
( 640) 061B A900        ; 	lda #0
( 641) 061D AB95FB      ; 	sta.w done_045,X
( 642)                  ; ;  188: 
( 643)                  ; ;  189:     {A wolf first tries to eat a rabbit.
( 644)                  ; ;  190:      Check adjacent locations.}
( 645)                  ; ;  191:     IF creature = wolf THEN BEGIN
( 646) 0620 ABB50F      ; 	lda.w creature_038,X
( 647) 0623 AB48        ; 	pha.w
( 648) 0625 A900        ; 	lda #0
( 649) 0627 CB4401      ; 	xma.w 1,S
( 650) 062A CBD501      ; 	cmp.w 1,S
( 651) 062D C202        ; 	adj #2
( 652) 062F 08          ; 	php
( 653) 0630 A901        ; 	lda #1
( 654) 0632 28          ; 	plp
( 655) 0633 F002        ; 	beq L_048
( 656) 0635 A900        ; 	lda #0
( 657)                  ; L_048
( 658) 0637 ABC90100    ; 	cmp.w #1
( 659) 063B F003        ; 	beq L_046
( 660) 063D 4C1A07      ; 	jmp L_047
( 661)                  ; L_046
( 662)                  ; ;  192:         adj := 0;
( 663) 0640 A900        ; 	lda #0
( 664) 0642 AB95FF      ; 	sta.w adj_043,X
( 665)                  ; ;  193:         REPEAT
( 666)                  ; L_049
( 667)                  ; ;  194:         adj := adj + 1;
( 668) 0645 ABB5FF      ; 	lda.w adj_043,X
( 669) 0648 AB48        ; 	pha.w
( 670) 064A A901        ; 	lda #1
( 671) 064C 18          ; 	clc
( 672) 064D CB7501      ; 	adc.w 1,S
( 673) 0650 C202        ; 	adj #2
( 674) 0652 AB95FF      ; 	sta.w adj_043,X
( 675)                  ; ;  195:         newrow := oldrow + rowoffset[adj];
( 676) 0655 ABB509      ; 	lda.w newrow_041,X
( 677) 0658 AB48        ; 	pha.w
( 678) 065A ABB50D      ; 	lda.w oldrow_039,X
( 679) 065D AB48        ; 	pha.w
( 680) 065F ABE2F416    ; 	psh.w #rowoffset_011
( 681) 0663 ABB5FF      ; 	lda.w adj_043,X
( 682) 0666 AB0A        ; 	asl.w a
( 683) 0668 18          ; 	clc
( 684) 0669 CB7501      ; 	adc.w 1,S
( 685) 066C CB9501      ; 	sta.w 1,S
( 686) 066F 8B6B        ; 	pli.s
( 687) 0671 ABA300      ; 	lda.w 0,I++
( 688) 0674 18          ; 	clc
( 689) 0675 CB7501      ; 	adc.w 1,S
( 690) 0678 C202        ; 	adj #2
( 691) 067A 8B6B        ; 	pli.s
( 692) 067C AB8300      ; 	sta.w 0,I++
( 693)                  ; ;  196:         newcol := oldcol + coloffset[adj];
( 694) 067F ABB507      ; 	lda.w newcol_042,X
( 695) 0682 AB48        ; 	pha.w
( 696) 0684 ABB50B      ; 	lda.w oldcol_040,X
( 697) 0687 AB48        ; 	pha.w
( 698) 0689 ABE2FE16    ; 	psh.w #coloffset_012
( 699) 068D ABB5FF      ; 	lda.w adj_043,X
( 700) 0690 AB0A        ; 	asl.w a
( 701) 0692 18          ; 	clc
( 702) 0693 CB7501      ; 	adc.w 1,S
( 703) 0696 CB9501      ; 	sta.w 1,S
( 704) 0699 8B6B        ; 	pli.s
( 705) 069B ABA300      ; 	lda.w 0,I++
( 706) 069E 18          ; 	clc
( 707) 069F CB7501      ; 	adc.w 1,S
( 708) 06A2 C202        ; 	adj #2
( 709) 06A4 8B6B        ; 	pli.s
( 710) 06A6 AB8300      ; 	sta.w 0,I++
( 711)                  ; ;  197:         what   := island[newrow, newcol];
( 712) 06A9 ABE2F014    ; 	psh.w #island_002
( 713) 06AD ABA109      ; 	lda.w (newrow_041,X)
( 714) 06B0 AB48        ; 	pha.w
( 715) 06B2 ABE21600    ; 	psh.w #22
( 716) 06B6 20FFFF      ; 	jsr _imul
( 717) 06B9 C204        ; 	adj #4
( 718) 06BB 18          ; 	clc
( 719) 06BC CB7501      ; 	adc.w 1,S
( 720) 06BF CB9501      ; 	sta.w 1,S
( 721) 06C2 ABA107      ; 	lda.w (newcol_042,X)
( 722) 06C5 AB0A        ; 	asl.w a
( 723) 06C7 18          ; 	clc
( 724) 06C8 CB7501      ; 	adc.w 1,S
( 725) 06CB CB9501      ; 	sta.w 1,S
( 726) 06CE 8B6B        ; 	pli.s
( 727) 06D0 ABA300      ; 	lda.w 0,I++
( 728) 06D3 AB95FD      ; 	sta.w what_044,X
( 729)                  ; ;  198:         done   := what = rabbit;
( 730) 06D6 ABB5FD      ; 	lda.w what_044,X
( 731) 06D9 AB48        ; 	pha.w
( 732) 06DB A901        ; 	lda #1
( 733) 06DD CB4401      ; 	xma.w 1,S
( 734) 06E0 CBD501      ; 	cmp.w 1,S
( 735) 06E3 C202        ; 	adj #2
( 736) 06E5 08          ; 	php
( 737) 06E6 A901        ; 	lda #1
( 738) 06E8 28          ; 	plp
( 739) 06E9 F002        ; 	beq L_051
( 740) 06EB A900        ; 	lda #0
( 741)                  ; L_051
( 742) 06ED AB95FB      ; 	sta.w done_045,X
( 743)                  ; ;  199:         UNTIL done OR (adj = 4);
( 744) 06F0 ABB5FB      ; 	lda.w done_045,X
( 745) 06F3 AB48        ; 	pha.w
( 746) 06F5 ABB5FF      ; 	lda.w adj_043,X
( 747) 06F8 AB48        ; 	pha.w
( 748) 06FA A904        ; 	lda #4
( 749) 06FC CB4401      ; 	xma.w 1,S
( 750) 06FF CBD501      ; 	cmp.w 1,S
( 751) 0702 C202        ; 	adj #2
( 752) 0704 08          ; 	php
( 753) 0705 A901        ; 	lda #1
( 754) 0707 28          ; 	plp
( 755) 0708 F002        ; 	beq L_052
( 756) 070A A900        ; 	lda #0
( 757)                  ; L_052
( 758) 070C CB1501      ; 	ora.w 1,S
( 759) 070F C202        ; 	adj #2
( 760) 0711 ABC90100    ; 	cmp.w #1
( 761) 0715 F003        ; 	beq L_050
( 762) 0717 4C4506      ; 	jmp L_049
( 763)                  ; L_050
( 764)                  ; ;  200:     END;
( 765)                  ; L_047
( 766)                  ; ;  201: 
( 767)                  ; ;  202:     {Move randomly into an adjacent location or stay put.}
( 768)                  ; ;  203:     IF NOT done THEN BEGIN
( 769) 071A ABB5FB      ; 	lda.w done_045,X
( 770) 071D 4901        ; 	eor #1
( 771) 071F ABC90100    ; 	cmp.w #1
( 772) 0723 F003        ; 	beq L_053
( 773) 0725 4C1808      ; 	jmp L_054
( 774)                  ; L_053
( 775)                  ; ;  204:         REPEAT
( 776)                  ; L_055
( 777)                  ; ;  205:         adj := random(5);
( 778) 0728 ABE20500    ; 	psh.w #5
( 779)                  ; 	pha.w
( 780) 072C ABB505      ; 	lda.w STATIC_LINK,X
( 781) 072F AB48        ; 	pha.w
( 782) 0731 20C005      ; 	jsr random_035
( 783) 0734 C204        ; 	adj #4
( 784) 0736 AB95FF      ; 	sta.w adj_043,X
( 785)                  ; ;  206:         newrow := oldrow + rowoffset[adj];
( 786) 0739 ABB509      ; 	lda.w newrow_041,X
( 787) 073C AB48        ; 	pha.w
( 788) 073E ABB50D      ; 	lda.w oldrow_039,X
( 789) 0741 AB48        ; 	pha.w
( 790) 0743 ABE2F416    ; 	psh.w #rowoffset_011
( 791) 0747 ABB5FF      ; 	lda.w adj_043,X
( 792) 074A AB0A        ; 	asl.w a
( 793) 074C 18          ; 	clc
( 794) 074D CB7501      ; 	adc.w 1,S
( 795) 0750 CB9501      ; 	sta.w 1,S
( 796) 0753 8B6B        ; 	pli.s
( 797) 0755 ABA300      ; 	lda.w 0,I++
( 798) 0758 18          ; 	clc
( 799) 0759 CB7501      ; 	adc.w 1,S
( 800) 075C C202        ; 	adj #2
( 801) 075E 8B6B        ; 	pli.s
( 802) 0760 AB8300      ; 	sta.w 0,I++
( 803)                  ; ;  207:         newcol := oldcol + coloffset[adj];
( 804) 0763 ABB507      ; 	lda.w newcol_042,X
( 805) 0766 AB48        ; 	pha.w
( 806) 0768 ABB50B      ; 	lda.w oldcol_040,X
( 807) 076B AB48        ; 	pha.w
( 808) 076D ABE2FE16    ; 	psh.w #coloffset_012
( 809) 0771 ABB5FF      ; 	lda.w adj_043,X
( 810) 0774 AB0A        ; 	asl.w a
( 811) 0776 18          ; 	clc
( 812) 0777 CB7501      ; 	adc.w 1,S
( 813) 077A CB9501      ; 	sta.w 1,S
( 814) 077D 8B6B        ; 	pli.s
( 815) 077F ABA300      ; 	lda.w 0,I++
( 816) 0782 18          ; 	clc
( 817) 0783 CB7501      ; 	adc.w 1,S
( 818) 0786 C202        ; 	adj #2
( 819) 0788 8B6B        ; 	pli.s
( 820) 078A AB8300      ; 	sta.w 0,I++
( 821)                  ; ;  208:         what   := island[newrow, newcol];
( 822) 078D ABE2F014    ; 	psh.w #island_002
( 823) 0791 ABA109      ; 	lda.w (newrow_041,X)
( 824) 0794 AB48        ; 	pha.w
( 825) 0796 ABE21600    ; 	psh.w #22
( 826) 079A 20FFFF      ; 	jsr _imul
( 827) 079D C204        ; 	adj #4
( 828) 079F 18          ; 	clc
( 829) 07A0 CB7501      ; 	adc.w 1,S
( 830) 07A3 CB9501      ; 	sta.w 1,S
( 831) 07A6 ABA107      ; 	lda.w (newcol_042,X)
( 832) 07A9 AB0A        ; 	asl.w a
( 833) 07AB 18          ; 	clc
( 834) 07AC CB7501      ; 	adc.w 1,S
( 835) 07AF CB9501      ; 	sta.w 1,S
( 836) 07B2 8B6B        ; 	pli.s
( 837) 07B4 ABA300      ; 	lda.w 0,I++
( 838) 07B7 AB95FD      ; 	sta.w what_044,X
( 839)                  ; ;  209:         UNTIL    (what = empty)
( 840) 07BA ABB5FD      ; 	lda.w what_044,X
( 841) 07BD AB48        ; 	pha.w
( 842) 07BF A904        ; 	lda #4
( 843) 07C1 CB4401      ; 	xma.w 1,S
( 844) 07C4 CBD501      ; 	cmp.w 1,S
( 845) 07C7 C202        ; 	adj #2
( 846) 07C9 08          ; 	php
( 847) 07CA A901        ; 	lda #1
( 848) 07CC 28          ; 	plp
( 849) 07CD F002        ; 	beq L_057
( 850) 07CF A900        ; 	lda #0
( 851)                  ; L_057
( 852)                  ; ;  210:           OR ((newrow = oldrow) AND (newcol = oldcol));
( 853) 07D1 AB48        ; 	pha.w
( 854) 07D3 ABA109      ; 	lda.w (newrow_041,X)
( 855) 07D6 AB48        ; 	pha.w
( 856) 07D8 ABB50D      ; 	lda.w oldrow_039,X
( 857) 07DB CB4401      ; 	xma.w 1,S
( 858) 07DE CBD501      ; 	cmp.w 1,S
( 859) 07E1 C202        ; 	adj #2
( 860) 07E3 08          ; 	php
( 861) 07E4 A901        ; 	lda #1
( 862) 07E6 28          ; 	plp
( 863) 07E7 F002        ; 	beq L_058
( 864) 07E9 A900        ; 	lda #0
( 865)                  ; L_058
( 866) 07EB AB48        ; 	pha.w
( 867) 07ED ABA107      ; 	lda.w (newcol_042,X)
( 868) 07F0 AB48        ; 	pha.w
( 869) 07F2 ABB50B      ; 	lda.w oldcol_040,X
( 870) 07F5 CB4401      ; 	xma.w 1,S
( 871) 07F8 CBD501      ; 	cmp.w 1,S
( 872) 07FB C202        ; 	adj #2
( 873) 07FD 08          ; 	php
( 874) 07FE A901        ; 	lda #1
( 875) 0800 28          ; 	plp
( 876) 0801 F002        ; 	beq L_059
( 877) 0803 A900        ; 	lda #0
( 878)                  ; L_059
( 879) 0805 CB3501      ; 	and.w 1,S
( 880) 0808 C202        ; 	adj #2
( 881) 080A CB1501      ; 	ora.w 1,S
( 882) 080D C202        ; 	adj #2
( 883) 080F ABC90100    ; 	cmp.w #1
( 884) 0813 F003        ; 	beq L_056
( 885) 0815 4C2807      ; 	jmp L_055
( 886)                  ; L_056
( 887)                  ; ;  211:     END;
( 888)                  ; L_054
( 889)                  ; ;  212:     END {NewLocation};
( 890) 0818 AB9A        ; 	txs.w
( 891) 081A ABFA        ; 	plx.w
( 892) 081C 60          ; 	rts
( 893)                  ; 	.end newlocation_037
( 894)                  ; ;  213: 
( 895)                  ; ;  214: 
( 896)                  ; ;  215: PROCEDURE ProcessWolf (oldrow, oldcol : index);
( 897)                  ; ;  216: 
( 898)                  ; ;  217:     {Process the wolf located at island[oldrow, oldcol].}
( 899)                  ; ;  218: 
( 900)                  ; ;  219:     VAR
( 901)                  ; ;  220:     newrow, newcol : index;     {new row and column}
( 902)                  ; ;  221:     moved : boolean;            {true iff wolf moved}
( 903)                  ; ;  222: 
( 904)                  ; ;  223:     BEGIN
( 905)                  ; oldrow_061 .equ +9
( 906)                  ; oldcol_062 .equ +7
( 907)                  ; newrow_063 .equ -1
( 908)                  ; newcol_064 .equ -3
( 909)                  ; moved_065 .equ -5
( 910)                  ; processwolf_060 .sub
( 911) 081D ABDA        ; 	phx.w
( 912) 081F ABBA        ; 	tsx.w
( 913) 0821 C2FA        ; 	adj #-6
( 914)                  ; ;  224: 
( 915)                  ; ;  225:     {Lose a food unit.}
( 916)                  ; ;  226:     foodunits[oldrow, oldcol] := foodunits[oldrow, oldcol] - 1;
( 917) 0823 ABE2E215    ; 	psh.w #foodunits_003
( 918) 0827 ABB509      ; 	lda.w oldrow_061,X
( 919) 082A AB3A        ; 	dec.w a
( 920) 082C AB48        ; 	pha.w
( 921) 082E ABE21200    ; 	psh.w #18
( 922) 0832 20FFFF      ; 	jsr _imul
( 923) 0835 C204        ; 	adj #4
( 924) 0837 18          ; 	clc
( 925) 0838 CB7501      ; 	adc.w 1,S
( 926) 083B CB9501      ; 	sta.w 1,S
( 927) 083E ABB507      ; 	lda.w oldcol_062,X
( 928) 0841 AB3A        ; 	dec.w a
( 929) 0843 AB0A        ; 	asl.w a
( 930) 0845 18          ; 	clc
( 931) 0846 CB7501      ; 	adc.w 1,S
( 932) 0849 CB9501      ; 	sta.w 1,S
( 933) 084C ABE2E215    ; 	psh.w #foodunits_003
( 934) 0850 ABB509      ; 	lda.w oldrow_061,X
( 935) 0853 AB3A        ; 	dec.w a
( 936) 0855 AB48        ; 	pha.w
( 937) 0857 ABE21200    ; 	psh.w #18
( 938) 085B 20FFFF      ; 	jsr _imul
( 939) 085E C204        ; 	adj #4
( 940) 0860 18          ; 	clc
( 941) 0861 CB7501      ; 	adc.w 1,S
( 942) 0864 CB9501      ; 	sta.w 1,S
( 943) 0867 ABB507      ; 	lda.w oldcol_062,X
( 944) 086A AB3A        ; 	dec.w a
( 945) 086C AB0A        ; 	asl.w a
( 946) 086E 18          ; 	clc
( 947) 086F CB7501      ; 	adc.w 1,S
( 948) 0872 CB9501      ; 	sta.w 1,S
( 949) 0875 8B6B        ; 	pli.s
( 950) 0877 ABA300      ; 	lda.w 0,I++
( 951) 087A AB48        ; 	pha.w
( 952) 087C A901        ; 	lda #1
( 953) 087E CB4401      ; 	xma.w 1,S
( 954) 0881 38          ; 	sec
( 955) 0882 CBF501      ; 	sbc.w 1,S
( 956) 0885 C202        ; 	adj #2
( 957) 0887 8B6B        ; 	pli.s
( 958) 0889 AB8300      ; 	sta.w 0,I++
( 959)                  ; ;  227: 
( 960)                  ; ;  228:     IF foodunits[oldrow, oldcol] = 0 THEN BEGIN
( 961) 088C ABE2E215    ; 	psh.w #foodunits_003
( 962) 0890 ABB509      ; 	lda.w oldrow_061,X
( 963) 0893 AB3A        ; 	dec.w a
( 964) 0895 AB48        ; 	pha.w
( 965) 0897 ABE21200    ; 	psh.w #18
( 966) 089B 20FFFF      ; 	jsr _imul
( 967) 089E C204        ; 	adj #4
( 968) 08A0 18          ; 	clc
( 969) 08A1 CB7501      ; 	adc.w 1,S
( 970) 08A4 CB9501      ; 	sta.w 1,S
( 971) 08A7 ABB507      ; 	lda.w oldcol_062,X
( 972) 08AA AB3A        ; 	dec.w a
( 973) 08AC AB0A        ; 	asl.w a
( 974) 08AE 18          ; 	clc
( 975) 08AF CB7501      ; 	adc.w 1,S
( 976) 08B2 CB9501      ; 	sta.w 1,S
( 977) 08B5 8B6B        ; 	pli.s
( 978) 08B7 ABA300      ; 	lda.w 0,I++
( 979) 08BA AB48        ; 	pha.w
( 980) 08BC A900        ; 	lda #0
( 981) 08BE CB4401      ; 	xma.w 1,S
( 982) 08C1 CBD501      ; 	cmp.w 1,S
( 983) 08C4 C202        ; 	adj #2
( 984) 08C6 08          ; 	php
( 985) 08C7 A901        ; 	lda #1
( 986) 08C9 28          ; 	plp
( 987) 08CA F002        ; 	beq L_068
( 988) 08CC A900        ; 	lda #0
( 989)                  ; L_068
( 990) 08CE ABC90100    ; 	cmp.w #1
( 991) 08D2 F003        ; 	beq L_066
( 992) 08D4 4C9609      ; 	jmp L_067
( 993)                  ; L_066
( 994)                  ; ;  229: 
( 995)                  ; ;  230:         {Die of starvation.}
( 996)                  ; ;  231:         island[oldrow, oldcol] := empty;
( 997) 08D7 ABE2F014    ; 	psh.w #island_002
( 998) 08DB ABB509      ; 	lda.w oldrow_061,X
( 999) 08DE AB48        ; 	pha.w
(1000) 08E0 ABE21600    ; 	psh.w #22
(1001) 08E4 20FFFF      ; 	jsr _imul
(1002) 08E7 C204        ; 	adj #4
(1003) 08E9 18          ; 	clc
(1004) 08EA CB7501      ; 	adc.w 1,S
(1005) 08ED CB9501      ; 	sta.w 1,S
(1006) 08F0 ABB507      ; 	lda.w oldcol_062,X
(1007) 08F3 AB0A        ; 	asl.w a
(1008) 08F5 18          ; 	clc
(1009) 08F6 CB7501      ; 	adc.w 1,S
(1010) 08F9 CB9501      ; 	sta.w 1,S
(1011) 08FC A904        ; 	lda #4
(1012) 08FE 8B6B        ; 	pli.s
(1013) 0900 AB8300      ; 	sta.w 0,I++
(1014)                  ; ;  232:         numwolves := numwolves - 1;
(1015) 0903 ABADE816    ; 	lda.w numwolves_005
(1016) 0907 AB48        ; 	pha.w
(1017) 0909 A901        ; 	lda #1
(1018) 090B CB4401      ; 	xma.w 1,S
(1019) 090E 38          ; 	sec
(1020) 090F CBF501      ; 	sbc.w 1,S
(1021) 0912 C202        ; 	adj #2
(1022) 0914 AB8DE816    ; 	sta.w numwolves_005
(1023)                  ; ;  233:         writeln('t =', t:4, ' : Wolf died at ',
(1024) 0918 ABE2EC14    ; 	psh.w #S_069
(1025) 091C ABE20000    ; 	psh.w #0
(1026) 0920 ABE20300    ; 	psh.w #3
(1027) 0924 20FFFF      ; 	jsr _swrite
(1028) 0927 C206        ; 	adj #6
(1029) 0929 ABADEE16    ; 	lda.w t_008
(1030) 092D AB48        ; 	pha.w
(1031) 092F ABE20400    ; 	psh.w #4
(1032)                  ; 	pha.w
(1033) 0933 20FFFF      ; 	jsr _iwrite
(1034) 0936 C204        ; 	adj #4
(1035) 0938 ABE2DC14    ; 	psh.w #S_070
(1036) 093C ABE20000    ; 	psh.w #0
(1037) 0940 ABE21000    ; 	psh.w #16
(1038) 0944 20FFFF      ; 	jsr _swrite
(1039) 0947 C206        ; 	adj #6
(1040)                  ; ;  234:             '[', oldrow:1, ', ', oldcol:1, ']');
(1041) 0949 ABE25B00    ; 	psh.w #91
(1042)                  ; 	pha.w
(1043) 094D ABE20000    ; 	psh.w #0
(1044) 0951 20FFFF      ; 	jsr _cwrite
(1045) 0954 C204        ; 	adj #4
(1046) 0956 ABB509      ; 	lda.w oldrow_061,X
(1047) 0959 AB48        ; 	pha.w
(1048) 095B ABE20100    ; 	psh.w #1
(1049)                  ; 	pha.w
(1050) 095F 20FFFF      ; 	jsr _iwrite
(1051) 0962 C204        ; 	adj #4
(1052) 0964 ABE2DA14    ; 	psh.w #S_071
(1053) 0968 ABE20000    ; 	psh.w #0
(1054) 096C ABE20200    ; 	psh.w #2
(1055) 0970 20FFFF      ; 	jsr _swrite
(1056) 0973 C206        ; 	adj #6
(1057) 0975 ABB507      ; 	lda.w oldcol_062,X
(1058) 0978 AB48        ; 	pha.w
(1059) 097A ABE20100    ; 	psh.w #1
(1060)                  ; 	pha.w
(1061) 097E 20FFFF      ; 	jsr _iwrite
(1062) 0981 C204        ; 	adj #4
(1063) 0983 ABE25D00    ; 	psh.w #93
(1064)                  ; 	pha.w
(1065) 0987 ABE20000    ; 	psh.w #0
(1066) 098B 20FFFF      ; 	jsr _cwrite
(1067) 098E C204        ; 	adj #4
(1068) 0990 20FFFF      ; 	jsr _writeln
(1069)                  ; ;  235:     END
(1070)                  ; ;  236:     ELSE BEGIN
(1071) 0993 4C260E      ; 	jmp L_072
(1072)                  ; L_067
(1073)                  ; ;  237: 
(1074)                  ; ;  238:         {Move to adjacent location, or stay put.}
(1075)                  ; ;  239:         NewLocation(wolf, oldrow, oldcol, newrow, newcol);
(1076) 0996 ABE20000    ; 	psh.w #0
(1077)                  ; 	pha.w
(1078) 099A ABB509      ; 	lda.w oldrow_061,X
(1079) 099D AB48        ; 	pha.w
(1080) 099F ABB507      ; 	lda.w oldcol_062,X
(1081) 09A2 AB48        ; 	pha.w
(1082) 09A4 AB8A        ; 	txa.w
(1083) 09A6 18          ; 	clc
(1084) 09A7 AB69FFFF    ; 	adc.w #newrow_063
(1085) 09AB AB48        ; 	pha.w
(1086) 09AD AB8A        ; 	txa.w
(1087) 09AF 18          ; 	clc
(1088) 09B0 AB69FDFF    ; 	adc.w #newcol_064
(1089) 09B4 AB48        ; 	pha.w
(1090) 09B6 ABB505      ; 	lda.w STATIC_LINK,X
(1091) 09B9 AB48        ; 	pha.w
(1092) 09BB 201506      ; 	jsr newlocation_037
(1093) 09BE C20C        ; 	adj #12
(1094)                  ; ;  240:         moved := (newrow <> oldrow) OR (newcol <> oldcol);
(1095) 09C0 ABB5FF      ; 	lda.w newrow_063,X
(1096) 09C3 AB48        ; 	pha.w
(1097) 09C5 ABB509      ; 	lda.w oldrow_061,X
(1098) 09C8 CB4401      ; 	xma.w 1,S
(1099) 09CB CBD501      ; 	cmp.w 1,S
(1100) 09CE C202        ; 	adj #2
(1101) 09D0 08          ; 	php
(1102) 09D1 A901        ; 	lda #1
(1103) 09D3 28          ; 	plp
(1104) 09D4 D002        ; 	bne L_073
(1105) 09D6 A900        ; 	lda #0
(1106)                  ; L_073
(1107) 09D8 AB48        ; 	pha.w
(1108) 09DA ABB5FD      ; 	lda.w newcol_064,X
(1109) 09DD AB48        ; 	pha.w
(1110) 09DF ABB507      ; 	lda.w oldcol_062,X
(1111) 09E2 CB4401      ; 	xma.w 1,S
(1112) 09E5 CBD501      ; 	cmp.w 1,S
(1113) 09E8 C202        ; 	adj #2
(1114) 09EA 08          ; 	php
(1115) 09EB A901        ; 	lda #1
(1116) 09ED 28          ; 	plp
(1117) 09EE D002        ; 	bne L_074
(1118) 09F0 A900        ; 	lda #0
(1119)                  ; L_074
(1120) 09F2 CB1501      ; 	ora.w 1,S
(1121) 09F5 C202        ; 	adj #2
(1122) 09F7 AB95FB      ; 	sta.w moved_065,X
(1123)                  ; ;  241: 
(1124)                  ; ;  242:         IF moved THEN BEGIN
(1125) 09FA ABB5FB      ; 	lda.w moved_065,X
(1126) 09FD ABC90100    ; 	cmp.w #1
(1127) 0A01 F003        ; 	beq L_075
(1128) 0A03 4C270C      ; 	jmp L_076
(1129)                  ; L_075
(1130)                  ; ;  243: 
(1131)                  ; ;  244:         {If there's a rabbit there, eat it.}
(1132)                  ; ;  245:         IF island[newrow, newcol] = rabbit THEN BEGIN
(1133) 0A06 ABE2F014    ; 	psh.w #island_002
(1134) 0A0A ABB5FF      ; 	lda.w newrow_063,X
(1135) 0A0D AB48        ; 	pha.w
(1136) 0A0F ABE21600    ; 	psh.w #22
(1137) 0A13 20FFFF      ; 	jsr _imul
(1138) 0A16 C204        ; 	adj #4
(1139) 0A18 18          ; 	clc
(1140) 0A19 CB7501      ; 	adc.w 1,S
(1141) 0A1C CB9501      ; 	sta.w 1,S
(1142) 0A1F ABB5FD      ; 	lda.w newcol_064,X
(1143) 0A22 AB0A        ; 	asl.w a
(1144) 0A24 18          ; 	clc
(1145) 0A25 CB7501      ; 	adc.w 1,S
(1146) 0A28 CB9501      ; 	sta.w 1,S
(1147) 0A2B 8B6B        ; 	pli.s
(1148) 0A2D ABA300      ; 	lda.w 0,I++
(1149) 0A30 AB48        ; 	pha.w
(1150) 0A32 A901        ; 	lda #1
(1151) 0A34 CB4401      ; 	xma.w 1,S
(1152) 0A37 CBD501      ; 	cmp.w 1,S
(1153) 0A3A C202        ; 	adj #2
(1154) 0A3C 08          ; 	php
(1155) 0A3D A901        ; 	lda #1
(1156) 0A3F 28          ; 	plp
(1157) 0A40 F002        ; 	beq L_079
(1158) 0A42 A900        ; 	lda #0
(1159)                  ; L_079
(1160) 0A44 ABC90100    ; 	cmp.w #1
(1161) 0A48 F003        ; 	beq L_077
(1162) 0A4A 4C430B      ; 	jmp L_078
(1163)                  ; L_077
(1164)                  ; ;  246:             foodunits[oldrow, oldcol] :=
(1165) 0A4D ABE2E215    ; 	psh.w #foodunits_003
(1166) 0A51 ABB509      ; 	lda.w oldrow_061,X
(1167) 0A54 AB3A        ; 	dec.w a
(1168) 0A56 AB48        ; 	pha.w
(1169) 0A58 ABE21200    ; 	psh.w #18
(1170) 0A5C 20FFFF      ; 	jsr _imul
(1171) 0A5F C204        ; 	adj #4
(1172) 0A61 18          ; 	clc
(1173) 0A62 CB7501      ; 	adc.w 1,S
(1174) 0A65 CB9501      ; 	sta.w 1,S
(1175) 0A68 ABB507      ; 	lda.w oldcol_062,X
(1176) 0A6B AB3A        ; 	dec.w a
(1177) 0A6D AB0A        ; 	asl.w a
(1178) 0A6F 18          ; 	clc
(1179) 0A70 CB7501      ; 	adc.w 1,S
(1180) 0A73 CB9501      ; 	sta.w 1,S
(1181)                  ; ;  247:             foodunits[oldrow, oldcol] + rabbitfoodunits;
(1182) 0A76 ABE2E215    ; 	psh.w #foodunits_003
(1183) 0A7A ABB509      ; 	lda.w oldrow_061,X
(1184) 0A7D AB3A        ; 	dec.w a
(1185) 0A7F AB48        ; 	pha.w
(1186) 0A81 ABE21200    ; 	psh.w #18
(1187) 0A85 20FFFF      ; 	jsr _imul
(1188) 0A88 C204        ; 	adj #4
(1189) 0A8A 18          ; 	clc
(1190) 0A8B CB7501      ; 	adc.w 1,S
(1191) 0A8E CB9501      ; 	sta.w 1,S
(1192) 0A91 ABB507      ; 	lda.w oldcol_062,X
(1193) 0A94 AB3A        ; 	dec.w a
(1194) 0A96 AB0A        ; 	asl.w a
(1195) 0A98 18          ; 	clc
(1196) 0A99 CB7501      ; 	adc.w 1,S
(1197) 0A9C CB9501      ; 	sta.w 1,S
(1198) 0A9F 8B6B        ; 	pli.s
(1199) 0AA1 ABA300      ; 	lda.w 0,I++
(1200) 0AA4 AB48        ; 	pha.w
(1201) 0AA6 A906        ; 	lda #6
(1202) 0AA8 18          ; 	clc
(1203) 0AA9 CB7501      ; 	adc.w 1,S
(1204) 0AAC C202        ; 	adj #2
(1205) 0AAE 8B6B        ; 	pli.s
(1206) 0AB0 AB8300      ; 	sta.w 0,I++
(1207)                  ; ;  248:             numrabbits := numrabbits - 1;
(1208) 0AB3 ABADEA16    ; 	lda.w numrabbits_006
(1209) 0AB7 AB48        ; 	pha.w
(1210) 0AB9 A901        ; 	lda #1
(1211) 0ABB CB4401      ; 	xma.w 1,S
(1212) 0ABE 38          ; 	sec
(1213) 0ABF CBF501      ; 	sbc.w 1,S
(1214) 0AC2 C202        ; 	adj #2
(1215) 0AC4 AB8DEA16    ; 	sta.w numrabbits_006
(1216)                  ; ;  249:             writeln('t =', t:4, ' : Rabbit eaten at ',
(1217) 0AC8 ABE2EC14    ; 	psh.w #S_069
(1218) 0ACC ABE20000    ; 	psh.w #0
(1219) 0AD0 ABE20300    ; 	psh.w #3
(1220) 0AD4 20FFFF      ; 	jsr _swrite
(1221) 0AD7 C206        ; 	adj #6
(1222) 0AD9 ABADEE16    ; 	lda.w t_008
(1223) 0ADD AB48        ; 	pha.w
(1224) 0ADF ABE20400    ; 	psh.w #4
(1225)                  ; 	pha.w
(1226) 0AE3 20FFFF      ; 	jsr _iwrite
(1227) 0AE6 C204        ; 	adj #4
(1228) 0AE8 ABE2C714    ; 	psh.w #S_080
(1229) 0AEC ABE20000    ; 	psh.w #0
(1230) 0AF0 ABE21300    ; 	psh.w #19
(1231) 0AF4 20FFFF      ; 	jsr _swrite
(1232) 0AF7 C206        ; 	adj #6
(1233)                  ; ;  250:                 '[', newrow:1, ', ', newcol:1, ']');
(1234) 0AF9 ABE25B00    ; 	psh.w #91
(1235)                  ; 	pha.w
(1236) 0AFD ABE20000    ; 	psh.w #0
(1237) 0B01 20FFFF      ; 	jsr _cwrite
(1238) 0B04 C204        ; 	adj #4
(1239) 0B06 ABB5FF      ; 	lda.w newrow_063,X
(1240) 0B09 AB48        ; 	pha.w
(1241) 0B0B ABE20100    ; 	psh.w #1
(1242)                  ; 	pha.w
(1243) 0B0F 20FFFF      ; 	jsr _iwrite
(1244) 0B12 C204        ; 	adj #4
(1245) 0B14 ABE2DA14    ; 	psh.w #S_071
(1246) 0B18 ABE20000    ; 	psh.w #0
(1247) 0B1C ABE20200    ; 	psh.w #2
(1248) 0B20 20FFFF      ; 	jsr _swrite
(1249) 0B23 C206        ; 	adj #6
(1250) 0B25 ABB5FD      ; 	lda.w newcol_064,X
(1251) 0B28 AB48        ; 	pha.w
(1252) 0B2A ABE20100    ; 	psh.w #1
(1253)                  ; 	pha.w
(1254) 0B2E 20FFFF      ; 	jsr _iwrite
(1255) 0B31 C204        ; 	adj #4
(1256) 0B33 ABE25D00    ; 	psh.w #93
(1257)                  ; 	pha.w
(1258) 0B37 ABE20000    ; 	psh.w #0
(1259) 0B3B 20FFFF      ; 	jsr _cwrite
(1260) 0B3E C204        ; 	adj #4
(1261) 0B40 20FFFF      ; 	jsr _writeln
(1262)                  ; ;  251:         END;
(1263)                  ; L_078
(1264)                  ; ;  252: 
(1265)                  ; ;  253:         {Set new (or same) location.}
(1266)                  ; ;  254:         island[newrow, newcol] := newwolf;
(1267) 0B43 ABE2F014    ; 	psh.w #island_002
(1268) 0B47 ABB5FF      ; 	lda.w newrow_063,X
(1269) 0B4A AB48        ; 	pha.w
(1270) 0B4C ABE21600    ; 	psh.w #22
(1271) 0B50 20FFFF      ; 	jsr _imul
(1272) 0B53 C204        ; 	adj #4
(1273) 0B55 18          ; 	clc
(1274) 0B56 CB7501      ; 	adc.w 1,S
(1275) 0B59 CB9501      ; 	sta.w 1,S
(1276) 0B5C ABB5FD      ; 	lda.w newcol_064,X
(1277) 0B5F AB0A        ; 	asl.w a
(1278) 0B61 18          ; 	clc
(1279) 0B62 CB7501      ; 	adc.w 1,S
(1280) 0B65 CB9501      ; 	sta.w 1,S
(1281) 0B68 A902        ; 	lda #2
(1282) 0B6A 8B6B        ; 	pli.s
(1283) 0B6C AB8300      ; 	sta.w 0,I++
(1284)                  ; ;  255:         island[oldrow, oldcol] := empty;
(1285) 0B6F ABE2F014    ; 	psh.w #island_002
(1286) 0B73 ABB509      ; 	lda.w oldrow_061,X
(1287) 0B76 AB48        ; 	pha.w
(1288) 0B78 ABE21600    ; 	psh.w #22
(1289) 0B7C 20FFFF      ; 	jsr _imul
(1290) 0B7F C204        ; 	adj #4
(1291) 0B81 18          ; 	clc
(1292) 0B82 CB7501      ; 	adc.w 1,S
(1293) 0B85 CB9501      ; 	sta.w 1,S
(1294) 0B88 ABB507      ; 	lda.w oldcol_062,X
(1295) 0B8B AB0A        ; 	asl.w a
(1296) 0B8D 18          ; 	clc
(1297) 0B8E CB7501      ; 	adc.w 1,S
(1298) 0B91 CB9501      ; 	sta.w 1,S
(1299) 0B94 A904        ; 	lda #4
(1300) 0B96 8B6B        ; 	pli.s
(1301) 0B98 AB8300      ; 	sta.w 0,I++
(1302)                  ; ;  256:         foodunits[newrow, newcol] := foodunits[oldrow, oldcol];
(1303) 0B9B ABE2E215    ; 	psh.w #foodunits_003
(1304) 0B9F ABB5FF      ; 	lda.w newrow_063,X
(1305) 0BA2 AB3A        ; 	dec.w a
(1306) 0BA4 AB48        ; 	pha.w
(1307) 0BA6 ABE21200    ; 	psh.w #18
(1308) 0BAA 20FFFF      ; 	jsr _imul
(1309) 0BAD C204        ; 	adj #4
(1310) 0BAF 18          ; 	clc
(1311) 0BB0 CB7501      ; 	adc.w 1,S
(1312) 0BB3 CB9501      ; 	sta.w 1,S
(1313) 0BB6 ABB5FD      ; 	lda.w newcol_064,X
(1314) 0BB9 AB3A        ; 	dec.w a
(1315) 0BBB AB0A        ; 	asl.w a
(1316) 0BBD 18          ; 	clc
(1317) 0BBE CB7501      ; 	adc.w 1,S
(1318) 0BC1 CB9501      ; 	sta.w 1,S
(1319) 0BC4 ABE2E215    ; 	psh.w #foodunits_003
(1320) 0BC8 ABB509      ; 	lda.w oldrow_061,X
(1321) 0BCB AB3A        ; 	dec.w a
(1322) 0BCD AB48        ; 	pha.w
(1323) 0BCF ABE21200    ; 	psh.w #18
(1324) 0BD3 20FFFF      ; 	jsr _imul
(1325) 0BD6 C204        ; 	adj #4
(1326) 0BD8 18          ; 	clc
(1327) 0BD9 CB7501      ; 	adc.w 1,S
(1328) 0BDC CB9501      ; 	sta.w 1,S
(1329) 0BDF ABB507      ; 	lda.w oldcol_062,X
(1330) 0BE2 AB3A        ; 	dec.w a
(1331) 0BE4 AB0A        ; 	asl.w a
(1332) 0BE6 18          ; 	clc
(1333) 0BE7 CB7501      ; 	adc.w 1,S
(1334) 0BEA CB9501      ; 	sta.w 1,S
(1335) 0BED 8B6B        ; 	pli.s
(1336) 0BEF ABA300      ; 	lda.w 0,I++
(1337) 0BF2 8B6B        ; 	pli.s
(1338) 0BF4 AB8300      ; 	sta.w 0,I++
(1339)                  ; ;  257:         foodunits[oldrow, oldcol] := 0;
(1340) 0BF7 ABE2E215    ; 	psh.w #foodunits_003
(1341) 0BFB ABB509      ; 	lda.w oldrow_061,X
(1342) 0BFE AB3A        ; 	dec.w a
(1343) 0C00 AB48        ; 	pha.w
(1344) 0C02 ABE21200    ; 	psh.w #18
(1345) 0C06 20FFFF      ; 	jsr _imul
(1346) 0C09 C204        ; 	adj #4
(1347) 0C0B 18          ; 	clc
(1348) 0C0C CB7501      ; 	adc.w 1,S
(1349) 0C0F CB9501      ; 	sta.w 1,S
(1350) 0C12 ABB507      ; 	lda.w oldcol_062,X
(1351) 0C15 AB3A        ; 	dec.w a
(1352) 0C17 AB0A        ; 	asl.w a
(1353) 0C19 18          ; 	clc
(1354) 0C1A CB7501      ; 	adc.w 1,S
(1355) 0C1D CB9501      ; 	sta.w 1,S
(1356) 0C20 A900        ; 	lda #0
(1357) 0C22 8B6B        ; 	pli.s
(1358) 0C24 AB8300      ; 	sta.w 0,I++
(1359)                  ; ;  258:         END;
(1360)                  ; L_076
(1361)                  ; ;  259: 
(1362)                  ; ;  260:         {Wolf reproduction time?}
(1363)                  ; ;  261:         IF     ((t MOD wolfreprotime) = 0)
(1364) 0C27 ABADEE16    ; 	lda.w t_008
(1365) 0C2B AB48        ; 	pha.w
(1366) 0C2D ABE20C00    ; 	psh.w #12
(1367)                  ; 	pha.w
(1368) 0C31 20FFFF      ; 	jsr _idiv
(1369) 0C34 C204        ; 	adj #4
(1370) 0C36 1B          ; 	swp a
(1371) 0C37 AB48        ; 	pha.w
(1372) 0C39 A900        ; 	lda #0
(1373) 0C3B CB4401      ; 	xma.w 1,S
(1374) 0C3E CBD501      ; 	cmp.w 1,S
(1375) 0C41 C202        ; 	adj #2
(1376) 0C43 08          ; 	php
(1377) 0C44 A901        ; 	lda #1
(1378) 0C46 28          ; 	plp
(1379) 0C47 F002        ; 	beq L_083
(1380) 0C49 A900        ; 	lda #0
(1381)                  ; L_083
(1382)                  ; ;  262:            AND (foodunits[newrow, newcol] > 1) THEN BEGIN
(1383) 0C4B AB48        ; 	pha.w
(1384) 0C4D ABE2E215    ; 	psh.w #foodunits_003
(1385) 0C51 ABB5FF      ; 	lda.w newrow_063,X
(1386) 0C54 AB3A        ; 	dec.w a
(1387) 0C56 AB48        ; 	pha.w
(1388) 0C58 ABE21200    ; 	psh.w #18
(1389) 0C5C 20FFFF      ; 	jsr _imul
(1390) 0C5F C204        ; 	adj #4
(1391) 0C61 18          ; 	clc
(1392) 0C62 CB7501      ; 	adc.w 1,S
(1393) 0C65 CB9501      ; 	sta.w 1,S
(1394) 0C68 ABB5FD      ; 	lda.w newcol_064,X
(1395) 0C6B AB3A        ; 	dec.w a
(1396) 0C6D AB0A        ; 	asl.w a
(1397) 0C6F 18          ; 	clc
(1398) 0C70 CB7501      ; 	adc.w 1,S
(1399) 0C73 CB9501      ; 	sta.w 1,S
(1400) 0C76 8B6B        ; 	pli.s
(1401) 0C78 ABA300      ; 	lda.w 0,I++
(1402) 0C7B AB48        ; 	pha.w
(1403) 0C7D A901        ; 	lda #1
(1404) 0C7F CB4401      ; 	xma.w 1,S
(1405) 0C82 CBD501      ; 	cmp.w 1,S
(1406) 0C85 C202        ; 	adj #2
(1407) 0C87 08          ; 	php
(1408) 0C88 A901        ; 	lda #1
(1409) 0C8A 28          ; 	plp
(1410) 0C8B AB1002      ; 	bgt L_084
(1411) 0C8E A900        ; 	lda #0
(1412)                  ; L_084
(1413) 0C90 CB3501      ; 	and.w 1,S
(1414) 0C93 C202        ; 	adj #2
(1415) 0C95 ABC90100    ; 	cmp.w #1
(1416) 0C99 F003        ; 	beq L_081
(1417) 0C9B 4C260E      ; 	jmp L_082
(1418)                  ; L_081
(1419)                  ; ;  263:         foodunits[newrow, newcol] :=
(1420) 0C9E ABE2E215    ; 	psh.w #foodunits_003
(1421) 0CA2 ABB5FF      ; 	lda.w newrow_063,X
(1422) 0CA5 AB3A        ; 	dec.w a
(1423) 0CA7 AB48        ; 	pha.w
(1424) 0CA9 ABE21200    ; 	psh.w #18
(1425) 0CAD 20FFFF      ; 	jsr _imul
(1426) 0CB0 C204        ; 	adj #4
(1427) 0CB2 18          ; 	clc
(1428) 0CB3 CB7501      ; 	adc.w 1,S
(1429) 0CB6 CB9501      ; 	sta.w 1,S
(1430) 0CB9 ABB5FD      ; 	lda.w newcol_064,X
(1431) 0CBC AB3A        ; 	dec.w a
(1432) 0CBE AB0A        ; 	asl.w a
(1433) 0CC0 18          ; 	clc
(1434) 0CC1 CB7501      ; 	adc.w 1,S
(1435) 0CC4 CB9501      ; 	sta.w 1,S
(1436)                  ; ;  264:             foodunits[newrow, newcol] DIV 2;
(1437) 0CC7 ABE2E215    ; 	psh.w #foodunits_003
(1438) 0CCB ABB5FF      ; 	lda.w newrow_063,X
(1439) 0CCE AB3A        ; 	dec.w a
(1440) 0CD0 AB48        ; 	pha.w
(1441) 0CD2 ABE21200    ; 	psh.w #18
(1442) 0CD6 20FFFF      ; 	jsr _imul
(1443) 0CD9 C204        ; 	adj #4
(1444) 0CDB 18          ; 	clc
(1445) 0CDC CB7501      ; 	adc.w 1,S
(1446) 0CDF CB9501      ; 	sta.w 1,S
(1447) 0CE2 ABB5FD      ; 	lda.w newcol_064,X
(1448) 0CE5 AB3A        ; 	dec.w a
(1449) 0CE7 AB0A        ; 	asl.w a
(1450) 0CE9 18          ; 	clc
(1451) 0CEA CB7501      ; 	adc.w 1,S
(1452) 0CED CB9501      ; 	sta.w 1,S
(1453) 0CF0 8B6B        ; 	pli.s
(1454) 0CF2 ABA300      ; 	lda.w 0,I++
(1455) 0CF5 AB48        ; 	pha.w
(1456) 0CF7 ABE20200    ; 	psh.w #2
(1457)                  ; 	pha.w
(1458) 0CFB 20FFFF      ; 	jsr _idiv
(1459) 0CFE C204        ; 	adj #4
(1460) 0D00 8B6B        ; 	pli.s
(1461) 0D02 AB8300      ; 	sta.w 0,I++
(1462)                  ; ;  265: 
(1463)                  ; ;  266:         {If moved, then leave behind an offspring.}
(1464)                  ; ;  267:         IF moved THEN BEGIN
(1465) 0D05 ABB5FB      ; 	lda.w moved_065,X
(1466) 0D08 ABC90100    ; 	cmp.w #1
(1467) 0D0C F003        ; 	beq L_085
(1468) 0D0E 4C260E      ; 	jmp L_086
(1469)                  ; L_085
(1470)                  ; ;  268:             island[oldrow, oldcol] := newwolf;
(1471) 0D11 ABE2F014    ; 	psh.w #island_002
(1472) 0D15 ABB509      ; 	lda.w oldrow_061,X
(1473) 0D18 AB48        ; 	pha.w
(1474) 0D1A ABE21600    ; 	psh.w #22
(1475) 0D1E 20FFFF      ; 	jsr _imul
(1476) 0D21 C204        ; 	adj #4
(1477) 0D23 18          ; 	clc
(1478) 0D24 CB7501      ; 	adc.w 1,S
(1479) 0D27 CB9501      ; 	sta.w 1,S
(1480) 0D2A ABB507      ; 	lda.w oldcol_062,X
(1481) 0D2D AB0A        ; 	asl.w a
(1482) 0D2F 18          ; 	clc
(1483) 0D30 CB7501      ; 	adc.w 1,S
(1484) 0D33 CB9501      ; 	sta.w 1,S
(1485) 0D36 A902        ; 	lda #2
(1486) 0D38 8B6B        ; 	pli.s
(1487) 0D3A AB8300      ; 	sta.w 0,I++
(1488)                  ; ;  269:             foodunits[oldrow, oldcol] :=
(1489) 0D3D ABE2E215    ; 	psh.w #foodunits_003
(1490) 0D41 ABB509      ; 	lda.w oldrow_061,X
(1491) 0D44 AB3A        ; 	dec.w a
(1492) 0D46 AB48        ; 	pha.w
(1493) 0D48 ABE21200    ; 	psh.w #18
(1494) 0D4C 20FFFF      ; 	jsr _imul
(1495) 0D4F C204        ; 	adj #4
(1496) 0D51 18          ; 	clc
(1497) 0D52 CB7501      ; 	adc.w 1,S
(1498) 0D55 CB9501      ; 	sta.w 1,S
(1499) 0D58 ABB507      ; 	lda.w oldcol_062,X
(1500) 0D5B AB3A        ; 	dec.w a
(1501) 0D5D AB0A        ; 	asl.w a
(1502) 0D5F 18          ; 	clc
(1503) 0D60 CB7501      ; 	adc.w 1,S
(1504) 0D63 CB9501      ; 	sta.w 1,S
(1505)                  ; ;  270:             foodunits[newrow, newcol];
(1506) 0D66 ABE2E215    ; 	psh.w #foodunits_003
(1507) 0D6A ABB5FF      ; 	lda.w newrow_063,X
(1508) 0D6D AB3A        ; 	dec.w a
(1509) 0D6F AB48        ; 	pha.w
(1510) 0D71 ABE21200    ; 	psh.w #18
(1511) 0D75 20FFFF      ; 	jsr _imul
(1512) 0D78 C204        ; 	adj #4
(1513) 0D7A 18          ; 	clc
(1514) 0D7B CB7501      ; 	adc.w 1,S
(1515) 0D7E CB9501      ; 	sta.w 1,S
(1516) 0D81 ABB5FD      ; 	lda.w newcol_064,X
(1517) 0D84 AB3A        ; 	dec.w a
(1518) 0D86 AB0A        ; 	asl.w a
(1519) 0D88 18          ; 	clc
(1520) 0D89 CB7501      ; 	adc.w 1,S
(1521) 0D8C CB9501      ; 	sta.w 1,S
(1522) 0D8F 8B6B        ; 	pli.s
(1523) 0D91 ABA300      ; 	lda.w 0,I++
(1524) 0D94 8B6B        ; 	pli.s
(1525) 0D96 AB8300      ; 	sta.w 0,I++
(1526)                  ; ;  271:             numwolves := numwolves + 1;
(1527) 0D99 ABADE816    ; 	lda.w numwolves_005
(1528) 0D9D AB48        ; 	pha.w
(1529) 0D9F A901        ; 	lda #1
(1530) 0DA1 18          ; 	clc
(1531) 0DA2 CB7501      ; 	adc.w 1,S
(1532) 0DA5 C202        ; 	adj #2
(1533) 0DA7 AB8DE816    ; 	sta.w numwolves_005
(1534)                  ; ;  272:             writeln('t =', t:4, ' : Wolf born at ',
(1535) 0DAB ABE2EC14    ; 	psh.w #S_069
(1536) 0DAF ABE20000    ; 	psh.w #0
(1537) 0DB3 ABE20300    ; 	psh.w #3
(1538) 0DB7 20FFFF      ; 	jsr _swrite
(1539) 0DBA C206        ; 	adj #6
(1540) 0DBC ABADEE16    ; 	lda.w t_008
(1541) 0DC0 AB48        ; 	pha.w
(1542) 0DC2 ABE20400    ; 	psh.w #4
(1543)                  ; 	pha.w
(1544) 0DC6 20FFFF      ; 	jsr _iwrite
(1545) 0DC9 C204        ; 	adj #4
(1546) 0DCB ABE2B714    ; 	psh.w #S_087
(1547) 0DCF ABE20000    ; 	psh.w #0
(1548) 0DD3 ABE21000    ; 	psh.w #16
(1549) 0DD7 20FFFF      ; 	jsr _swrite
(1550) 0DDA C206        ; 	adj #6
(1551)                  ; ;  273:                 '[', oldrow:1, ', ', oldcol:1, ']');
(1552) 0DDC ABE25B00    ; 	psh.w #91
(1553)                  ; 	pha.w
(1554) 0DE0 ABE20000    ; 	psh.w #0
(1555) 0DE4 20FFFF      ; 	jsr _cwrite
(1556) 0DE7 C204        ; 	adj #4
(1557) 0DE9 ABB509      ; 	lda.w oldrow_061,X
(1558) 0DEC AB48        ; 	pha.w
(1559) 0DEE ABE20100    ; 	psh.w #1
(1560)                  ; 	pha.w
(1561) 0DF2 20FFFF      ; 	jsr _iwrite
(1562) 0DF5 C204        ; 	adj #4
(1563) 0DF7 ABE2DA14    ; 	psh.w #S_071
(1564) 0DFB ABE20000    ; 	psh.w #0
(1565) 0DFF ABE20200    ; 	psh.w #2
(1566) 0E03 20FFFF      ; 	jsr _swrite
(1567) 0E06 C206        ; 	adj #6
(1568) 0E08 ABB507      ; 	lda.w oldcol_062,X
(1569) 0E0B AB48        ; 	pha.w
(1570) 0E0D ABE20100    ; 	psh.w #1
(1571)                  ; 	pha.w
(1572) 0E11 20FFFF      ; 	jsr _iwrite
(1573) 0E14 C204        ; 	adj #4
(1574) 0E16 ABE25D00    ; 	psh.w #93
(1575)                  ; 	pha.w
(1576) 0E1A ABE20000    ; 	psh.w #0
(1577) 0E1E 20FFFF      ; 	jsr _cwrite
(1578) 0E21 C204        ; 	adj #4
(1579) 0E23 20FFFF      ; 	jsr _writeln
(1580)                  ; ;  274:         END;
(1581)                  ; L_086
(1582)                  ; ;  275:         END;
(1583)                  ; L_082
(1584)                  ; ;  276:     END;
(1585)                  ; L_072
(1586)                  ; ;  277:     END {ProcessWolf};
(1587) 0E26 AB9A        ; 	txs.w
(1588) 0E28 ABFA        ; 	plx.w
(1589) 0E2A 60          ; 	rts
(1590)                  ; 	.end processwolf_060
(1591)                  ; ;  278: 
(1592)                  ; ;  279: 
(1593)                  ; ;  280: PROCEDURE ProcessRabbit (oldrow, oldcol : index);
(1594)                  ; ;  281: 
(1595)                  ; ;  282:     {Process the rabbit located at island[oldrow, oldcol].}
(1596)                  ; ;  283: 
(1597)                  ; ;  284:     VAR
(1598)                  ; ;  285:     newrow, newcol : index;     {new row and column}
(1599)                  ; ;  286:     moved : boolean;            {true iff rabbit moved}
(1600)                  ; ;  287: 
(1601)                  ; ;  288:     BEGIN
(1602)                  ; oldrow_089 .equ +9
(1603)                  ; oldcol_090 .equ +7
(1604)                  ; newrow_091 .equ -1
(1605)                  ; newcol_092 .equ -3
(1606)                  ; moved_093 .equ -5
(1607)                  ; processrabbit_088 .sub
(1608) 0E2B ABDA        ; 	phx.w
(1609) 0E2D ABBA        ; 	tsx.w
(1610) 0E2F C2FA        ; 	adj #-6
(1611)                  ; ;  289: 
(1612)                  ; ;  290:     {Move to adjacent location, or stay put.}
(1613)                  ; ;  291:     NewLocation(rabbit, oldrow, oldcol, newrow, newcol);
(1614) 0E31 ABE20100    ; 	psh.w #1
(1615)                  ; 	pha.w
(1616) 0E35 ABB509      ; 	lda.w oldrow_089,X
(1617) 0E38 AB48        ; 	pha.w
(1618) 0E3A ABB507      ; 	lda.w oldcol_090,X
(1619) 0E3D AB48        ; 	pha.w
(1620) 0E3F AB8A        ; 	txa.w
(1621) 0E41 18          ; 	clc
(1622) 0E42 AB69FFFF    ; 	adc.w #newrow_091
(1623) 0E46 AB48        ; 	pha.w
(1624) 0E48 AB8A        ; 	txa.w
(1625) 0E4A 18          ; 	clc
(1626) 0E4B AB69FDFF    ; 	adc.w #newcol_092
(1627) 0E4F AB48        ; 	pha.w
(1628) 0E51 ABB505      ; 	lda.w STATIC_LINK,X
(1629) 0E54 AB48        ; 	pha.w
(1630) 0E56 201506      ; 	jsr newlocation_037
(1631) 0E59 C20C        ; 	adj #12
(1632)                  ; ;  292:     moved := (newrow <> oldrow) OR (newcol <> oldcol);
(1633) 0E5B ABB5FF      ; 	lda.w newrow_091,X
(1634) 0E5E AB48        ; 	pha.w
(1635) 0E60 ABB509      ; 	lda.w oldrow_089,X
(1636) 0E63 CB4401      ; 	xma.w 1,S
(1637) 0E66 CBD501      ; 	cmp.w 1,S
(1638) 0E69 C202        ; 	adj #2
(1639) 0E6B 08          ; 	php
(1640) 0E6C A901        ; 	lda #1
(1641) 0E6E 28          ; 	plp
(1642) 0E6F D002        ; 	bne L_094
(1643) 0E71 A900        ; 	lda #0
(1644)                  ; L_094
(1645) 0E73 AB48        ; 	pha.w
(1646) 0E75 ABB5FD      ; 	lda.w newcol_092,X
(1647) 0E78 AB48        ; 	pha.w
(1648) 0E7A ABB507      ; 	lda.w oldcol_090,X
(1649) 0E7D CB4401      ; 	xma.w 1,S
(1650) 0E80 CBD501      ; 	cmp.w 1,S
(1651) 0E83 C202        ; 	adj #2
(1652) 0E85 08          ; 	php
(1653) 0E86 A901        ; 	lda #1
(1654) 0E88 28          ; 	plp
(1655) 0E89 D002        ; 	bne L_095
(1656) 0E8B A900        ; 	lda #0
(1657)                  ; L_095
(1658) 0E8D CB1501      ; 	ora.w 1,S
(1659) 0E90 C202        ; 	adj #2
(1660) 0E92 AB95FB      ; 	sta.w moved_093,X
(1661)                  ; ;  293:     IF moved THEN BEGIN
(1662) 0E95 ABB5FB      ; 	lda.w moved_093,X
(1663) 0E98 ABC90100    ; 	cmp.w #1
(1664) 0E9C F003        ; 	beq L_096
(1665) 0E9E 4CF90E      ; 	jmp L_097
(1666)                  ; L_096
(1667)                  ; ;  294:         island[newrow, newcol] := newrabbit;
(1668) 0EA1 ABE2F014    ; 	psh.w #island_002
(1669) 0EA5 ABB5FF      ; 	lda.w newrow_091,X
(1670) 0EA8 AB48        ; 	pha.w
(1671) 0EAA ABE21600    ; 	psh.w #22
(1672) 0EAE 20FFFF      ; 	jsr _imul
(1673) 0EB1 C204        ; 	adj #4
(1674) 0EB3 18          ; 	clc
(1675) 0EB4 CB7501      ; 	adc.w 1,S
(1676) 0EB7 CB9501      ; 	sta.w 1,S
(1677) 0EBA ABB5FD      ; 	lda.w newcol_092,X
(1678) 0EBD AB0A        ; 	asl.w a
(1679) 0EBF 18          ; 	clc
(1680) 0EC0 CB7501      ; 	adc.w 1,S
(1681) 0EC3 CB9501      ; 	sta.w 1,S
(1682) 0EC6 A903        ; 	lda #3
(1683) 0EC8 8B6B        ; 	pli.s
(1684) 0ECA AB8300      ; 	sta.w 0,I++
(1685)                  ; ;  295:         island[oldrow, oldcol] := empty;
(1686) 0ECD ABE2F014    ; 	psh.w #island_002
(1687) 0ED1 ABB509      ; 	lda.w oldrow_089,X
(1688) 0ED4 AB48        ; 	pha.w
(1689) 0ED6 ABE21600    ; 	psh.w #22
(1690) 0EDA 20FFFF      ; 	jsr _imul
(1691) 0EDD C204        ; 	adj #4
(1692) 0EDF 18          ; 	clc
(1693) 0EE0 CB7501      ; 	adc.w 1,S
(1694) 0EE3 CB9501      ; 	sta.w 1,S
(1695) 0EE6 ABB507      ; 	lda.w oldcol_090,X
(1696) 0EE9 AB0A        ; 	asl.w a
(1697) 0EEB 18          ; 	clc
(1698) 0EEC CB7501      ; 	adc.w 1,S
(1699) 0EEF CB9501      ; 	sta.w 1,S
(1700) 0EF2 A904        ; 	lda #4
(1701) 0EF4 8B6B        ; 	pli.s
(1702) 0EF6 AB8300      ; 	sta.w 0,I++
(1703)                  ; ;  296:     END;
(1704)                  ; L_097
(1705)                  ; ;  297: 
(1706)                  ; ;  298:     {Rabbit reproduction time?}
(1707)                  ; ;  299:     IF (t MOD rabbitreprotime) = 0 THEN BEGIN
(1708) 0EF9 ABADEE16    ; 	lda.w t_008
(1709) 0EFD AB48        ; 	pha.w
(1710) 0EFF ABE20500    ; 	psh.w #5
(1711)                  ; 	pha.w
(1712) 0F03 20FFFF      ; 	jsr _idiv
(1713) 0F06 C204        ; 	adj #4
(1714) 0F08 1B          ; 	swp a
(1715) 0F09 AB48        ; 	pha.w
(1716) 0F0B A900        ; 	lda #0
(1717) 0F0D CB4401      ; 	xma.w 1,S
(1718) 0F10 CBD501      ; 	cmp.w 1,S
(1719) 0F13 C202        ; 	adj #2
(1720) 0F15 08          ; 	php
(1721) 0F16 A901        ; 	lda #1
(1722) 0F18 28          ; 	plp
(1723) 0F19 F002        ; 	beq L_100
(1724) 0F1B A900        ; 	lda #0
(1725)                  ; L_100
(1726) 0F1D ABC90100    ; 	cmp.w #1
(1727) 0F21 F003        ; 	beq L_098
(1728) 0F23 4CEB0F      ; 	jmp L_099
(1729)                  ; L_098
(1730)                  ; ;  300: 
(1731)                  ; ;  301:         {If moved, then leave behind an offspring.}
(1732)                  ; ;  302:         IF moved THEN BEGIN
(1733) 0F26 ABB5FB      ; 	lda.w moved_093,X
(1734) 0F29 ABC90100    ; 	cmp.w #1
(1735) 0F2D F003        ; 	beq L_101
(1736) 0F2F 4CEB0F      ; 	jmp L_102
(1737)                  ; L_101
(1738)                  ; ;  303:         island[oldrow, oldcol] := newrabbit;
(1739) 0F32 ABE2F014    ; 	psh.w #island_002
(1740) 0F36 ABB509      ; 	lda.w oldrow_089,X
(1741) 0F39 AB48        ; 	pha.w
(1742) 0F3B ABE21600    ; 	psh.w #22
(1743) 0F3F 20FFFF      ; 	jsr _imul
(1744) 0F42 C204        ; 	adj #4
(1745) 0F44 18          ; 	clc
(1746) 0F45 CB7501      ; 	adc.w 1,S
(1747) 0F48 CB9501      ; 	sta.w 1,S
(1748) 0F4B ABB507      ; 	lda.w oldcol_090,X
(1749) 0F4E AB0A        ; 	asl.w a
(1750) 0F50 18          ; 	clc
(1751) 0F51 CB7501      ; 	adc.w 1,S
(1752) 0F54 CB9501      ; 	sta.w 1,S
(1753) 0F57 A903        ; 	lda #3
(1754) 0F59 8B6B        ; 	pli.s
(1755) 0F5B AB8300      ; 	sta.w 0,I++
(1756)                  ; ;  304:         numrabbits := numrabbits + 1;
(1757) 0F5E ABADEA16    ; 	lda.w numrabbits_006
(1758) 0F62 AB48        ; 	pha.w
(1759) 0F64 A901        ; 	lda #1
(1760) 0F66 18          ; 	clc
(1761) 0F67 CB7501      ; 	adc.w 1,S
(1762) 0F6A C202        ; 	adj #2
(1763) 0F6C AB8DEA16    ; 	sta.w numrabbits_006
(1764)                  ; ;  305:         writeln('t =', t:4, ' : Rabbit born at ',
(1765) 0F70 ABE2EC14    ; 	psh.w #S_069
(1766) 0F74 ABE20000    ; 	psh.w #0
(1767) 0F78 ABE20300    ; 	psh.w #3
(1768) 0F7C 20FFFF      ; 	jsr _swrite
(1769) 0F7F C206        ; 	adj #6
(1770) 0F81 ABADEE16    ; 	lda.w t_008
(1771) 0F85 AB48        ; 	pha.w
(1772) 0F87 ABE20400    ; 	psh.w #4
(1773)                  ; 	pha.w
(1774) 0F8B 20FFFF      ; 	jsr _iwrite
(1775) 0F8E C204        ; 	adj #4
(1776) 0F90 ABE2A514    ; 	psh.w #S_103
(1777) 0F94 ABE20000    ; 	psh.w #0
(1778) 0F98 ABE21200    ; 	psh.w #18
(1779) 0F9C 20FFFF      ; 	jsr _swrite
(1780) 0F9F C206        ; 	adj #6
(1781)                  ; ;  306:             '[', oldrow:1, ', ', oldcol:1, ']');
(1782) 0FA1 ABE25B00    ; 	psh.w #91
(1783)                  ; 	pha.w
(1784) 0FA5 ABE20000    ; 	psh.w #0
(1785) 0FA9 20FFFF      ; 	jsr _cwrite
(1786) 0FAC C204        ; 	adj #4
(1787) 0FAE ABB509      ; 	lda.w oldrow_089,X
(1788) 0FB1 AB48        ; 	pha.w
(1789) 0FB3 ABE20100    ; 	psh.w #1
(1790)                  ; 	pha.w
(1791) 0FB7 20FFFF      ; 	jsr _iwrite
(1792) 0FBA C204        ; 	adj #4
(1793) 0FBC ABE2DA14    ; 	psh.w #S_071
(1794) 0FC0 ABE20000    ; 	psh.w #0
(1795) 0FC4 ABE20200    ; 	psh.w #2
(1796) 0FC8 20FFFF      ; 	jsr _swrite
(1797) 0FCB C206        ; 	adj #6
(1798) 0FCD ABB507      ; 	lda.w oldcol_090,X
(1799) 0FD0 AB48        ; 	pha.w
(1800) 0FD2 ABE20100    ; 	psh.w #1
(1801)                  ; 	pha.w
(1802) 0FD6 20FFFF      ; 	jsr _iwrite
(1803) 0FD9 C204        ; 	adj #4
(1804) 0FDB ABE25D00    ; 	psh.w #93
(1805)                  ; 	pha.w
(1806) 0FDF ABE20000    ; 	psh.w #0
(1807) 0FE3 20FFFF      ; 	jsr _cwrite
(1808) 0FE6 C204        ; 	adj #4
(1809) 0FE8 20FFFF      ; 	jsr _writeln
(1810)                  ; ;  307:         END;
(1811)                  ; L_102
(1812)                  ; ;  308:     END;
(1813)                  ; L_099
(1814)                  ; ;  309:     END {ProcessRabbit};
(1815) 0FEB AB9A        ; 	txs.w
(1816) 0FED ABFA        ; 	plx.w
(1817) 0FEF 60          ; 	rts
(1818)                  ; 	.end processrabbit_088
(1819)                  ; ;  310: 
(1820)                  ; ;  311: 
(1821)                  ; ;  312: PROCEDURE EventsOccur;
(1822)                  ; ;  313: 
(1823)                  ; ;  314:     {Perform the events that occur for each time unit.}
(1824)                  ; ;  315: 
(1825)                  ; ;  316:     VAR
(1826)                  ; ;  317:     row, col : index;
(1827)                  ; ;  318: 
(1828)                  ; ;  319:     BEGIN
(1829)                  ; row_105 .equ -1
(1830)                  ; col_106 .equ -3
(1831)                  ; eventsoccur_104 .sub
(1832) 0FF0 ABDA        ; 	phx.w
(1833) 0FF2 ABBA        ; 	tsx.w
(1834) 0FF4 C2FC        ; 	adj #-4
(1835)                  ; ;  320: 
(1836)                  ; ;  321:     {Scan for wolves and process each one in turn.}
(1837)                  ; ;  322:     FOR row := 1 TO size DO BEGIN
(1838) 0FF6 A901        ; 	lda #1
(1839) 0FF8 AB95FF      ; 	sta.w row_105,X
(1840)                  ; L_107
(1841) 0FFB A909        ; 	lda #9
(1842) 0FFD ABD5FF      ; 	cmp.w row_105,X
(1843) 1000 AB5003      ; 	bge L_108
(1844) 1003 4C8010      ; 	jmp L_109
(1845)                  ; L_108
(1846)                  ; ;  323:         FOR col := 1 TO size DO BEGIN
(1847) 1006 A901        ; 	lda #1
(1848) 1008 AB95FD      ; 	sta.w col_106,X
(1849)                  ; L_110
(1850) 100B A909        ; 	lda #9
(1851) 100D ABD5FD      ; 	cmp.w col_106,X
(1852) 1010 AB5003      ; 	bge L_111
(1853) 1013 4C7710      ; 	jmp L_112
(1854)                  ; L_111
(1855)                  ; ;  324:         IF island[row, col] = wolf THEN BEGIN
(1856) 1016 ABE2F014    ; 	psh.w #island_002
(1857) 101A ABB5FF      ; 	lda.w row_105,X
(1858) 101D AB48        ; 	pha.w
(1859) 101F ABE21600    ; 	psh.w #22
(1860) 1023 20FFFF      ; 	jsr _imul
(1861) 1026 C204        ; 	adj #4
(1862) 1028 18          ; 	clc
(1863) 1029 CB7501      ; 	adc.w 1,S
(1864) 102C CB9501      ; 	sta.w 1,S
(1865) 102F ABB5FD      ; 	lda.w col_106,X
(1866) 1032 AB0A        ; 	asl.w a
(1867) 1034 18          ; 	clc
(1868) 1035 CB7501      ; 	adc.w 1,S
(1869) 1038 CB9501      ; 	sta.w 1,S
(1870) 103B 8B6B        ; 	pli.s
(1871) 103D ABA300      ; 	lda.w 0,I++
(1872) 1040 AB48        ; 	pha.w
(1873) 1042 A900        ; 	lda #0
(1874) 1044 CB4401      ; 	xma.w 1,S
(1875) 1047 CBD501      ; 	cmp.w 1,S
(1876) 104A C202        ; 	adj #2
(1877) 104C 08          ; 	php
(1878) 104D A901        ; 	lda #1
(1879) 104F 28          ; 	plp
(1880) 1050 F002        ; 	beq L_115
(1881) 1052 A900        ; 	lda #0
(1882)                  ; L_115
(1883) 1054 ABC90100    ; 	cmp.w #1
(1884) 1058 F003        ; 	beq L_113
(1885) 105A 4C7110      ; 	jmp L_114
(1886)                  ; L_113
(1887)                  ; ;  325:             ProcessWolf(row, col);
(1888) 105D ABB5FF      ; 	lda.w row_105,X
(1889) 1060 AB48        ; 	pha.w
(1890) 1062 ABB5FD      ; 	lda.w col_106,X
(1891) 1065 AB48        ; 	pha.w
(1892) 1067 ABB505      ; 	lda.w STATIC_LINK,X
(1893) 106A AB48        ; 	pha.w
(1894) 106C 201D08      ; 	jsr processwolf_060
(1895) 106F C206        ; 	adj #6
(1896)                  ; ;  326:         END;
(1897)                  ; L_114
(1898)                  ; ;  327:         END;
(1899) 1071 ABF6FD      ; 	inc.w col_106,X
(1900) 1074 4C0B10      ; 	jmp L_110
(1901)                  ; L_112
(1902) 1077 ABD6FD      ; 	dec.w col_106,X
(1903)                  ; ;  328:     END;
(1904) 107A ABF6FF      ; 	inc.w row_105,X
(1905) 107D 4CFB0F      ; 	jmp L_107
(1906)                  ; L_109
(1907) 1080 ABD6FF      ; 	dec.w row_105,X
(1908)                  ; ;  329: 
(1909)                  ; ;  330: 
(1910)                  ; ;  331:     {Scan for rabbits and process each one in turn.}
(1911)                  ; ;  332:     FOR row := 1 TO size DO BEGIN
(1912) 1083 A901        ; 	lda #1
(1913) 1085 AB95FF      ; 	sta.w row_105,X
(1914)                  ; L_116
(1915) 1088 A909        ; 	lda #9
(1916) 108A ABD5FF      ; 	cmp.w row_105,X
(1917) 108D AB5003      ; 	bge L_117
(1918) 1090 4C0D11      ; 	jmp L_118
(1919)                  ; L_117
(1920)                  ; ;  333:         FOR col := 1 TO size DO BEGIN
(1921) 1093 A901        ; 	lda #1
(1922) 1095 AB95FD      ; 	sta.w col_106,X
(1923)                  ; L_119
(1924) 1098 A909        ; 	lda #9
(1925) 109A ABD5FD      ; 	cmp.w col_106,X
(1926) 109D AB5003      ; 	bge L_120
(1927) 10A0 4C0411      ; 	jmp L_121
(1928)                  ; L_120
(1929)                  ; ;  334:         IF island[row, col] = rabbit THEN BEGIN
(1930) 10A3 ABE2F014    ; 	psh.w #island_002
(1931) 10A7 ABB5FF      ; 	lda.w row_105,X
(1932) 10AA AB48        ; 	pha.w
(1933) 10AC ABE21600    ; 	psh.w #22
(1934) 10B0 20FFFF      ; 	jsr _imul
(1935) 10B3 C204        ; 	adj #4
(1936) 10B5 18          ; 	clc
(1937) 10B6 CB7501      ; 	adc.w 1,S
(1938) 10B9 CB9501      ; 	sta.w 1,S
(1939) 10BC ABB5FD      ; 	lda.w col_106,X
(1940) 10BF AB0A        ; 	asl.w a
(1941) 10C1 18          ; 	clc
(1942) 10C2 CB7501      ; 	adc.w 1,S
(1943) 10C5 CB9501      ; 	sta.w 1,S
(1944) 10C8 8B6B        ; 	pli.s
(1945) 10CA ABA300      ; 	lda.w 0,I++
(1946) 10CD AB48        ; 	pha.w
(1947) 10CF A901        ; 	lda #1
(1948) 10D1 CB4401      ; 	xma.w 1,S
(1949) 10D4 CBD501      ; 	cmp.w 1,S
(1950) 10D7 C202        ; 	adj #2
(1951) 10D9 08          ; 	php
(1952) 10DA A901        ; 	lda #1
(1953) 10DC 28          ; 	plp
(1954) 10DD F002        ; 	beq L_124
(1955) 10DF A900        ; 	lda #0
(1956)                  ; L_124
(1957) 10E1 ABC90100    ; 	cmp.w #1
(1958) 10E5 F003        ; 	beq L_122
(1959) 10E7 4CFE10      ; 	jmp L_123
(1960)                  ; L_122
(1961)                  ; ;  335:             ProcessRabbit(row, col);
(1962) 10EA ABB5FF      ; 	lda.w row_105,X
(1963) 10ED AB48        ; 	pha.w
(1964) 10EF ABB5FD      ; 	lda.w col_106,X
(1965) 10F2 AB48        ; 	pha.w
(1966) 10F4 ABB505      ; 	lda.w STATIC_LINK,X
(1967) 10F7 AB48        ; 	pha.w
(1968) 10F9 202B0E      ; 	jsr processrabbit_088
(1969) 10FC C206        ; 	adj #6
(1970)                  ; ;  336:         END;
(1971)                  ; L_123
(1972)                  ; ;  337:         END;
(1973) 10FE ABF6FD      ; 	inc.w col_106,X
(1974) 1101 4C9810      ; 	jmp L_119
(1975)                  ; L_121
(1976) 1104 ABD6FD      ; 	dec.w col_106,X
(1977)                  ; ;  338:     END;
(1978) 1107 ABF6FF      ; 	inc.w row_105,X
(1979) 110A 4C8810      ; 	jmp L_116
(1980)                  ; L_118
(1981) 110D ABD6FF      ; 	dec.w row_105,X
(1982)                  ; ;  339:     END {EventsOccur};
(1983) 1110 AB9A        ; 	txs.w
(1984) 1112 ABFA        ; 	plx.w
(1985) 1114 60          ; 	rts
(1986)                  ; 	.end eventsoccur_104
(1987)                  ; ;  340: 
(1988)                  ; ;  341: 
(1989)                  ; ;  342: PROCEDURE PrintIsland;
(1990)                  ; ;  343: 
(1991)                  ; ;  344:     {Print the island.}
(1992)                  ; ;  345: 
(1993)                  ; ;  346:     VAR
(1994)                  ; ;  347:     row, col : index;
(1995)                  ; ;  348:     cnts     : contents;
(1996)                  ; ;  349: 
(1997)                  ; ;  350:     BEGIN
(1998)                  ; row_126 .equ -1
(1999)                  ; col_127 .equ -3
(2000)                  ; cnts_128 .equ -5
(2001)                  ; printisland_125 .sub
(2002) 1115 ABDA        ; 	phx.w
(2003) 1117 ABBA        ; 	tsx.w
(2004) 1119 C2FA        ; 	adj #-6
(2005)                  ; ;  351:     writeln;
(2006) 111B 20FFFF      ; 	jsr _writeln
(2007)                  ; ;  352:     writeln('t =', t:4, ' : Wolf Island');
(2008) 111E ABE2EC14    ; 	psh.w #S_069
(2009) 1122 ABE20000    ; 	psh.w #0
(2010) 1126 ABE20300    ; 	psh.w #3
(2011) 112A 20FFFF      ; 	jsr _swrite
(2012) 112D C206        ; 	adj #6
(2013) 112F ABADEE16    ; 	lda.w t_008
(2014) 1133 AB48        ; 	pha.w
(2015) 1135 ABE20400    ; 	psh.w #4
(2016)                  ; 	pha.w
(2017) 1139 20FFFF      ; 	jsr _iwrite
(2018) 113C C204        ; 	adj #4
(2019) 113E ABE29714    ; 	psh.w #S_129
(2020) 1142 ABE20000    ; 	psh.w #0
(2021) 1146 ABE20E00    ; 	psh.w #14
(2022) 114A 20FFFF      ; 	jsr _swrite
(2023) 114D C206        ; 	adj #6
(2024) 114F 20FFFF      ; 	jsr _writeln
(2025)                  ; ;  353:     writeln;
(2026) 1152 20FFFF      ; 	jsr _writeln
(2027)                  ; ;  354: 
(2028)                  ; ;  355:     FOR row := 1 TO size DO BEGIN
(2029) 1155 A901        ; 	lda #1
(2030) 1157 AB95FF      ; 	sta.w row_126,X
(2031)                  ; L_130
(2032) 115A A909        ; 	lda #9
(2033) 115C ABD5FF      ; 	cmp.w row_126,X
(2034) 115F AB5003      ; 	bge L_131
(2035) 1162 4C5A12      ; 	jmp L_132
(2036)                  ; L_131
(2037)                  ; ;  356:         write(' ':10);
(2038) 1165 ABE22000    ; 	psh.w #32
(2039)                  ; 	pha.w
(2040) 1169 ABE20A00    ; 	psh.w #10
(2041)                  ; 	pha.w
(2042) 116D 20FFFF      ; 	jsr _cwrite
(2043) 1170 C204        ; 	adj #4
(2044)                  ; ;  357:         FOR col := 1 TO size DO BEGIN
(2045) 1172 A901        ; 	lda #1
(2046) 1174 AB95FD      ; 	sta.w col_127,X
(2047)                  ; L_133
(2048) 1177 A909        ; 	lda #9
(2049) 1179 ABD5FD      ; 	cmp.w col_127,X
(2050) 117C AB5003      ; 	bge L_134
(2051) 117F 4C4E12      ; 	jmp L_135
(2052)                  ; L_134
(2053)                  ; ;  358:         cnts := island[row, col];
(2054) 1182 ABE2F014    ; 	psh.w #island_002
(2055) 1186 ABB5FF      ; 	lda.w row_126,X
(2056) 1189 AB48        ; 	pha.w
(2057) 118B ABE21600    ; 	psh.w #22
(2058) 118F 20FFFF      ; 	jsr _imul
(2059) 1192 C204        ; 	adj #4
(2060) 1194 18          ; 	clc
(2061) 1195 CB7501      ; 	adc.w 1,S
(2062) 1198 CB9501      ; 	sta.w 1,S
(2063) 119B ABB5FD      ; 	lda.w col_127,X
(2064) 119E AB0A        ; 	asl.w a
(2065) 11A0 18          ; 	clc
(2066) 11A1 CB7501      ; 	adc.w 1,S
(2067) 11A4 CB9501      ; 	sta.w 1,S
(2068) 11A7 8B6B        ; 	pli.s
(2069) 11A9 ABA300      ; 	lda.w 0,I++
(2070) 11AC AB95FB      ; 	sta.w cnts_128,X
(2071)                  ; ;  359:         IF      cnts = empty  THEN write('. ')
(2072) 11AF ABB5FB      ; 	lda.w cnts_128,X
(2073) 11B2 AB48        ; 	pha.w
(2074) 11B4 A904        ; 	lda #4
(2075) 11B6 CB4401      ; 	xma.w 1,S
(2076) 11B9 CBD501      ; 	cmp.w 1,S
(2077) 11BC C202        ; 	adj #2
(2078) 11BE 08          ; 	php
(2079) 11BF A901        ; 	lda #1
(2080) 11C1 28          ; 	plp
(2081) 11C2 F002        ; 	beq L_138
(2082) 11C4 A900        ; 	lda #0
(2083)                  ; L_138
(2084) 11C6 ABC90100    ; 	cmp.w #1
(2085) 11CA F003        ; 	beq L_136
(2086) 11CC 4CE311      ; 	jmp L_137
(2087)                  ; L_136
(2088) 11CF ABE29514    ; 	psh.w #S_139
(2089) 11D3 ABE20000    ; 	psh.w #0
(2090) 11D7 ABE20200    ; 	psh.w #2
(2091) 11DB 20FFFF      ; 	jsr _swrite
(2092) 11DE C206        ; 	adj #6
(2093)                  ; ;  360:         ELSE IF cnts = wolf   THEN write('W ')
(2094) 11E0 4C4812      ; 	jmp L_140
(2095)                  ; L_137
(2096) 11E3 ABB5FB      ; 	lda.w cnts_128,X
(2097) 11E6 AB48        ; 	pha.w
(2098) 11E8 A900        ; 	lda #0
(2099) 11EA CB4401      ; 	xma.w 1,S
(2100) 11ED CBD501      ; 	cmp.w 1,S
(2101) 11F0 C202        ; 	adj #2
(2102) 11F2 08          ; 	php
(2103) 11F3 A901        ; 	lda #1
(2104) 11F5 28          ; 	plp
(2105) 11F6 F002        ; 	beq L_143
(2106) 11F8 A900        ; 	lda #0
(2107)                  ; L_143
(2108) 11FA ABC90100    ; 	cmp.w #1
(2109) 11FE F003        ; 	beq L_141
(2110) 1200 4C1712      ; 	jmp L_142
(2111)                  ; L_141
(2112) 1203 ABE29314    ; 	psh.w #S_144
(2113) 1207 ABE20000    ; 	psh.w #0
(2114) 120B ABE20200    ; 	psh.w #2
(2115) 120F 20FFFF      ; 	jsr _swrite
(2116) 1212 C206        ; 	adj #6
(2117)                  ; ;  361:         ELSE IF cnts = rabbit THEN write('r ')
(2118) 1214 4C4812      ; 	jmp L_145
(2119)                  ; L_142
(2120) 1217 ABB5FB      ; 	lda.w cnts_128,X
(2121) 121A AB48        ; 	pha.w
(2122) 121C A901        ; 	lda #1
(2123) 121E CB4401      ; 	xma.w 1,S
(2124) 1221 CBD501      ; 	cmp.w 1,S
(2125) 1224 C202        ; 	adj #2
(2126) 1226 08          ; 	php
(2127) 1227 A901        ; 	lda #1
(2128) 1229 28          ; 	plp
(2129) 122A F002        ; 	beq L_148
(2130) 122C A900        ; 	lda #0
(2131)                  ; L_148
(2132) 122E ABC90100    ; 	cmp.w #1
(2133) 1232 F003        ; 	beq L_146
(2134) 1234 4C4812      ; 	jmp L_147
(2135)                  ; L_146
(2136) 1237 ABE29114    ; 	psh.w #S_149
(2137) 123B ABE20000    ; 	psh.w #0
(2138) 123F ABE20200    ; 	psh.w #2
(2139) 1243 20FFFF      ; 	jsr _swrite
(2140) 1246 C206        ; 	adj #6
(2141)                  ; ;  362:         END;
(2142)                  ; L_147
(2143)                  ; L_145
(2144)                  ; L_140
(2145) 1248 ABF6FD      ; 	inc.w col_127,X
(2146) 124B 4C7711      ; 	jmp L_133
(2147)                  ; L_135
(2148) 124E ABD6FD      ; 	dec.w col_127,X
(2149)                  ; ;  363:         writeln;
(2150) 1251 20FFFF      ; 	jsr _writeln
(2151)                  ; ;  364:     END;
(2152) 1254 ABF6FF      ; 	inc.w row_126,X
(2153) 1257 4C5A11      ; 	jmp L_130
(2154)                  ; L_132
(2155) 125A ABD6FF      ; 	dec.w row_126,X
(2156)                  ; ;  365:     END {PrintIsland};
(2157) 125D AB9A        ; 	txs.w
(2158) 125F ABFA        ; 	plx.w
(2159) 1261 60          ; 	rts
(2160)                  ; 	.end printisland_125
(2161)                  ; ;  366: 
(2162)                  ; ;  367: 
(2163)                  ; ;  368: PROCEDURE ResetIsland;
(2164)                  ; ;  369: 
(2165)                  ; ;  370:     {Reset the island by setting each newwolf to wolf
(2166)                  ; ;  371:      and each newrabbit to rabbit.}
(2167)                  ; ;  372: 
(2168)                  ; ;  373:     VAR
(2169)                  ; ;  374:     row, col : index;
(2170)                  ; ;  375: 
(2171)                  ; ;  376:     BEGIN
(2172)                  ; row_151 .equ -1
(2173)                  ; col_152 .equ -3
(2174)                  ; resetisland_150 .sub
(2175) 1262 ABDA        ; 	phx.w
(2176) 1264 ABBA        ; 	tsx.w
(2177) 1266 C2FC        ; 	adj #-4
(2178)                  ; ;  377:     FOR row := 1 TO size DO BEGIN
(2179) 1268 A901        ; 	lda #1
(2180) 126A AB95FF      ; 	sta.w row_151,X
(2181)                  ; L_153
(2182) 126D A909        ; 	lda #9
(2183) 126F ABD5FF      ; 	cmp.w row_151,X
(2184) 1272 AB5003      ; 	bge L_154
(2185) 1275 4C8013      ; 	jmp L_155
(2186)                  ; L_154
(2187)                  ; ;  378:         FOR col := 1 TO size DO BEGIN
(2188) 1278 A901        ; 	lda #1
(2189) 127A AB95FD      ; 	sta.w col_152,X
(2190)                  ; L_156
(2191) 127D A909        ; 	lda #9
(2192) 127F ABD5FD      ; 	cmp.w col_152,X
(2193) 1282 AB5003      ; 	bge L_157
(2194) 1285 4C7713      ; 	jmp L_158
(2195)                  ; L_157
(2196)                  ; ;  379:         IF island[row, col] = newwolf THEN BEGIN
(2197) 1288 ABE2F014    ; 	psh.w #island_002
(2198) 128C ABB5FF      ; 	lda.w row_151,X
(2199) 128F AB48        ; 	pha.w
(2200) 1291 ABE21600    ; 	psh.w #22
(2201) 1295 20FFFF      ; 	jsr _imul
(2202) 1298 C204        ; 	adj #4
(2203) 129A 18          ; 	clc
(2204) 129B CB7501      ; 	adc.w 1,S
(2205) 129E CB9501      ; 	sta.w 1,S
(2206) 12A1 ABB5FD      ; 	lda.w col_152,X
(2207) 12A4 AB0A        ; 	asl.w a
(2208) 12A6 18          ; 	clc
(2209) 12A7 CB7501      ; 	adc.w 1,S
(2210) 12AA CB9501      ; 	sta.w 1,S
(2211) 12AD 8B6B        ; 	pli.s
(2212) 12AF ABA300      ; 	lda.w 0,I++
(2213) 12B2 AB48        ; 	pha.w
(2214) 12B4 A902        ; 	lda #2
(2215) 12B6 CB4401      ; 	xma.w 1,S
(2216) 12B9 CBD501      ; 	cmp.w 1,S
(2217) 12BC C202        ; 	adj #2
(2218) 12BE 08          ; 	php
(2219) 12BF A901        ; 	lda #1
(2220) 12C1 28          ; 	plp
(2221) 12C2 F002        ; 	beq L_161
(2222) 12C4 A900        ; 	lda #0
(2223)                  ; L_161
(2224) 12C6 ABC90100    ; 	cmp.w #1
(2225) 12CA F003        ; 	beq L_159
(2226) 12CC 4CFE12      ; 	jmp L_160
(2227)                  ; L_159
(2228)                  ; ;  380:             island[row, col] := wolf;
(2229) 12CF ABE2F014    ; 	psh.w #island_002
(2230) 12D3 ABB5FF      ; 	lda.w row_151,X
(2231) 12D6 AB48        ; 	pha.w
(2232) 12D8 ABE21600    ; 	psh.w #22
(2233) 12DC 20FFFF      ; 	jsr _imul
(2234) 12DF C204        ; 	adj #4
(2235) 12E1 18          ; 	clc
(2236) 12E2 CB7501      ; 	adc.w 1,S
(2237) 12E5 CB9501      ; 	sta.w 1,S
(2238) 12E8 ABB5FD      ; 	lda.w col_152,X
(2239) 12EB AB0A        ; 	asl.w a
(2240) 12ED 18          ; 	clc
(2241) 12EE CB7501      ; 	adc.w 1,S
(2242) 12F1 CB9501      ; 	sta.w 1,S
(2243) 12F4 A900        ; 	lda #0
(2244) 12F6 8B6B        ; 	pli.s
(2245) 12F8 AB8300      ; 	sta.w 0,I++
(2246)                  ; ;  381:         END
(2247)                  ; ;  382:         ELSE IF island[row, col] = newrabbit THEN BEGIN
(2248) 12FB 4C7113      ; 	jmp L_162
(2249)                  ; L_160
(2250) 12FE ABE2F014    ; 	psh.w #island_002
(2251) 1302 ABB5FF      ; 	lda.w row_151,X
(2252) 1305 AB48        ; 	pha.w
(2253) 1307 ABE21600    ; 	psh.w #22
(2254) 130B 20FFFF      ; 	jsr _imul
(2255) 130E C204        ; 	adj #4
(2256) 1310 18          ; 	clc
(2257) 1311 CB7501      ; 	adc.w 1,S
(2258) 1314 CB9501      ; 	sta.w 1,S
(2259) 1317 ABB5FD      ; 	lda.w col_152,X
(2260) 131A AB0A        ; 	asl.w a
(2261) 131C 18          ; 	clc
(2262) 131D CB7501      ; 	adc.w 1,S
(2263) 1320 CB9501      ; 	sta.w 1,S
(2264) 1323 8B6B        ; 	pli.s
(2265) 1325 ABA300      ; 	lda.w 0,I++
(2266) 1328 AB48        ; 	pha.w
(2267) 132A A903        ; 	lda #3
(2268) 132C CB4401      ; 	xma.w 1,S
(2269) 132F CBD501      ; 	cmp.w 1,S
(2270) 1332 C202        ; 	adj #2
(2271) 1334 08          ; 	php
(2272) 1335 A901        ; 	lda #1
(2273) 1337 28          ; 	plp
(2274) 1338 F002        ; 	beq L_165
(2275) 133A A900        ; 	lda #0
(2276)                  ; L_165
(2277) 133C ABC90100    ; 	cmp.w #1
(2278) 1340 F003        ; 	beq L_163
(2279) 1342 4C7113      ; 	jmp L_164
(2280)                  ; L_163
(2281)                  ; ;  383:             island[row, col] := rabbit;
(2282) 1345 ABE2F014    ; 	psh.w #island_002
(2283) 1349 ABB5FF      ; 	lda.w row_151,X
(2284) 134C AB48        ; 	pha.w
(2285) 134E ABE21600    ; 	psh.w #22
(2286) 1352 20FFFF      ; 	jsr _imul
(2287) 1355 C204        ; 	adj #4
(2288) 1357 18          ; 	clc
(2289) 1358 CB7501      ; 	adc.w 1,S
(2290) 135B CB9501      ; 	sta.w 1,S
(2291) 135E ABB5FD      ; 	lda.w col_152,X
(2292) 1361 AB0A        ; 	asl.w a
(2293) 1363 18          ; 	clc
(2294) 1364 CB7501      ; 	adc.w 1,S
(2295) 1367 CB9501      ; 	sta.w 1,S
(2296) 136A A901        ; 	lda #1
(2297) 136C 8B6B        ; 	pli.s
(2298) 136E AB8300      ; 	sta.w 0,I++
(2299)                  ; ;  384:         END;
(2300)                  ; L_164
(2301)                  ; L_162
(2302)                  ; ;  385:         END;
(2303) 1371 ABF6FD      ; 	inc.w col_152,X
(2304) 1374 4C7D12      ; 	jmp L_156
(2305)                  ; L_158
(2306) 1377 ABD6FD      ; 	dec.w col_152,X
(2307)                  ; ;  386:     END;
(2308) 137A ABF6FF      ; 	inc.w row_151,X
(2309) 137D 4C6D12      ; 	jmp L_153
(2310)                  ; L_155
(2311) 1380 ABD6FF      ; 	dec.w row_151,X
(2312)                  ; ;  387:     END {ResetIsland};
(2313) 1383 AB9A        ; 	txs.w
(2314) 1385 ABFA        ; 	plx.w
(2315) 1387 60          ; 	rts
(2316)                  ; 	.end resetisland_150
(2317)                  ; ;  388: 
(2318)                  ; ;  389: 
(2319)                  ; ;  390: BEGIN {WolfIsland}
(2320)                  ; _pc65_main .sub
(2321) 1388 ABDA        ; 	phx.w
(2322) 138A ABBA        ; 	tsx.w
(2323)                  ; ;  391: 
(2324)                  ; ;  392:     Initialize;
(2325) 138C ABDA        ; 	phx.w
(2326) 138E 201F02      ; 	jsr initialize_013
(2327) 1391 C202        ; 	adj #2
(2328)                  ; ;  393: 
(2329)                  ; ;  394:     t   := 0;
(2330) 1393 A900        ; 	lda #0
(2331) 1395 AB8DEE16    ; 	sta.w t_008
(2332)                  ; ;  395:     xpt := 1;
(2333) 1399 A901        ; 	lda #1
(2334) 139B AB8DF016    ; 	sta.w xpt_009
(2335)                  ; ;  396:     read(seed);
(2336) 139F ABE2F216    ; 	psh.w #seed_010
(2337) 13A3 20FFFF      ; 	jsr _iread
(2338) 13A6 8B6B        ; 	pli.s
(2339) 13A8 AB8300      ; 	sta.w 0,I++
(2340)                  ; ;  397: 
(2341)                  ; ;  398:     PrintIsland;
(2342) 13AB ABDA        ; 	phx.w
(2343) 13AD 201511      ; 	jsr printisland_125
(2344) 13B0 C202        ; 	adj #2
(2345)                  ; ;  399: 
(2346)                  ; ;  400:     {Loop once per time period.}
(2347)                  ; ;  401:     REPEAT
(2348)                  ; L_166
(2349)                  ; ;  402:     writeln;
(2350) 13B2 20FFFF      ; 	jsr _writeln
(2351)                  ; ;  403: 
(2352)                  ; ;  404:     t := t + 1;
(2353) 13B5 ABADEE16    ; 	lda.w t_008
(2354) 13B9 AB48        ; 	pha.w
(2355) 13BB A901        ; 	lda #1
(2356) 13BD 18          ; 	clc
(2357) 13BE CB7501      ; 	adc.w 1,S
(2358) 13C1 C202        ; 	adj #2
(2359) 13C3 AB8DEE16    ; 	sta.w t_008
(2360)                  ; ;  405:     EventsOccur;
(2361) 13C7 ABDA        ; 	phx.w
(2362) 13C9 20F00F      ; 	jsr eventsoccur_104
(2363) 13CC C202        ; 	adj #2
(2364)                  ; ;  406:     ResetIsland;
(2365) 13CE ABDA        ; 	phx.w
(2366) 13D0 206212      ; 	jsr resetisland_150
(2367) 13D3 C202        ; 	adj #2
(2368)                  ; ;  407: 
(2369)                  ; ;  408:     {Time to print the island?}
(2370)                  ; ;  409:     IF t = printtimes[xpt] THEN BEGIN
(2371) 13D5 ABADEE16    ; 	lda.w t_008
(2372) 13D9 AB48        ; 	pha.w
(2373) 13DB ABE28416    ; 	psh.w #printtimes_004
(2374) 13DF ABADF016    ; 	lda.w xpt_009
(2375) 13E3 AB3A        ; 	dec.w a
(2376) 13E5 AB0A        ; 	asl.w a
(2377) 13E7 18          ; 	clc
(2378) 13E8 CB7501      ; 	adc.w 1,S
(2379) 13EB CB9501      ; 	sta.w 1,S
(2380) 13EE 8B6B        ; 	pli.s
(2381) 13F0 ABA300      ; 	lda.w 0,I++
(2382) 13F3 CB4401      ; 	xma.w 1,S
(2383) 13F6 CBD501      ; 	cmp.w 1,S
(2384) 13F9 C202        ; 	adj #2
(2385) 13FB 08          ; 	php
(2386) 13FC A901        ; 	lda #1
(2387) 13FE 28          ; 	plp
(2388) 13FF F002        ; 	beq L_170
(2389) 1401 A900        ; 	lda #0
(2390)                  ; L_170
(2391) 1403 ABC90100    ; 	cmp.w #1
(2392) 1407 F003        ; 	beq L_168
(2393) 1409 4C2514      ; 	jmp L_169
(2394)                  ; L_168
(2395)                  ; ;  410:         PrintIsland;
(2396) 140C ABDA        ; 	phx.w
(2397) 140E 201511      ; 	jsr printisland_125
(2398) 1411 C202        ; 	adj #2
(2399)                  ; ;  411:         xpt := xpt + 1;
(2400) 1413 ABADF016    ; 	lda.w xpt_009
(2401) 1417 AB48        ; 	pha.w
(2402) 1419 A901        ; 	lda #1
(2403) 141B 18          ; 	clc
(2404) 141C CB7501      ; 	adc.w 1,S
(2405) 141F C202        ; 	adj #2
(2406) 1421 AB8DF016    ; 	sta.w xpt_009
(2407)                  ; ;  412:     END;
(2408)                  ; L_169
(2409)                  ; ;  413:     UNTIL (numwolves = 0) OR (numrabbits = 0)
(2410) 1425 ABADE816    ; 	lda.w numwolves_005
(2411) 1429 AB48        ; 	pha.w
(2412) 142B A900        ; 	lda #0
(2413) 142D CB4401      ; 	xma.w 1,S
(2414) 1430 CBD501      ; 	cmp.w 1,S
(2415) 1433 C202        ; 	adj #2
(2416) 1435 08          ; 	php
(2417) 1436 A901        ; 	lda #1
(2418) 1438 28          ; 	plp
(2419) 1439 F002        ; 	beq L_171
(2420) 143B A900        ; 	lda #0
(2421)                  ; L_171
(2422) 143D AB48        ; 	pha.w
(2423) 143F ABADEA16    ; 	lda.w numrabbits_006
(2424) 1443 AB48        ; 	pha.w
(2425) 1445 A900        ; 	lda #0
(2426) 1447 CB4401      ; 	xma.w 1,S
(2427) 144A CBD501      ; 	cmp.w 1,S
(2428) 144D C202        ; 	adj #2
(2429) 144F 08          ; 	php
(2430) 1450 A901        ; 	lda #1
(2431) 1452 28          ; 	plp
(2432) 1453 F002        ; 	beq L_172
(2433) 1455 A900        ; 	lda #0
(2434)                  ; L_172
(2435)                  ; ;  414:       OR (xpt > numprinttimes);
(2436) 1457 CB1501      ; 	ora.w 1,S
(2437) 145A C202        ; 	adj #2
(2438) 145C AB48        ; 	pha.w
(2439) 145E ABADF016    ; 	lda.w xpt_009
(2440) 1462 AB48        ; 	pha.w
(2441) 1464 ABADEC16    ; 	lda.w numprinttimes_007
(2442) 1468 CB4401      ; 	xma.w 1,S
(2443) 146B CBD501      ; 	cmp.w 1,S
(2444) 146E C202        ; 	adj #2
(2445) 1470 08          ; 	php
(2446) 1471 A901        ; 	lda #1
(2447) 1473 28          ; 	plp
(2448) 1474 AB1002      ; 	bgt L_173
(2449) 1477 A900        ; 	lda #0
(2450)                  ; L_173
(2451) 1479 CB1501      ; 	ora.w 1,S
(2452) 147C C202        ; 	adj #2
(2453) 147E ABC90100    ; 	cmp.w #1
(2454) 1482 F003        ; 	beq L_167
(2455) 1484 4CB213      ; 	jmp L_166
(2456)                  ; L_167
(2457)                  ; ;  415: 
(2458)                  ; ;  416:     PrintIsland;
(2459) 1487 ABDA        ; 	phx.w
(2460) 1489 201511      ; 	jsr printisland_125
(2461) 148C C202        ; 	adj #2
(2462)                  ; ;  417: 
(2463)                  ; ;  418: END {WolfIsland}.
(2464) 148E ABFA        ; 	plx.w
(2465) 1490 60          ; 	rts
(2466)                  ; 	.end _pc65_main
(2467)                  ; 
(2468)                  ; 	.dat
(2469)                  ; 
(2470) 1491 7220        ; S_149 .str "r "
(2471) 1493 5720        ; S_144 .str "W "
(2472) 1495 2E20        ; S_139 .str ". "
(2473) 1497 203A2057    ; S_129 .str " : Wolf Island"
       149B 6F6C662049736C616E64
(2474) 14A5 203A2052    ; S_103 .str " : Rabbit born at "
       14A9 616262697420626F726E20617420
(2475) 14B7 203A2057    ; S_087 .str " : Wolf born at "
       14BB 6F6C6620626F726E20617420
(2476) 14C7 203A2052    ; S_080 .str " : Rabbit eaten at "
       14CB 616262697420656174656E20617420
(2477) 14DA 2C20        ; S_071 .str ", "
(2478) 14DC 203A2057    ; S_070 .str " : Wolf died at "
       14E0 6F6C66206469656420617420
(2479) 14EC 74203D      ; S_069 .str "t ="
(2480) 14EF 00          ; _bss_start .byt 1
(2481) 14F0 00000000    ; island_002 .byt 242
       14F4 0000000000000000000000000000000000000000000000000000000000000000
       1514 0000000000000000000000000000000000000000000000000000000000000000
       1534 0000000000000000000000000000000000000000000000000000000000000000
       1554 0000000000000000000000000000000000000000000000000000000000000000
       1574 0000000000000000000000000000000000000000000000000000000000000000
       1594 0000000000000000000000000000000000000000000000000000000000000000
       15B4 0000000000000000000000000000000000000000000000000000000000000000
       15D4 0000000000000000000000000000
(2482) 15E2 00000000    ; foodunits_003 .byt 162
       15E6 0000000000000000000000000000000000000000000000000000000000000000
       1606 0000000000000000000000000000000000000000000000000000000000000000
       1626 0000000000000000000000000000000000000000000000000000000000000000
       1646 0000000000000000000000000000000000000000000000000000000000000000
       1666 000000000000000000000000000000000000000000000000000000000000
(2483) 1684 00000000    ; printtimes_004 .byt 100
       1688 0000000000000000000000000000000000000000000000000000000000000000
       16A8 0000000000000000000000000000000000000000000000000000000000000000
       16C8 0000000000000000000000000000000000000000000000000000000000000000
(2484) 16E8 0000        ; numwolves_005 .wrd 1
(2485) 16EA 0000        ; numrabbits_006 .wrd 1
(2486) 16EC 0000        ; numprinttimes_007 .wrd 1
(2487) 16EE 0000        ; t_008 .wrd 1
(2488) 16F0 0000        ; xpt_009 .wrd 1
(2489) 16F2 0000        ; seed_010 .wrd 1
(2490) 16F4 00000000    ; rowoffset_011 .byt 10
       16F8 000000000000
(2491) 16FE 00000000    ; coloffset_012 .byt 10
       1702 000000000000
(2492) 1708 00          ; _bss_end .byt 1
(2493) 1709 00000000    ; _stk .byt 1023
       170D 0000000000000000000000000000000000000000000000000000000000000000
       172D 0000000000000000000000000000000000000000000000000000000000000000
       174D 0000000000000000000000000000000000000000000000000000000000000000
       176D 0000000000000000000000000000000000000000000000000000000000000000
       178D 0000000000000000000000000000000000000000000000000000000000000000
       17AD 0000000000000000000000000000000000000000000000000000000000000000
       17CD 0000000000000000000000000000000000000000000000000000000000000000
       17ED 0000000000000000000000000000000000000000000000000000000000000000
       180D 0000000000000000000000000000000000000000000000000000000000000000
       182D 0000000000000000000000000000000000000000000000000000000000000000
       184D 0000000000000000000000000000000000000000000000000000000000000000
       186D 0000000000000000000000000000000000000000000000000000000000000000
       188D 0000000000000000000000000000000000000000000000000000000000000000
       18AD 0000000000000000000000000000000000000000000000000000000000000000
       18CD 0000000000000000000000000000000000000000000000000000000000000000
       18ED 0000000000000000000000000000000000000000000000000000000000000000
       190D 0000000000000000000000000000000000000000000000000000000000000000
       192D 0000000000000000000000000000000000000000000000000000000000000000
       194D 0000000000000000000000000000000000000000000000000000000000000000
       196D 0000000000000000000000000000000000000000000000000000000000000000
       198D 0000000000000000000000000000000000000000000000000000000000000000
       19AD 0000000000000000000000000000000000000000000000000000000000000000
       19CD 0000000000000000000000000000000000000000000000000000000000000000
       19ED 0000000000000000000000000000000000000000000000000000000000000000
       1A0D 0000000000000000000000000000000000000000000000000000000000000000
       1A2D 0000000000000000000000000000000000000000000000000000000000000000
       1A4D 0000000000000000000000000000000000000000000000000000000000000000
       1A6D 0000000000000000000000000000000000000000000000000000000000000000
       1A8D 0000000000000000000000000000000000000000000000000000000000000000
       1AAD 0000000000000000000000000000000000000000000000000000000000000000
       1ACD 0000000000000000000000000000000000000000000000000000000000000000
       1AED 000000000000000000000000000000000000000000000000000000
(2494) 1B08 00          ; _stk_top .byt 1
(2495)                  ; 
(2496)                  ; 	.end
