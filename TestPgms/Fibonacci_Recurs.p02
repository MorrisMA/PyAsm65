[   0]    2 	.stk 1024
[   1]    3 	.cod 512
[   2]    4 STATIC_LINK .equ +5
[   3]    5 RETURN_VALUE .equ -3
[   4]    6 HIGH_RETURN_VALUE .equ -1
[   5]    7 _start
[   6]    8 	tsx.w		; Preserve original stack pointer
[   7]    9 	lds.w #_stk_top	; Initialize program stack pointer
[   8]   10 	stz _bss_start
[   9]   11 	ldx.w #_bss_start
[  10]   12 	ldy.w #_bss_start+1
[  11]   13 	lda.w #_stk_top
[  12]   14 	sec
[  13]   15 	sbc.w #_bss_start
[  14]   16 	mov #10
[  15]   17 	jmp _pc65_main
[  16]   28 n_006 .equ +7
[  17]   29 fib_005 .sub
[  18]   30 	phx.w
[  19]   31 	tsx.w
[  20]   32 	adj #-4
[  21]   35 	lda.w n_006,X
[  22]   36 	asl.w a
[  23]   37 	clc
[  24]   38 	adc.w #fn_004
[  25]   39 	tai 
[  26]   41 	lda.w 0,I++
[  27]   45 	cmp.w #0
[  28]   47 	beq L_009T
[  29]   48 	lda #0
[  30]   49 	bra L_009
[  31]   50 L_009T .byt 234[2]
[  32]   51 	lda #1
[  33]   52 L_009
[  34]   54 	bne L_007
[  35]   55 	jmp L_008
[  36]   56 L_007
[  37]   59 	lda.w n_006,X
[  38]   60 	asl.w a
[  39]   61 	clc
[  40]   62 	adc.w #fn_004
[  41]   63 	pha.w
[  42]   64 	lda.w n_006,X
[  43]   69 	dec.w a
[  44]   71 	pha.w
[  45]   72 	lda.w STATIC_LINK,X
[  46]   73 	pha.w
[  47]   74 	jsr fib_005
[  48]   75 	adj #4
[  49]   76 	pha.w
[  50]   78 	lda.w n_006,X
[  51]   82 	sec
[  52]   83 	sbc.w #2
[  53]   85 	asl.w a
[  54]   86 	tay.w 
[  55]   90 	lda.w fn_004,Y
[  56]   91 	clc
[  57]   92 	adc.w 1,S
[  58]   93 	adj #2
[  59]   94 	pli.s
[  60]   95 	sta.w 0,I++
[  61]   96 L_008
[  62]   99 	lda.w n_006,X
[  63]  100 	asl.w a
[  64]  101 	clc
[  65]  102 	adc.w #fn_004
[  66]  103 	tai 
[  67]  105 	lda.w 0,I++
[  68]  106 	sta.w RETURN_VALUE,X
[  69]  108 	lda.w RETURN_VALUE,X
[  70]  109 	txs.w
[  71]  110 	plx.w
[  72]  111 	rts
[  73]  112 	.end fib_005
[  74]  115 _pc65_main .sub
[  75]  116 	phx.w
[  76]  117 	tsx.w
[  77]  120 	lda #0
[  78]  121 	asl.w a
[  79]  122 	clc
[  80]  123 	adc.w #fn_004
[  81]  124 	tai 
[  82]  125 	lda #1
[  83]  127 	sta.w 0,I++
[  84]  130 	lda #1
[  85]  131 	asl.w a
[  86]  132 	clc
[  87]  133 	adc.w #fn_004
[  88]  134 	tai 
[  89]  135 	lda #1
[  90]  137 	sta.w 0,I++
[  91]  139 	lda #2
[  92]  140 	sta.w i_002
[  93]  141 L_010
[  94]  142 	lda #23
[  95]  143 	cmp.w i_002
[  96]  144 	bge L_011
[  97]  145 	jmp L_012
[  98]  146 L_011
[  99]  148 	lda.w i_002
[ 100]  149 	asl.w a
[ 101]  150 	clc
[ 102]  151 	adc.w #fn_004
[ 103]  152 	tai 
[ 104]  153 	lda #0
[ 105]  155 	sta.w 0,I++
[ 106]  156 	inc.w i_002
[ 107]  157 	jmp L_010
[ 108]  158 L_012
[ 109]  159 	dec.w i_002
[ 110]  171 	lda #23
[ 111]  172 	sta.w i_002
[ 112]  175 	psh.w #22
[ 113]  176 	phx.w
[ 114]  177 	jsr fib_005
[ 115]  178 	adj #4
[ 116]  179 	sta.w j_003
[ 117]  181 	psh.w #S_013
[ 118]  182 	psh.w #0
[ 119]  183 	psh.w #4
[ 120]  184 	jsr _swrite
[ 121]  185 	adj #6
[ 122]  187 	lda.w i_002
[ 123]  188 	pha.w
[ 124]  190 	psh.w #2
[ 125]  191 	jsr _iwrite
[ 126]  192 	adj #4
[ 127]  194 	psh.w #S_014
[ 128]  195 	psh.w #0
[ 129]  196 	psh.w #4
[ 130]  197 	jsr _swrite
[ 131]  198 	adj #6
[ 132]  200 	lda.w j_003
[ 133]  201 	pha.w
[ 134]  203 	psh.w #5
[ 135]  204 	jsr _iwrite
[ 136]  205 	adj #4
[ 137]  209 	jsr _writeln
[ 138]  210 	plx.w
[ 139]  211 	rts
[ 140]  212 	.end _pc65_main
[ 141]  217             .cod
[ 142]  219 _Q          .equ    5
[ 143]  220 _D          .equ    3
[ 144]  222 _idiv       .proc
[ 145]  223             lda #0          ; clear remainder (A)
[ 146]  224             dup a           ; push
[ 147]  225             lda.w _Q,S      ; load dividend (Q)
[ 148]  226             ldy #16         ; bit counter
[ 149]  228 _idiv_Lp
[ 150]  229             clc
[ 151]  230             asl.w a         ; shift AQ left
[ 152]  231             swp a
[ 153]  232             rol.w a
[ 154]  234             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
[ 155]  236 _idiv_Minus
[ 156]  237             sec
[ 157]  238             sbc.w _D,S      ; subtract divisor (D)
[ 158]  240             bra _idiv_Next
[ 159]  242 _idiv_Plus
[ 160]  243             clc
[ 161]  244             adc.w _D,S      ; add divisor (D)
[ 162]  246 _idiv_Next
[ 163]  247             swp a           ; restore order of Acc stack {Q, A, -}
[ 164]  248             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
[ 165]  249             inc.w a
[ 166]  251 _idiv_Dec
[ 167]  252             dey             ; loop until loop counter == 0
[ 168]  253             bne _idiv_Lp
[ 169]  255 _idiv_Exit
[ 170]  256             swp a           ; Test remainder
[ 171]  257             ora.w #0
[ 172]  258             bpl _idiv_Finish
[ 173]  259             clc
[ 174]  260             adc.w 3,S
[ 175]  261 _idiv_Finish
[ 176]  262             swp a
[ 177]  264             rts
[ 178]  266             .endp _idiv
[ 179]  271             .cod
[ 180]  273 _M          .equ    5
[ 181]  274 _R          .equ    3
[ 182]  276 _imul       .proc
[ 183]  277             ldy #16             ; y = bit count
[ 184]  278             lda #0              ; A = { 0,  x,  x} - clear product
[ 185]  279             dup a               ; A = { 0,  0,  x}
[ 186]  280             dup a               ; A = { 0,  0,  0}
[ 187]  281             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
[ 188]  282             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
[ 189]  283             ora.w #0            ; set N flag if msb ATOS == 1
[ 190]  284             clc                 ; initialize Booth recoding bit
[ 191]  285             rot a               ; A = {PH, PL, `R}
[ 192]  287             bra _imul_TstB
[ 193]  289 _imul_Lp
[ 194]  290             asl.w a             ; A = {`R << 1, PH, PL}
[ 195]  291             rot a               ; A = {PH, PL, `R}
[ 196]  292 _imul_TstB
[ 197]  293             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
[ 198]  295 _imul_AddShft
[ 199]  296             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
[ 200]  297 _imul_AddM
[ 201]  298             clc
[ 202]  299             adc.w _M,S          ; PH += M
[ 203]  300             bra _imul_ShftP
[ 204]  302 _imul_SubShft
[ 205]  303             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
[ 206]  304 _imul_SubM
[ 207]  305             sec
[ 208]  306             sbc.w _M,S          ; PH -= M
[ 209]  308 _imul_ShftP
[ 210]  309             asr.w a             ; A = {PH >> 1, PL, `R}
[ 211]  310             rot a               ; A = {PL, `R, PH}
[ 212]  311             ror.w a             ; A = {PL >> 2, `R, PH}
[ 213]  312             rot a               ; A = {`R, PH, PL}
[ 214]  314 _imul_Dec
[ 215]  315             dey
[ 216]  316             bne _imul_Lp
[ 217]  318 _imul_Exit
[ 218]  319             rot a               ; A = {PH, PL, `R}
[ 219]  320             swp a               ; A = {PL, PH, `R}
[ 220]  322             rts
[ 221]  324             .endp _imul
[ 222]  329             .cod
[ 223]  331 _newLine    .equ    0x0A
[ 224]  332 _putChar    .equ    0xF001
[ 225]  334 _writeln    .proc
[ 226]  335             lda #_newLine
[ 227]  336             sta _putChar
[ 228]  338             rts
[ 229]  340             .endp _writeln
[ 230]  344             .cod
[ 231]  346 _sPtrOff    .equ    7
[ 232]  347 _sLenOff    .equ    3
[ 233]  349 _swrite     .proc
[ 234]  350             ldy.w _sLenOff,S        ; load string length
[ 235]  351             lda.w _sPtrOff,S        ; load string pointer
[ 236]  352             tai                     ; transfer sptr to IP
[ 237]  354 _swrite_Lp
[ 238]  355             lda 0,I++               ; load char from strig
[ 239]  356             sta _putChar            ; write char to output
[ 240]  358             dey.w                   ; loop while string length <> 0
[ 241]  359             bne _swrite_Lp
[ 242]  361             rts
[ 243]  363             .endp _swrite
[ 244]  367             .cod
[ 245]  369 _iValOff    .equ    7
[ 246]  370 _fLenOff    .equ    5
[ 247]  371 _iCntOff    .equ    -1
[ 248]  373 _iwrite     .proc
[ 249]  374             phx.w                   ; save current base pointer
[ 250]  375             tsx.w                   ; assign new base pointer
[ 251]  377             lda _fLenOff,X          ; load field width specifier
[ 252]  378             cmp #5                  ; compare against max integer digit count
[ 253]  379             ble _iwrite_SetCnt
[ 254]  380             lda #5
[ 255]  382 _iwrite_SetCnt
[ 256]  383             pha.w                   ; set iteration count to fld width
[ 257]  384             lda.w _iValOff,X        ; load a with integer value
[ 258]  386 _iwrite_Lp
[ 259]  387             pha.w                   ; push dividend argument to _idiv
[ 260]  388             psh.w #10               ; push divisor argument to _idiv
[ 261]  389             csr _idiv               ; determine the remainder,
[ 262]  390             adj #4                  ; remove arguments passed to _idiv from stk
[ 263]  391             swp a                   ; put the remainder into ATOS
[ 264]  393             clc                     ; convert remainder into ASCII character
[ 265]  394             adc #48
[ 266]  395             pha                     ; push LS digit of integer onto stack
[ 267]  397             rot a                   ; rotate quotient into ATOS position
[ 268]  399             dec.w _iCntOff,X        ; decrement digit iteration count
[ 269]  400             bne _iwrite_Lp
[ 270]  402             dup a                   ; save integer part of the conversion
[ 271]  404 _iwrite_Fill
[ 272]  405             lda _fLenOff,X          ; load field width specifier
[ 273]  406             cmp #5                  ; compare against max integer digit count
[ 274]  407             ble _iwrite_GenPtr
[ 275]  408             sec                     ; subtract max integer length from fld len
[ 276]  409             sbc #5
[ 277]  410             tay                     ; set difference as loop counter
[ 278]  411             lda #48                 ; fill remaining field with '0'
[ 279]  413 _iwrite_Fill_Lp                     ; increase string on stack with fill data
[ 280]  414             pha
[ 281]  415             dey
[ 282]  416             bne _iwrite_Fill_Lp
[ 283]  418 _iwrite_GenPtr
[ 284]  419             tsa.w                   ; transfer current stk pointer to A
[ 285]  420             inc.w a                 ; remove stack pointer write bias
[ 286]  421             pha.w                   ; push string pointer to stack
[ 287]  423             rot a                   ; restore integer part of the conversion
[ 288]  425             cmp.w #0                ; test for 0. If not 0, int > 10^fld
[ 289]  426             beq _iwrite_Sup0
[ 290]  427             ldy #0
[ 291]  428 _iwrite_ErrLp
[ 292]  429             lda #0x2A               ; fill integer field with '*'
[ 293]  430             sta (1,S),Y
[ 294]  431             iny
[ 295]  432             cmp.y _fLenOff,X
[ 296]  433             bne _iwrite_ErrLp
[ 297]  434             bra _iwrite_Exit
[ 298]  436 _iwrite_Sup0
[ 299]  437             ldy #0                  ; initialize string index
[ 300]  438 _iwrite_Sup0_Lp
[ 301]  439             lda (1,S),Y
[ 302]  440             cmp #48                 ; if leading position == 0, replace with ' '
[ 303]  441             bne _iwrite_Exit        ; exit loop on first non-0 digit
[ 304]  442             lda #32                 ; replace leading 0 with ' '
[ 305]  443             sta (1,S),Y
[ 306]  444             iny                     ; increment string index and compare to fLen
[ 307]  445             cmp.y _fLenOff,X
[ 308]  446             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
[ 309]  448 _iwrite_Exit
[ 310]  449             psh.w #0                ; NULL argument
[ 311]  450             lda _fLenOff,X          ; push field width specifier
[ 312]  451             pha.w
[ 313]  452             csr _swrite             ; write integer value string using _swrite()
[ 314]  453             adj #6                  ; remove parameters to _swrite() from stack
[ 315]  455             txs.w                   ; deallocate stack variables
[ 316]  456             plx.w                   ; restore previous base pointer
[ 317]  457             rts
[ 318]  459             .endp _iwrite
[ 319]  461 	.dat
[ 320]  463 S_014 .str "] = "
[ 321]  464 S_013 .str "Fib["
[ 322]  465 _bss_start .byt 0
[ 323]  466 i_002 .wrd 0
[ 324]  467 j_003 .wrd 0
[ 325]  468 fn_004 .byt 0[48]
[ 326]  469 _bss_end .byt 0
[ 327]  470 _stk .byt 0[1023]
[ 328]  471 _stk_top .byt -1
[ 329]  473 	.end
