[   0]    2     .stk 1024
[   1]    3     .cod 512
[   2]    4 STATIC_LINK .equ +5
[   3]    5 RETURN_VALUE .equ -3
[   4]    6 HIGH_RETURN_VALUE .equ -1
[   5]    7 _start
[   6]    8     tsx.w       ; Preserve original stack pointer
[   7]    9     lds.w #_stk_top ; Initialize program stack pointer
[   8]   10     stz _bss_start
[   9]   11     ldx.w #_bss_start
[  10]   12     ldy.w #_bss_start+1
[  11]   13     lda.w #_stk_top
[  12]   14     sec
[  13]   15     sbc.w #_bss_start
[  14]   16     mov #10
[  15]   17     jmp _pc65_main
[  16]   28 n_006 .equ +7
[  17]   29 fib_005 .sub
[  18]   30     phx.w
[  19]   31     tsx.w
[  20]   32     adj #-4
[  21]   35     lda.w n_006,X
[  22]   36     asl.w a
[  23]   37     clc
[  24]   38 	adc.w #fn_004
[  25]   39 	tai 
[  26]   41     lda.w 0,I++
[  27]   47 	beq L_009-2
[  28]   48 	lda #0
[  29]   49 	bra L_009
[  30]   50 L_009T
[  31]   51 	lda #1
[  32]   52 L_009
[  33]   54 	bne L_007
[  34]   55     jmp L_008
[  35]   56 L_007
[  36]   59     lda.w n_006,X
[  37]   60     asl.w a
[  38]   61     clc
[  39]   62 	adc.w #fn_004
[  40]   63 	pha.w
[  41]   64     lda.w n_006,X
[  42]   69 	dec.w a
[  43]   71     pha.w
[  44]   72     lda.w STATIC_LINK,X
[  45]   73     pha.w
[  46]   74     jsr fib_005
[  47]   75     adj #4
[  48]   76     pha.w
[  49]   78     lda.w n_006,X
[  50]   82     sec
[  51]   83 	sbc.w #2
[  52]   85     asl.w a
[  53]   86 	tay.w 
[  54]   90 	lda.w fn_004,Y
[  55]   91     clc
[  56]   92     adc.w 1,S
[  57]   93     adj #2
[  58]   94     pli.s
[  59]   95     sta.w 0,I++
[  60]   96 L_008
[  61]   99     lda.w n_006,X
[  62]  100     asl.w a
[  63]  101     clc
[  64]  102 	adc.w #fn_004
[  65]  103 	tai 
[  66]  105     lda.w 0,I++
[  67]  106     sta.w RETURN_VALUE,X
[  68]  108     lda.w RETURN_VALUE,X
[  69]  109     txs.w
[  70]  110     plx.w
[  71]  111     rts
[  72]  112     .end fib_005
[  73]  115 _pc65_main .sub
[  74]  116     phx.w
[  75]  117     tsx.w
[  76]  120     lda #0
[  77]  121     asl.w a
[  78]  122     clc
[  79]  123 	adc.w #fn_004
[  80]  124 	tai 
[  81]  125     lda #0
[  82]  127     sta.w 0,I++
[  83]  130     lda #1
[  84]  131     asl.w a
[  85]  132     clc
[  86]  133 	adc.w #fn_004
[  87]  134 	tai 
[  88]  135     lda #1
[  89]  137     sta.w 0,I++
[  90]  139     lda #2
[  91]  140     sta.w i_002
[  92]  141 L_010
[  93]  142     lda #23
[  94]  143     cmp.w i_002
[  95]  144     bge L_011
[  96]  145     jmp L_012
[  97]  146 L_011
[  98]  148     lda.w i_002
[  99]  149     asl.w a
[ 100]  150     clc
[ 101]  151 	adc.w #fn_004
[ 102]  152 	tai 
[ 103]  153     lda #0
[ 104]  155     sta.w 0,I++
[ 105]  156     inc.w i_002
[ 106]  157     jmp L_010
[ 107]  158 L_012
[ 108]  159     dec.w i_002
[ 109]  163 	psh.w #23
[ 110]  164     phx.w
[ 111]  165     jsr fib_005
[ 112]  166     adj #4
[ 113]  167     sta.w j_003
[ 114]  171 	stz.w i_002
[ 115]  172 L_013
[ 116]  173     lda #23
[ 117]  174     cmp.w i_002
[ 118]  175     bge L_014
[ 119]  176     jmp L_015
[ 120]  177 L_014
[ 121]  179     psh.w #S_016
[ 122]  180     psh.w #0
[ 123]  181     psh.w #4
[ 124]  182     jsr _swrite
[ 125]  183     adj #6
[ 126]  185     lda.w i_002
[ 127]  186     pha.w
[ 128]  188 	psh.w #2
[ 129]  189     jsr _iwrite
[ 130]  190     adj #4
[ 131]  192     psh.w #S_017
[ 132]  193     psh.w #0
[ 133]  194     psh.w #4
[ 134]  195     jsr _swrite
[ 135]  196     adj #6
[ 136]  199     lda.w i_002
[ 137]  200     asl.w a
[ 138]  201     clc
[ 139]  202 	adc.w #fn_004
[ 140]  203 	tai 
[ 141]  205     lda.w 0,I++
[ 142]  206     pha.w
[ 143]  208 	psh.w #5
[ 144]  209     jsr _iwrite
[ 145]  210     adj #4
[ 146]  213     jsr _writeln
[ 147]  214     inc.w i_002
[ 148]  215     jmp L_013
[ 149]  216 L_015
[ 150]  217     dec.w i_002
[ 151]  220     jsr _writeln
[ 152]  222     psh.w #S_018
[ 153]  223     psh.w #0
[ 154]  224     psh.w #63
[ 155]  225     jsr _swrite
[ 156]  226     adj #6
[ 157]  228     jsr _writeln
[ 158]  230     jsr _writeln
[ 159]  232     psh.w #S_016
[ 160]  233     psh.w #0
[ 161]  234     psh.w #4
[ 162]  235     jsr _swrite
[ 163]  236     adj #6
[ 164]  239 	psh.w #23
[ 165]  241 	psh.w #2
[ 166]  242     jsr _iwrite
[ 167]  243     adj #4
[ 168]  245     psh.w #S_017
[ 169]  246     psh.w #0
[ 170]  247     psh.w #4
[ 171]  248     jsr _swrite
[ 172]  249     adj #6
[ 173]  252 	psh.w #23
[ 174]  253     phx.w
[ 175]  254     jsr fib_005
[ 176]  255     adj #4
[ 177]  256     pha.w
[ 178]  258 	psh.w #5
[ 179]  259     jsr _iwrite
[ 180]  260     adj #4
[ 181]  262     jsr _writeln
[ 182]  264     jsr _writeln
[ 183]  266     psh.w #S_018
[ 184]  267     psh.w #0
[ 185]  268     psh.w #63
[ 186]  269     jsr _swrite
[ 187]  270     adj #6
[ 188]  272     jsr _writeln
[ 189]  275     jsr _writeln
[ 190]  276     plx.w
[ 191]  277     rts
[ 192]  278     .end _pc65_main
[ 193]  283             .cod
[ 194]  285 _Q          .equ    5
[ 195]  286 _D          .equ    3
[ 196]  288 _idiv       .proc
[ 197]  289             lda #0          ; clear remainder (A)
[ 198]  290             dup a           ; push
[ 199]  291             lda.w _Q,S      ; load dividend (Q)
[ 200]  292             ldy #16         ; bit counter
[ 201]  294 _idiv_Lp
[ 202]  295             clc
[ 203]  296             asl.w a         ; shift AQ left
[ 204]  297             swp a
[ 205]  298             rol.w a
[ 206]  300             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
[ 207]  302 _idiv_Minus
[ 208]  303             sec
[ 209]  304             sbc.w _D,S      ; subtract divisor (D)
[ 210]  306             bra _idiv_Next
[ 211]  308 _idiv_Plus
[ 212]  309             clc
[ 213]  310             adc.w _D,S      ; add divisor (D)
[ 214]  312 _idiv_Next
[ 215]  313             swp a           ; restore order of Acc stack {Q, A, -}
[ 216]  314             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
[ 217]  315             inc.w a
[ 218]  317 _idiv_Dec
[ 219]  318             dey             ; loop until loop counter == 0
[ 220]  319             bne _idiv_Lp
[ 221]  321 _idiv_Exit
[ 222]  322             swp a           ; Test remainder
[ 223]  323             ora.w #0
[ 224]  324             bpl _idiv_Finish
[ 225]  325             clc
[ 226]  326             adc.w 3,S
[ 227]  327 _idiv_Finish
[ 228]  328             swp a
[ 229]  330             rts
[ 230]  332             .endp _idiv
[ 231]  337             .cod
[ 232]  339 _M          .equ    5
[ 233]  340 _R          .equ    3
[ 234]  342 _imul       .proc
[ 235]  343             ldy #16             ; y = bit count
[ 236]  344             lda #0              ; A = { 0,  x,  x} - clear product
[ 237]  345             dup a               ; A = { 0,  0,  x}
[ 238]  346             dup a               ; A = { 0,  0,  0}
[ 239]  347             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
[ 240]  348             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
[ 241]  349             ora.w #0            ; set N flag if msb ATOS == 1
[ 242]  350             clc                 ; initialize Booth recoding bit
[ 243]  351             rot a               ; A = {PH, PL, `R}
[ 244]  353             bra _imul_TstB
[ 245]  355 _imul_Lp
[ 246]  356             asl.w a             ; A = {`R << 1, PH, PL}
[ 247]  357             rot a               ; A = {PH, PL, `R}
[ 248]  358 _imul_TstB
[ 249]  359             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
[ 250]  361 _imul_AddShft
[ 251]  362             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
[ 252]  363 _imul_AddM
[ 253]  364             clc
[ 254]  365             adc.w _M,S          ; PH += M
[ 255]  366             bra _imul_ShftP
[ 256]  368 _imul_SubShft
[ 257]  369             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
[ 258]  370 _imul_SubM
[ 259]  371             sec
[ 260]  372             sbc.w _M,S          ; PH -= M
[ 261]  374 _imul_ShftP
[ 262]  375             asr.w a             ; A = {PH >> 1, PL, `R}
[ 263]  376             rot a               ; A = {PL, `R, PH}
[ 264]  377             ror.w a             ; A = {PL >> 2, `R, PH}
[ 265]  378             rot a               ; A = {`R, PH, PL}
[ 266]  380 _imul_Dec
[ 267]  381             dey
[ 268]  382             bne _imul_Lp
[ 269]  384 _imul_Exit
[ 270]  385             rot a               ; A = {PH, PL, `R}
[ 271]  386             swp a               ; A = {PL, PH, `R}
[ 272]  388             rts
[ 273]  390             .endp _imul
[ 274]  395             .cod
[ 275]  397 _newLine    .equ    0x0A
[ 276]  398 _putChar    .equ    0xF001
[ 277]  400 _writeln    .proc
[ 278]  401             lda #_newLine
[ 279]  402             sta _putChar
[ 280]  404             rts
[ 281]  406             .endp _writeln
[ 282]  410             .cod
[ 283]  412 _sPtrOff    .equ    7
[ 284]  413 _sLenOff    .equ    3
[ 285]  415 _swrite     .proc
[ 286]  416             ldy.w _sLenOff,S        ; load string length
[ 287]  417             lda.w _sPtrOff,S        ; load string pointer
[ 288]  418             tai                     ; transfer sptr to IP
[ 289]  420 _swrite_Lp
[ 290]  421             lda 0,I++               ; load char from strig
[ 291]  422             sta _putChar            ; write char to output
[ 292]  424             dey.w                   ; loop while string length <> 0
[ 293]  425             bne _swrite_Lp
[ 294]  427             rts
[ 295]  429             .endp _swrite
[ 296]  433             .cod
[ 297]  435 _iValOff    .equ    7               ; parameter - integer value to convert
[ 298]  436 _fLenOff    .equ    5               ; parameter - field width specifier
[ 299]  437 _iCntOff    .equ    -1              ; local variable - conversion iteration cnt.
[ 300]  439 _iwrite     .proc
[ 301]  440             phx.w                   ; save current base pointer
[ 302]  441             tsx.w                   ; assign new base pointer
[ 303]  443             lda _fLenOff,X          ; load field width specifier
[ 304]  444             cmp #5                  ; compare against max integer digit count
[ 305]  445             ble _iwrite_SetCnt
[ 306]  446             lda #5
[ 307]  448 _iwrite_SetCnt
[ 308]  449             pha.w                   ; set iteration count to fld width
[ 309]  450             lda.w _iValOff,X        ; load a with integer value
[ 310]  452 _iwrite_Lp
[ 311]  453             pha.w                   ; push dividend argument to _idiv
[ 312]  454             psh.w #10               ; push divisor argument to _idiv
[ 313]  455             csr _idiv               ; determine the remainder,
[ 314]  456             adj #4                  ; remove arguments passed to _idiv from stk
[ 315]  457             swp a                   ; put the remainder into ATOS
[ 316]  459             clc                     ; convert remainder into ASCII character
[ 317]  460             adc #48
[ 318]  461             pha                     ; push LS digit of integer onto stack
[ 319]  463             rot a                   ; rotate quotient into ATOS position
[ 320]  465             dec.w _iCntOff,X        ; decrement digit iteration count
[ 321]  466             bne _iwrite_Lp
[ 322]  468             dup a                   ; save integer part of the conversion
[ 323]  470 _iwrite_Fill
[ 324]  471             lda _fLenOff,X          ; load field width specifier
[ 325]  472             cmp #5                  ; compare against max integer digit count
[ 326]  473             ble _iwrite_GenPtr
[ 327]  474             sec                     ; subtract max integer length from fld len
[ 328]  475             sbc #5
[ 329]  476             tay                     ; set difference as loop counter
[ 330]  477             lda #48                 ; fill remaining field with '0'
[ 331]  479 _iwrite_Fill_Lp                     ; increase string on stack with fill data
[ 332]  480             pha
[ 333]  481             dey
[ 334]  482             bne _iwrite_Fill_Lp
[ 335]  484 _iwrite_GenPtr
[ 336]  485             tsa.w                   ; transfer current stk pointer to A
[ 337]  486             inc.w a                 ; remove stack pointer write bias
[ 338]  487             pha.w                   ; push string pointer to stack
[ 339]  489             rot a                   ; restore integer part of the conversion
[ 340]  491             cmp.w #0                ; test for 0. If not 0, int > 10^fld
[ 341]  492             beq _iwrite_Sup0
[ 342]  493             ldy #0
[ 343]  494 _iwrite_ErrLp
[ 344]  495             lda #0x2A               ; fill integer field with '*'
[ 345]  496             sta (1,S),Y
[ 346]  497             iny
[ 347]  498             cmp.y _fLenOff,X
[ 348]  499             bne _iwrite_ErrLp
[ 349]  500             bra _iwrite_Exit
[ 350]  502 _iwrite_Sup0
[ 351]  503             lda #1                  ; load A w/ minimum field width
[ 352]  504             cmp.w _fLenOff,X        ; compare with field width specifier on stk.
[ 353]  505             beq _iwrite_Exit        ; don't suppress zero (0) for 1 char fields
[ 354]  506             dec.w _fLenOff,X        ; decrement field width specifier
[ 355]  507             ldy #0                  ; initialize string index
[ 356]  508 _iwrite_Sup0_Lp
[ 357]  509             lda (1,S),Y
[ 358]  510             cmp #48                 ; if leading position == 0, replace with ' '
[ 359]  511             bne _iwrite_Sup0_Exit   ; exit loop on first non-0 digit
[ 360]  512             lda #32                 ; replace leading 0 with ' '
[ 361]  513             sta (1,S),Y
[ 362]  514             iny                     ; increment string index and compare to fLen
[ 363]  515             cmp.y _fLenOff,X
[ 364]  516             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
[ 365]  517 _iwrite_Sup0_Exit
[ 366]  518             inc.w _fLenOff,X        ;
[ 367]  520 _iwrite_Exit
[ 368]  521             psh.w #0                ; NULL argument
[ 369]  522             lda _fLenOff,X          ; load field width specifier
[ 370]  523             pha.w                   ; push field width specifier
[ 371]  524             csr _swrite             ; write integer value string using _swrite()
[ 372]  525             adj #6                  ; remove parameters to _swrite() from stack
[ 373]  527             txs.w                   ; deallocate stack variables
[ 374]  528             plx.w                   ; restore previous base pointer
[ 375]  529             rts
[ 376]  531             .endp _iwrite
[ 377]  533     .dat
[ 378]  535 S_018 .str "****************************************************************"
[ 379]  536 S_017 .str "] = "
[ 380]  537 S_016 .str "Fib["
[ 381]  538 _bss_start .byt 0
[ 382]  539 i_002 .wrd 0
[ 383]  540 j_003 .wrd 0
[ 384]  541 fn_004 .byt 0[48]
[ 385]  542 _bss_end .byt 0
[ 386]  543 _stk .byt 0[1023]
[ 387]  544 _stk_top .byt -1
[ 388]  546     .end
