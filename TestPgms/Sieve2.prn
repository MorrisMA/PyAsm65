(   1)                  ; ;    1: PROGRAM eratosthenes(output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABDA        ; 	phx.w           ; Preserve current X register TOS
(   9) 0202 ABBA        ; 	tsx.w		    ; Preserve original stack pointer
(  10) 0204 CBA27510    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  11) 0208 9C9A04      ; 	stz _bss_start
(  12) 020B ABA29A04    ; 	ldx.w #_bss_start
(  13) 020F ABA09B04    ; 	ldy.w #_bss_start+1
(  14) 0213 ABA97510    ; 	lda.w #_stk_top
(  15) 0217 38          ; 	sec
(  16) 0218 ABE99A04    ; 	sbc.w #_bss_start
(  17) 021C 540A        ; 	mov #10
(  18) 021E 4C2102      ; 	jmp _pc65_main
(  19)                  ; ;    2: 
(  20)                  ; ;    3: CONST
(  21)                  ; ;    4:     max = 1000;
(  22)                  ; ;    5: 
(  23)                  ; ;    6: VAR
(  24)                  ; ;    7:     sieve : ARRAY [1..max] OF BOOLEAN;
(  25)                  ; ;    8:     i, j, limit, prime, factor : INTEGER;
(  26)                  ; ;    9: 
(  27)                  ; ;   10: BEGIN
(  28)                  ; _pc65_main .sub
(  29) 0221 ABDA        ; 	phx.w
(  30) 0223 ABBA        ; 	tsx.w
(  31)                  ; ;   11:     limit := max DIV 2;
(  37) 0225 ABA9F401    ; 	lda.w #500
(  38) 0229 AB8D6F0C    ; 	sta.w limit_005
(  39)                  ; ;   12:     sieve[1] := FALSE;
(  41) 022D A901        ; 	lda #1
(  42) 022F AB3A        ; 	dec.w a
(  43) 0231 AB0A        ; 	asl.w a
(  44) 0233 ABA8        ; 	tay.w 
(  47) 0235 A900        ; 	lda #0
(  49) 0237 AB999B04    ; 	sta.w sieve_002,Y
(  50)                  ; ;   13: 
(  51)                  ; ;   14:     FOR i := 2 TO max DO
(  52) 023B A902        ; 	lda #2
(  53) 023D AB8D6B0C    ; 	sta.w i_003
(  54)                  ; L_008
(  55) 0241 ABA9E803    ; 	lda.w #1000
(  56) 0245 ABCD6B0C    ; 	cmp.w i_003
(  57) 0249 AB5003      ; 	bge L_009
(  58) 024C 4C6602      ; 	jmp L_010
(  59)                  ; L_009
(  60)                  ; ;   15:         sieve[i] := TRUE;
(  62) 024F ABAD6B0C    ; 	lda.w i_003
(  63) 0253 AB3A        ; 	dec.w a
(  64) 0255 AB0A        ; 	asl.w a
(  65) 0257 ABA8        ; 	tay.w 
(  68) 0259 A901        ; 	lda #1
(  70) 025B AB999B04    ; 	sta.w sieve_002,Y
(  71) 025F ABEE6B0C    ; 	inc.w i_003
(  72) 0263 4C4102      ; 	jmp L_008
(  73)                  ; L_010
(  74) 0266 ABCE6B0C    ; 	dec.w i_003
(  75)                  ; ;   16: 
(  76)                  ; ;   17:     prime := 1;
(  77) 026A A901        ; 	lda #1
(  78) 026C AB8D710C    ; 	sta.w prime_006
(  79)                  ; ;   18: 
(  80)                  ; ;   19:     REPEAT
(  81)                  ; L_011
(  82)                  ; ;   20:         prime := prime + 1;
(  89) 0270 ABEE710C    ; 	inc.w prime_006
(  90)                  ; ;   21:         WHILE NOT sieve[prime] DO
(  91)                  ; L_013
(  93) 0274 ABAD710C    ; 	lda.w prime_006
(  94) 0278 AB3A        ; 	dec.w a
(  95) 027A AB0A        ; 	asl.w a
(  96) 027C ABA8        ; 	tay.w 
( 100) 027E ABB99B04    ; 	lda.w sieve_002,Y
( 101) 0282 4901        ; 	eor #1
( 103) 0284 D003        ; 	bne L_014
( 104) 0286 4C9002      ; 	jmp L_015
( 105)                  ; L_014
( 106)                  ; ;   22:             prime := prime + 1;
( 113) 0289 ABEE710C    ; 	inc.w prime_006
( 114) 028D 4C7402      ; 	jmp L_013
( 115)                  ; L_015
( 116)                  ; ;   23: 
( 117)                  ; ;   24:         factor := 2*prime;
( 120) 0290 ABAD710C    ; 	lda.w prime_006
( 123) 0294 AB0A        ; 	asl.w a
( 124) 0296 AB8D730C    ; 	sta.w factor_007
( 125)                  ; ;   25: 
( 126)                  ; ;   26:         WHILE factor <= max DO BEGIN
( 127)                  ; L_016
( 128) 029A ABAD730C    ; 	lda.w factor_007
( 132) 029E ABC9E803    ; 	cmp.w #1000
( 134) 02A2 AB3004      ; 	ble L_019-2
( 135) 02A5 A900        ; 	lda #0
( 136) 02A7 8002        ; 	bra L_019
( 138) 02A9 A901        ; 	lda #1
( 139)                  ; L_019
( 141) 02AB D003        ; 	bne L_017
( 142) 02AD 4CD002      ; 	jmp L_018
( 143)                  ; L_017
( 144)                  ; ;   27:             sieve[factor] := FALSE;
( 146) 02B0 ABAD730C    ; 	lda.w factor_007
( 147) 02B4 AB3A        ; 	dec.w a
( 148) 02B6 AB0A        ; 	asl.w a
( 149) 02B8 ABA8        ; 	tay.w 
( 152) 02BA A900        ; 	lda #0
( 154) 02BC AB999B04    ; 	sta.w sieve_002,Y
( 155)                  ; ;   28:             factor := factor + prime;
( 156) 02C0 ABAD730C    ; 	lda.w factor_007
( 159) 02C4 18          ; 	clc
( 160) 02C5 AB6D710C    ; 	adc.w prime_006
( 162) 02C9 AB8D730C    ; 	sta.w factor_007
( 163)                  ; ;   29:         END
( 164)                  ; ;   30:     UNTIL prime > limit;
( 165) 02CD 4C9A02      ; 	jmp L_016
( 166)                  ; L_018
( 167) 02D0 ABAD710C    ; 	lda.w prime_006
( 171) 02D4 ABCD6F0C    ; 	cmp.w limit_005
( 173) 02D8 AB1004      ; 	bgt L_020-2
( 174) 02DB A900        ; 	lda #0
( 175) 02DD 8002        ; 	bra L_020
( 177) 02DF A901        ; 	lda #1
( 178)                  ; L_020
( 180) 02E1 D003        ; 	bne L_012
( 181) 02E3 4C7002      ; 	jmp L_011
( 182)                  ; L_012
( 183)                  ; ;   31: 
( 184)                  ; ;   32:     writeln('Sieve of Eratosthenes');
( 185) 02E6 ABE28504    ; 	psh.w #S_021
( 186) 02EA ABE20000    ; 	psh.w #0
( 187) 02EE ABE21500    ; 	psh.w #21
( 188) 02F2 20F103      ; 	jsr _swrite
( 189) 02F5 C206        ; 	adj #6
( 190) 02F7 20EB03      ; 	jsr _writeln
( 191)                  ; ;   33:     writeln;
( 192) 02FA 20EB03      ; 	jsr _writeln
( 193)                  ; ;   34: 
( 194)                  ; ;   35:     i := 1;
( 195) 02FD A901        ; 	lda #1
( 196) 02FF AB8D6B0C    ; 	sta.w i_003
( 197)                  ; ;   36:     REPEAT
( 198)                  ; L_022
( 199)                  ; ;   37:         FOR j := 0 TO 19 DO BEGIN
( 201) 0303 AB9C6D0C    ; 	stz.w j_004
( 202)                  ; L_024
( 203) 0307 A913        ; 	lda #19
( 204) 0309 ABCD6D0C    ; 	cmp.w j_004
( 205) 030D AB5003      ; 	bge L_025
( 206) 0310 4C5D03      ; 	jmp L_026
( 207)                  ; L_025
( 208)                  ; ;   38:             prime := i + j;
( 209) 0313 ABAD6B0C    ; 	lda.w i_003
( 212) 0317 18          ; 	clc
( 213) 0318 AB6D6D0C    ; 	adc.w j_004
( 215) 031C AB8D710C    ; 	sta.w prime_006
( 216)                  ; ;   39:             IF sieve[prime] THEN
( 218) 0320 ABAD710C    ; 	lda.w prime_006
( 219) 0324 AB3A        ; 	dec.w a
( 220) 0326 AB0A        ; 	asl.w a
( 221) 0328 ABA8        ; 	tay.w 
( 225) 032A ABB99B04    ; 	lda.w sieve_002,Y
( 227) 032E D003        ; 	bne L_027
( 228) 0330 4C4503      ; 	jmp L_028
( 229)                  ; L_027
( 230)                  ; ;   40:                 write(prime:3)
( 231) 0333 ABAD710C    ; 	lda.w prime_006
( 232) 0337 AB48        ; 	pha.w
( 234) 0339 ABE20300    ; 	psh.w #3
( 235) 033D 200304      ; 	jsr _iwrite
( 236) 0340 C204        ; 	adj #4
( 237)                  ; ;   41:             ELSE
( 238) 0342 4C5603      ; 	jmp L_029
( 239)                  ; L_028
( 240)                  ; ;   42:                 write('   ');
( 241) 0345 ABE28204    ; 	psh.w #S_030
( 242) 0349 ABE20000    ; 	psh.w #0
( 243) 034D ABE20300    ; 	psh.w #3
( 244) 0351 20F103      ; 	jsr _swrite
( 245) 0354 C206        ; 	adj #6
( 246)                  ; L_029
( 247)                  ; ;   43:         END;
( 248) 0356 ABEE6D0C    ; 	inc.w j_004
( 249) 035A 4C0703      ; 	jmp L_024
( 250)                  ; L_026
( 251) 035D ABCE6D0C    ; 	dec.w j_004
( 252)                  ; ;   44:         writeln;
( 253) 0361 20EB03      ; 	jsr _writeln
( 254)                  ; ;   45:         i := i + 20
( 255) 0364 ABAD6B0C    ; 	lda.w i_003
( 258)                  ; ;   46:     UNTIL i > max
( 259) 0368 18          ; 	clc
( 260) 0369 AB691400    ; 	adc.w #20
( 262) 036D AB8D6B0C    ; 	sta.w i_003
( 263) 0371 ABAD6B0C    ; 	lda.w i_003
( 265)                  ; ;   47: END.
( 268) 0375 ABC9E803    ; 	cmp.w #1000
( 270) 0379 AB1004      ; 	bgt L_031-2
( 271) 037C A900        ; 	lda #0
( 272) 037E 8002        ; 	bra L_031
( 274) 0380 A901        ; 	lda #1
( 275)                  ; L_031
( 277) 0382 D003        ; 	bne L_023
( 278) 0384 4C0303      ; 	jmp L_022
( 279)                  ; L_023
( 280) 0387 ABFA        ; 	plx.w
( 281) 0389 60          ; 	rts
( 282)                  ; 	.end _pc65_main
( 283)                  ; ;
( 284)                  ; ;   unsigned division 16 x 16
( 285)                  ; ;
( 287)                  ; ;
( 288)                  ; _Q          .equ    5
( 289)                  ; _D          .equ    3
( 290)                  ; ;
( 291)                  ; _idiv       .proc
( 292) 038A A900        ; 			lda #0          ; clear remainder (A)
( 293) 038C 0B          ; 			dup a           ; push
( 294) 038D CBB505      ; 			lda.w _Q,S      ; load dividend (Q)
( 295) 0390 A010        ; 			ldy #16         ; bit counter
( 296)                  ; ;
( 297)                  ; _idiv_Lp    
( 298) 0392 18          ; 			clc
( 299) 0393 AB0A        ; 			asl.w a         ; shift AQ left
( 300) 0395 1B          ; 			swp a
( 301) 0396 AB2A        ; 			rol.w a
( 302)                  ; ;
( 303) 0398 B006        ; 			bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 304)                  ; ;
( 305)                  ; _idiv_Minus
( 306) 039A 38          ; 			sec
( 307) 039B CBF503      ; 			sbc.w _D,S      ; subtract divisor (D)
( 308)                  ; ;
( 309) 039E 8004        ; 			bra _idiv_Next
( 310)                  ; ;
( 311)                  ; _idiv_Plus
( 312) 03A0 18          ; 			clc
( 313) 03A1 CB7503      ; 			adc.w _D,S      ; add divisor (D)
( 314)                  ; ;
( 315)                  ; _idiv_Next    
( 316) 03A4 1B          ; 			swp a           ; restore order of Acc stack {Q, A, -}
( 317) 03A5 3002        ; 			bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 318) 03A7 AB1A        ; 			inc.w a
( 319)                  ; ;
( 320)                  ; _idiv_Dec
( 321) 03A9 88          ; 			dey             ; loop until loop counter == 0
( 322) 03AA D0E6        ; 			bne _idiv_Lp
( 323)                  ; ;
( 324)                  ; _idiv_Exit
( 325) 03AC 1B          ; 			swp a           ; Test remainder
( 326) 03AD AB090000    ; 			ora.w #0
( 327) 03B1 1004        ; 			bpl _idiv_Finish
( 328) 03B3 18          ; 			clc
( 329) 03B4 CB7503      ; 			adc.w 3,S
( 330)                  ; _idiv_Finish
( 331) 03B7 1B          ; 			swp a
( 332)                  ; ;
( 333) 03B8 60          ; 			rts
( 334)                  ; ;
( 336)                  ; ;
( 337)                  ; ; signed multiplication: 16 x 16 => 32
( 338)                  ; ;
( 340)                  ; ;
( 341)                  ; _M          .equ    5
( 342)                  ; _R          .equ    3
( 343)                  ; ;
( 344)                  ; _imul       .proc
( 345) 03B9 A010        ; 			ldy #16             ; y = bit count
( 346) 03BB A900        ; 			lda #0              ; A = { 0,  x,  x} - clear product
( 347) 03BD 0B          ; 			dup a               ; A = { 0,  0,  x}
( 348) 03BE 0B          ; 			dup a               ; A = { 0,  0,  0}
( 349) 03BF CBB503      ; 			lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 350) 03C2 9B2B        ; 			rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 351) 03C4 AB090000    ; 			ora.w #0            ; set N flag if msb ATOS == 1
( 352) 03C8 18          ; 			clc                 ; initialize Booth recoding bit
( 353) 03C9 2B          ; 			rot a               ; A = {PH, PL, `R}
( 354)                  ; ;
( 355) 03CA 8003        ; 			bra _imul_TstB
( 356)                  ; ;
( 357)                  ; _imul_Lp
( 358) 03CC AB0A        ; 			asl.w a             ; A = {`R << 1, PH, PL}
( 359) 03CE 2B          ; 			rot a               ; A = {PH, PL, `R}
( 360)                  ; _imul_TstB
( 361) 03CF 9008        ; 			bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 362)                  ; ;
( 363)                  ; _imul_AddShft
( 364) 03D1 300C        ; 			bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 365)                  ; _imul_AddM
( 366) 03D3 18          ; 			clc
( 367) 03D4 CB7505      ; 			adc.w _M,S          ; PH += M
( 368) 03D7 8006        ; 			bra _imul_ShftP
( 369)                  ; ;
( 370)                  ; _imul_SubShft
( 371) 03D9 1004        ; 			bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 372)                  ; _imul_SubM
( 373) 03DB 38          ; 			sec
( 374) 03DC CBF505      ; 			sbc.w _M,S          ; PH -= M
( 375)                  ; ;
( 376)                  ; _imul_ShftP
( 377) 03DF BB4A        ; 			asr.w a             ; A = {PH >> 1, PL, `R}
( 378) 03E1 2B          ; 			rot a               ; A = {PL, `R, PH}
( 379) 03E2 AB6A        ; 			ror.w a             ; A = {PL >> 1, `R, PH}
( 380) 03E4 2B          ; 			rot a               ; A = {`R, PH, PL}
( 381)                  ; ;
( 382)                  ; _imul_Dec
( 383) 03E5 88          ; 			dey
( 384) 03E6 D0E4        ; 			bne _imul_Lp
( 385)                  ; ;
( 386)                  ; _imul_Exit
( 387) 03E8 2B          ; 			rot a               ; A = {PH, PL, `R}
( 388) 03E9 1B          ; 			swp a               ; A = {PL, PH, `R}
( 389)                  ; ;
( 390) 03EA 60          ; 			rts
( 391)                  ; ;
( 393)                  ; 
( 394)                  ; ;
( 395)                  ; ; put <newLine> to output
( 396)                  ; ;
( 398)                  ; ;
( 399)                  ; _newLine    .equ    0x0A
( 400)                  ; _putChar    .equ    0xF001
( 401)                  ; ;
( 402)                  ; _writeln    .proc
( 403) 03EB A90A        ; 			lda #_newLine
( 404) 03ED 8D01F0      ; 			sta _putChar
( 405)                  ; ;
( 406) 03F0 60          ; 			rts
( 407)                  ; ;
( 409)                  ; ;
( 410)                  ; ; put string to output
( 411)                  ; ;
( 413)                  ; ;
( 414)                  ; _sPtrOff    .equ    7
( 415)                  ; _sLenOff    .equ    3
( 416)                  ; ;
( 417)                  ; _swrite     .proc
( 418) 03F1 CBB403      ; 			ldy.w _sLenOff,S        ; load string length
( 419) 03F4 CBB507      ; 			lda.w _sPtrOff,S        ; load string pointer
( 420) 03F7 9B0B        ; 			tai                     ; transfer sptr to IP
( 421)                  ; ;
( 422)                  ; _swrite_Lp
( 423) 03F9 A300        ; 			lda 0,I++               ; load char from string
( 424) 03FB 8D01F0      ; 			sta _putChar            ; write char to output
( 425)                  ; ;
( 426) 03FE AB88        ; 			dey.w                   ; loop while string length <> 0
( 427) 0400 D0F7        ; 			bne _swrite_Lp
( 428)                  ; ;
( 429) 0402 60          ; 			rts
( 430)                  ; ;
( 432)                  ; ;
( 433)                  ; ; put integer to output
( 434)                  ; ;
( 436)                  ; ;
( 437)                  ; _iValOff    .equ    7
( 438)                  ; _fLenOff    .equ    5
( 439)                  ; _iCntOff    .equ    -1
( 440)                  ; ;
( 441)                  ; _iwrite     .proc
( 442) 0403 ABDA        ; 			phx.w                   ; save current base pointer
( 443) 0405 ABBA        ; 			tsx.w                   ; assign new base pointer
( 444)                  ; ;
( 445) 0407 B505        ; 			lda _fLenOff,X          ; load field width specifier
( 446) 0409 C905        ; 			cmp #5                  ; compare against max integer digit count
( 447) 040B AB3002      ; 			ble _iwrite_SetCnt
( 448) 040E A905        ; 			lda #5
( 449)                  ; ;
( 450)                  ; _iwrite_SetCnt
( 451) 0410 AB48        ; 			pha.w                   ; set iteration count to fld width
( 452) 0412 ABB507      ; 			lda.w _iValOff,X        ; load a with integer value
( 453)                  ; ;
( 454)                  ; _iwrite_Lp
( 455) 0415 AB48        ; 			pha.w                   ; push dividend argument to _idiv
( 456) 0417 ABE20A00    ; 			psh.w #10               ; push divisor argument to _idiv
( 457) 041B 9B5C6BFF    ; 			csr _idiv               ; determine the remainder,
( 458) 041F C204        ; 			adj #4                  ; remove arguments passed to _idiv from stk
( 459) 0421 1B          ; 			swp a                   ; put the remainder into ATOS
( 460)                  ; ;
( 461) 0422 18          ; 			clc                     ; convert remainder into ASCII character
( 462) 0423 6930        ; 			adc #48
( 463) 0425 48          ; 			pha                     ; push LS digit of integer onto stack
( 464)                  ; ;
( 465) 0426 2B          ; 			rot a                   ; rotate quotient into ATOS position
( 466)                  ; ;
( 467) 0427 ABD6FF      ; 			dec.w _iCntOff,X        ; decrement digit iteration count
( 468) 042A D0E9        ; 			bne _iwrite_Lp
( 469)                  ; ;-------------------------------------------------------------------------------
( 470) 042C 0B          ; 			dup a                   ; save integer part of the conversion
( 471)                  ; ;-------------------------------------------------------------------------------
( 472)                  ; _iwrite_Fill
( 473) 042D B505        ; 			lda _fLenOff,X          ; load field width specifier
( 474) 042F C905        ; 			cmp #5                  ; compare against max integer digit count
( 475) 0431 AB300A      ; 			ble _iwrite_GenPtr
( 476) 0434 38          ; 			sec                     ; subtract max integer length from fld len
( 477) 0435 E905        ; 			sbc #5
( 478) 0437 A8          ; 			tay                     ; set difference as loop counter
( 479) 0438 A930        ; 			lda #48                 ; fill remaining field with '0'
( 480)                  ; ;
( 481)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
( 482) 043A 48          ; 			pha
( 483) 043B 88          ; 			dey
( 484) 043C D0FC        ; 			bne _iwrite_Fill_Lp
( 485)                  ; ;-------------------------------------------------------------------------------
( 486)                  ; _iwrite_GenPtr
( 487) 043E EBABBA      ; 			tsa.w                   ; transfer current stk pointer to A
( 488) 0441 AB1A        ; 			inc.w a                 ; remove stack pointer write bias
( 489) 0443 AB48        ; 			pha.w                   ; push string pointer to stack
( 490)                  ; ;-------------------------------------------------------------------------------
( 491) 0445 2B          ; 			rot a                   ; restore integer part of the conversion
( 492)                  ; ;-------------------------------------------------------------------------------
( 493) 0446 ABC90000    ; 			cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 494) 044A F00F        ; 			beq _iwrite_Sup0
( 495) 044C A000        ; 			ldy #0
( 496)                  ; _iwrite_ErrLp
( 497) 044E A92A        ; 			lda #0x2A               ; fill integer field with '*'
( 498) 0450 8B9101      ; 			sta (1,S),Y
( 499) 0453 C8          ; 			iny
( 500) 0454 FBD505      ; 			cmp.y _fLenOff,X
( 501) 0457 D0F5        ; 			bne _iwrite_ErrLp
( 502) 0459 8014        ; 			bra _iwrite_Exit
( 503)                  ; ;-------------------------------------------------------------------------------
( 504)                  ; _iwrite_Sup0
( 505) 045B A000        ; 			ldy #0                  ; initialize string index
( 506)                  ; _iwrite_Sup0_Lp
( 507) 045D 8BB101      ; 			lda (1,S),Y
( 508) 0460 C930        ; 			cmp #48                 ; if leading position == 0, replace with ' '
( 509) 0462 D00B        ; 			bne _iwrite_Exit        ; exit loop on first non-0 digit
( 510) 0464 A920        ; 			lda #32                 ; replace leading 0 with ' '
( 511) 0466 8B9101      ; 			sta (1,S),Y
( 512) 0469 C8          ; 			iny                     ; increment string index and compare to fLen
( 513) 046A FBD505      ; 			cmp.y _fLenOff,X
( 514) 046D D0EE        ; 			bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 515)                  ; ;-------------------------------------------------------------------------------
( 516)                  ; _iwrite_Exit
( 517) 046F ABE20000    ; 			psh.w #0                ; NULL argument
( 518) 0473 B505        ; 			lda _fLenOff,X          ; push field width specifier
( 519) 0475 AB48        ; 			pha.w
( 520) 0477 9B5C76FF    ; 			csr _swrite             ; write integer value string using _swrite()
( 521) 047B C206        ; 			adj #6                  ; remove parameters to _swrite() from stack
( 522)                  ; ;
( 523) 047D AB9A        ; 			txs.w                   ; deallocate stack variables
( 524) 047F ABFA        ; 			plx.w                   ; restore previous base pointer
( 525) 0481 60          ; 			rts
( 526)                  ; ;
( 528)                  ; 
( 529)                  ; 	.dat
( 530)                  ; 
( 531) 0482 202020      ; S_030 .str "   "
( 532) 0485 53696576    ; S_021 .str "Sieve of Eratosthenes"
       0489 65206F6620457261746F737468656E6573
( 533) 049A 55          ; _bss_start .byt 85
( 534) 049B 00000000    ; sieve_002 .byt 0[2000]
       049F 0000000000000000000000000000000000000000000000000000000000000000
       04BF 0000000000000000000000000000000000000000000000000000000000000000
       04DF 0000000000000000000000000000000000000000000000000000000000000000
       04FF 0000000000000000000000000000000000000000000000000000000000000000
       051F 0000000000000000000000000000000000000000000000000000000000000000
       053F 0000000000000000000000000000000000000000000000000000000000000000
       055F 0000000000000000000000000000000000000000000000000000000000000000
       057F 0000000000000000000000000000000000000000000000000000000000000000
       059F 0000000000000000000000000000000000000000000000000000000000000000
       05BF 0000000000000000000000000000000000000000000000000000000000000000
       05DF 0000000000000000000000000000000000000000000000000000000000000000
       05FF 0000000000000000000000000000000000000000000000000000000000000000
       061F 0000000000000000000000000000000000000000000000000000000000000000
       063F 0000000000000000000000000000000000000000000000000000000000000000
       065F 0000000000000000000000000000000000000000000000000000000000000000
       067F 0000000000000000000000000000000000000000000000000000000000000000
       069F 0000000000000000000000000000000000000000000000000000000000000000
       06BF 0000000000000000000000000000000000000000000000000000000000000000
       06DF 0000000000000000000000000000000000000000000000000000000000000000
       06FF 0000000000000000000000000000000000000000000000000000000000000000
       071F 0000000000000000000000000000000000000000000000000000000000000000
       073F 0000000000000000000000000000000000000000000000000000000000000000
       075F 0000000000000000000000000000000000000000000000000000000000000000
       077F 0000000000000000000000000000000000000000000000000000000000000000
       079F 0000000000000000000000000000000000000000000000000000000000000000
       07BF 0000000000000000000000000000000000000000000000000000000000000000
       07DF 0000000000000000000000000000000000000000000000000000000000000000
       07FF 0000000000000000000000000000000000000000000000000000000000000000
       081F 0000000000000000000000000000000000000000000000000000000000000000
       083F 0000000000000000000000000000000000000000000000000000000000000000
       085F 0000000000000000000000000000000000000000000000000000000000000000
       087F 0000000000000000000000000000000000000000000000000000000000000000
       089F 0000000000000000000000000000000000000000000000000000000000000000
       08BF 0000000000000000000000000000000000000000000000000000000000000000
       08DF 0000000000000000000000000000000000000000000000000000000000000000
       08FF 0000000000000000000000000000000000000000000000000000000000000000
       091F 0000000000000000000000000000000000000000000000000000000000000000
       093F 0000000000000000000000000000000000000000000000000000000000000000
       095F 0000000000000000000000000000000000000000000000000000000000000000
       097F 0000000000000000000000000000000000000000000000000000000000000000
       099F 0000000000000000000000000000000000000000000000000000000000000000
       09BF 0000000000000000000000000000000000000000000000000000000000000000
       09DF 0000000000000000000000000000000000000000000000000000000000000000
       09FF 0000000000000000000000000000000000000000000000000000000000000000
       0A1F 0000000000000000000000000000000000000000000000000000000000000000
       0A3F 0000000000000000000000000000000000000000000000000000000000000000
       0A5F 0000000000000000000000000000000000000000000000000000000000000000
       0A7F 0000000000000000000000000000000000000000000000000000000000000000
       0A9F 0000000000000000000000000000000000000000000000000000000000000000
       0ABF 0000000000000000000000000000000000000000000000000000000000000000
       0ADF 0000000000000000000000000000000000000000000000000000000000000000
       0AFF 0000000000000000000000000000000000000000000000000000000000000000
       0B1F 0000000000000000000000000000000000000000000000000000000000000000
       0B3F 0000000000000000000000000000000000000000000000000000000000000000
       0B5F 0000000000000000000000000000000000000000000000000000000000000000
       0B7F 0000000000000000000000000000000000000000000000000000000000000000
       0B9F 0000000000000000000000000000000000000000000000000000000000000000
       0BBF 0000000000000000000000000000000000000000000000000000000000000000
       0BDF 0000000000000000000000000000000000000000000000000000000000000000
       0BFF 0000000000000000000000000000000000000000000000000000000000000000
       0C1F 0000000000000000000000000000000000000000000000000000000000000000
       0C3F 0000000000000000000000000000000000000000000000000000000000000000
       0C5F 000000000000000000000000
( 535) 0C6B 0000        ; i_003 .wrd 0
( 536) 0C6D 0000        ; j_004 .wrd 0
( 537) 0C6F 0000        ; limit_005 .wrd 0
( 538) 0C71 0000        ; prime_006 .wrd 0
( 539) 0C73 0000        ; factor_007 .wrd 0
( 540) 0C75 55          ; _bss_end .byt 85
( 541) 0C76 00000000    ; _stk .byt 0[1023]
       0C7A 0000000000000000000000000000000000000000000000000000000000000000
       0C9A 0000000000000000000000000000000000000000000000000000000000000000
       0CBA 0000000000000000000000000000000000000000000000000000000000000000
       0CDA 0000000000000000000000000000000000000000000000000000000000000000
       0CFA 0000000000000000000000000000000000000000000000000000000000000000
       0D1A 0000000000000000000000000000000000000000000000000000000000000000
       0D3A 0000000000000000000000000000000000000000000000000000000000000000
       0D5A 0000000000000000000000000000000000000000000000000000000000000000
       0D7A 0000000000000000000000000000000000000000000000000000000000000000
       0D9A 0000000000000000000000000000000000000000000000000000000000000000
       0DBA 0000000000000000000000000000000000000000000000000000000000000000
       0DDA 0000000000000000000000000000000000000000000000000000000000000000
       0DFA 0000000000000000000000000000000000000000000000000000000000000000
       0E1A 0000000000000000000000000000000000000000000000000000000000000000
       0E3A 0000000000000000000000000000000000000000000000000000000000000000
       0E5A 0000000000000000000000000000000000000000000000000000000000000000
       0E7A 0000000000000000000000000000000000000000000000000000000000000000
       0E9A 0000000000000000000000000000000000000000000000000000000000000000
       0EBA 0000000000000000000000000000000000000000000000000000000000000000
       0EDA 0000000000000000000000000000000000000000000000000000000000000000
       0EFA 0000000000000000000000000000000000000000000000000000000000000000
       0F1A 0000000000000000000000000000000000000000000000000000000000000000
       0F3A 0000000000000000000000000000000000000000000000000000000000000000
       0F5A 0000000000000000000000000000000000000000000000000000000000000000
       0F7A 0000000000000000000000000000000000000000000000000000000000000000
       0F9A 0000000000000000000000000000000000000000000000000000000000000000
       0FBA 0000000000000000000000000000000000000000000000000000000000000000
       0FDA 0000000000000000000000000000000000000000000000000000000000000000
       0FFA 0000000000000000000000000000000000000000000000000000000000000000
       101A 0000000000000000000000000000000000000000000000000000000000000000
       103A 0000000000000000000000000000000000000000000000000000000000000000
       105A 000000000000000000000000000000000000000000000000000000
( 542) 1075 00          ; _stk_top .byt 0
( 543)                  ; 
( 544)                  ; 	.end
