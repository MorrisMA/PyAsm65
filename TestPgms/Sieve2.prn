(   1)                  ; ;    1: PROGRAM eratosthenes(output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA27310    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9C9804      ; 	stz _bss_start
(  11) 0209 ABA29804    ; 	ldx.w #_bss_start
(  12) 020D ABA09904    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA97310    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE99804    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4C1F02      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: CONST
(  20)                  ; ;    4:     max = 1000;
(  21)                  ; ;    5: 
(  22)                  ; ;    6: VAR
(  23)                  ; ;    7:     sieve : ARRAY [1..max] OF BOOLEAN;
(  24)                  ; ;    8:     i, j, limit, prime, factor : INTEGER;
(  25)                  ; ;    9: 
(  26)                  ; ;   10: BEGIN
(  27)                  ; _pc65_main .sub
(  28) 021F ABDA        ; 	phx.w
(  29) 0221 ABBA        ; 	tsx.w
(  30)                  ; ;   11:     limit := max DIV 2;
(  36) 0223 ABA9F401    ; 	lda.w #500
(  37) 0227 AB8D6D0C    ; 	sta.w limit_005
(  38)                  ; ;   12:     sieve[1] := FALSE;
(  40) 022B A901        ; 	lda #1
(  41) 022D AB3A        ; 	dec.w a
(  42) 022F AB0A        ; 	asl.w a
(  43) 0231 ABA8        ; 	tay.w 
(  46) 0233 A900        ; 	lda #0
(  48) 0235 AB999904    ; 	sta.w sieve_002,Y
(  49)                  ; ;   13: 
(  50)                  ; ;   14:     FOR i := 2 TO max DO
(  51) 0239 A902        ; 	lda #2
(  52) 023B AB8D690C    ; 	sta.w i_003
(  53)                  ; L_008
(  54) 023F ABA9E803    ; 	lda.w #1000
(  55) 0243 ABCD690C    ; 	cmp.w i_003
(  56) 0247 AB5003      ; 	bge L_009
(  57) 024A 4C6402      ; 	jmp L_010
(  58)                  ; L_009
(  59)                  ; ;   15:         sieve[i] := TRUE;
(  61) 024D ABAD690C    ; 	lda.w i_003
(  62) 0251 AB3A        ; 	dec.w a
(  63) 0253 AB0A        ; 	asl.w a
(  64) 0255 ABA8        ; 	tay.w 
(  67) 0257 A901        ; 	lda #1
(  69) 0259 AB999904    ; 	sta.w sieve_002,Y
(  70) 025D ABEE690C    ; 	inc.w i_003
(  71) 0261 4C3F02      ; 	jmp L_008
(  72)                  ; L_010
(  73) 0264 ABCE690C    ; 	dec.w i_003
(  74)                  ; ;   16: 
(  75)                  ; ;   17:     prime := 1;
(  76) 0268 A901        ; 	lda #1
(  77) 026A AB8D6F0C    ; 	sta.w prime_006
(  78)                  ; ;   18: 
(  79)                  ; ;   19:     REPEAT
(  80)                  ; L_011
(  81)                  ; ;   20:         prime := prime + 1;
(  88) 026E ABEE6F0C    ; 	inc.w prime_006
(  89)                  ; ;   21:         WHILE NOT sieve[prime] DO
(  90)                  ; L_013
(  92) 0272 ABAD6F0C    ; 	lda.w prime_006
(  93) 0276 AB3A        ; 	dec.w a
(  94) 0278 AB0A        ; 	asl.w a
(  95) 027A ABA8        ; 	tay.w 
(  99) 027C ABB99904    ; 	lda.w sieve_002,Y
( 100) 0280 4901        ; 	eor #1
( 102) 0282 D003        ; 	bne L_014
( 103) 0284 4C8E02      ; 	jmp L_015
( 104)                  ; L_014
( 105)                  ; ;   22:             prime := prime + 1;
( 112) 0287 ABEE6F0C    ; 	inc.w prime_006
( 113) 028B 4C7202      ; 	jmp L_013
( 114)                  ; L_015
( 115)                  ; ;   23: 
( 116)                  ; ;   24:         factor := 2*prime;
( 119) 028E ABAD6F0C    ; 	lda.w prime_006
( 122) 0292 AB0A        ; 	asl.w a
( 123) 0294 AB8D710C    ; 	sta.w factor_007
( 124)                  ; ;   25: 
( 125)                  ; ;   26:         WHILE factor <= max DO BEGIN
( 126)                  ; L_016
( 127) 0298 ABAD710C    ; 	lda.w factor_007
( 131) 029C ABC9E803    ; 	cmp.w #1000
( 133) 02A0 AB3004      ; 	ble L_019-2
( 134) 02A3 A900        ; 	lda #0
( 135) 02A5 8002        ; 	bra L_019
( 137) 02A7 A901        ; 	lda #1
( 138)                  ; L_019
( 140) 02A9 D003        ; 	bne L_017
( 141) 02AB 4CCE02      ; 	jmp L_018
( 142)                  ; L_017
( 143)                  ; ;   27:             sieve[factor] := FALSE;
( 145) 02AE ABAD710C    ; 	lda.w factor_007
( 146) 02B2 AB3A        ; 	dec.w a
( 147) 02B4 AB0A        ; 	asl.w a
( 148) 02B6 ABA8        ; 	tay.w 
( 151) 02B8 A900        ; 	lda #0
( 153) 02BA AB999904    ; 	sta.w sieve_002,Y
( 154)                  ; ;   28:             factor := factor + prime;
( 155) 02BE ABAD710C    ; 	lda.w factor_007
( 158) 02C2 18          ; 	clc
( 159) 02C3 AB6D6F0C    ; 	adc.w prime_006
( 161) 02C7 AB8D710C    ; 	sta.w factor_007
( 162)                  ; ;   29:         END
( 163)                  ; ;   30:     UNTIL prime > limit;
( 164) 02CB 4C9802      ; 	jmp L_016
( 165)                  ; L_018
( 166) 02CE ABAD6F0C    ; 	lda.w prime_006
( 170) 02D2 ABCD6D0C    ; 	cmp.w limit_005
( 172) 02D6 AB1004      ; 	bgt L_020-2
( 173) 02D9 A900        ; 	lda #0
( 174) 02DB 8002        ; 	bra L_020
( 176) 02DD A901        ; 	lda #1
( 177)                  ; L_020
( 179) 02DF D003        ; 	bne L_012
( 180) 02E1 4C6E02      ; 	jmp L_011
( 181)                  ; L_012
( 182)                  ; ;   31: 
( 183)                  ; ;   32:     writeln('Sieve of Eratosthenes');
( 184) 02E4 ABE28304    ; 	psh.w #S_021
( 185) 02E8 ABE20000    ; 	psh.w #0
( 186) 02EC ABE21500    ; 	psh.w #21
( 187) 02F0 20EF03      ; 	jsr _swrite
( 188) 02F3 C206        ; 	adj #6
( 189) 02F5 20E903      ; 	jsr _writeln
( 190)                  ; ;   33:     writeln;
( 191) 02F8 20E903      ; 	jsr _writeln
( 192)                  ; ;   34: 
( 193)                  ; ;   35:     i := 1;
( 194) 02FB A901        ; 	lda #1
( 195) 02FD AB8D690C    ; 	sta.w i_003
( 196)                  ; ;   36:     REPEAT
( 197)                  ; L_022
( 198)                  ; ;   37:         FOR j := 0 TO 19 DO BEGIN
( 200) 0301 AB9C6B0C    ; 	stz.w j_004
( 201)                  ; L_024
( 202) 0305 A913        ; 	lda #19
( 203) 0307 ABCD6B0C    ; 	cmp.w j_004
( 204) 030B AB5003      ; 	bge L_025
( 205) 030E 4C5B03      ; 	jmp L_026
( 206)                  ; L_025
( 207)                  ; ;   38:             prime := i + j;
( 208) 0311 ABAD690C    ; 	lda.w i_003
( 211) 0315 18          ; 	clc
( 212) 0316 AB6D6B0C    ; 	adc.w j_004
( 214) 031A AB8D6F0C    ; 	sta.w prime_006
( 215)                  ; ;   39:             IF sieve[prime] THEN
( 217) 031E ABAD6F0C    ; 	lda.w prime_006
( 218) 0322 AB3A        ; 	dec.w a
( 219) 0324 AB0A        ; 	asl.w a
( 220) 0326 ABA8        ; 	tay.w 
( 224) 0328 ABB99904    ; 	lda.w sieve_002,Y
( 226) 032C D003        ; 	bne L_027
( 227) 032E 4C4303      ; 	jmp L_028
( 228)                  ; L_027
( 229)                  ; ;   40:                 write(prime:3)
( 230) 0331 ABAD6F0C    ; 	lda.w prime_006
( 231) 0335 AB48        ; 	pha.w
( 233) 0337 ABE20300    ; 	psh.w #3
( 234) 033B 200104      ; 	jsr _iwrite
( 235) 033E C204        ; 	adj #4
( 236)                  ; ;   41:             ELSE
( 237) 0340 4C5403      ; 	jmp L_029
( 238)                  ; L_028
( 239)                  ; ;   42:                 write('   ');
( 240) 0343 ABE28004    ; 	psh.w #S_030
( 241) 0347 ABE20000    ; 	psh.w #0
( 242) 034B ABE20300    ; 	psh.w #3
( 243) 034F 20EF03      ; 	jsr _swrite
( 244) 0352 C206        ; 	adj #6
( 245)                  ; L_029
( 246)                  ; ;   43:         END;
( 247) 0354 ABEE6B0C    ; 	inc.w j_004
( 248) 0358 4C0503      ; 	jmp L_024
( 249)                  ; L_026
( 250) 035B ABCE6B0C    ; 	dec.w j_004
( 251)                  ; ;   44:         writeln;
( 252) 035F 20E903      ; 	jsr _writeln
( 253)                  ; ;   45:         i := i + 20
( 254) 0362 ABAD690C    ; 	lda.w i_003
( 257)                  ; ;   46:     UNTIL i > max
( 258) 0366 18          ; 	clc
( 259) 0367 AB691400    ; 	adc.w #20
( 261) 036B AB8D690C    ; 	sta.w i_003
( 262) 036F ABAD690C    ; 	lda.w i_003
( 264)                  ; ;   47: END.
( 267) 0373 ABC9E803    ; 	cmp.w #1000
( 269) 0377 AB1004      ; 	bgt L_031-2
( 270) 037A A900        ; 	lda #0
( 271) 037C 8002        ; 	bra L_031
( 273) 037E A901        ; 	lda #1
( 274)                  ; L_031
( 276) 0380 D003        ; 	bne L_023
( 277) 0382 4C0103      ; 	jmp L_022
( 278)                  ; L_023
( 279) 0385 ABFA        ; 	plx.w
( 280) 0387 60          ; 	rts
( 281)                  ; 	.end _pc65_main
( 282)                  ; ;
( 283)                  ; ;   unsigned division 16 x 16
( 284)                  ; ;
( 286)                  ; ;
( 287)                  ; _Q          .equ    5
( 288)                  ; _D          .equ    3
( 289)                  ; ;
( 290)                  ; _idiv       .proc
( 291) 0388 A900        ;             lda #0          ; clear remainder (A)
( 292) 038A 0B          ;             dup a           ; push
( 293) 038B CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 294) 038E A010        ;             ldy #16         ; bit counter
( 295)                  ; ;
( 296)                  ; _idiv_Lp    
( 297) 0390 18          ;             clc
( 298) 0391 AB0A        ;             asl.w a         ; shift AQ left
( 299) 0393 1B          ;             swp a
( 300) 0394 AB2A        ;             rol.w a
( 301)                  ; ;
( 302) 0396 B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 303)                  ; ;
( 304)                  ; _idiv_Minus
( 305) 0398 38          ;             sec
( 306) 0399 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 307)                  ; ;
( 308) 039C 8004        ;             bra _idiv_Next
( 309)                  ; ;
( 310)                  ; _idiv_Plus
( 311) 039E 18          ;             clc
( 312) 039F CB7503      ;             adc.w _D,S      ; add divisor (D)
( 313)                  ; ;
( 314)                  ; _idiv_Next    
( 315) 03A2 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 316) 03A3 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 317) 03A5 AB1A        ;             inc.w a
( 318)                  ; ;
( 319)                  ; _idiv_Dec
( 320) 03A7 88          ;             dey             ; loop until loop counter == 0
( 321) 03A8 D0E6        ;             bne _idiv_Lp
( 322)                  ; ;
( 323)                  ; _idiv_Exit
( 324) 03AA 1B          ;             swp a           ; Test remainder
( 325) 03AB AB090000    ;             ora.w #0
( 326) 03AF 1004        ;             bpl _idiv_Finish
( 327) 03B1 18          ;             clc
( 328) 03B2 CB7503      ;             adc.w 3,S
( 329)                  ; _idiv_Finish
( 330) 03B5 1B          ;             swp a
( 331)                  ; ;
( 332) 03B6 60          ;             rts
( 333)                  ; ;
( 335)                  ; ;
( 336)                  ; ; signed multiplication: 16 x 16 => 32
( 337)                  ; ;
( 339)                  ; ;
( 340)                  ; _M          .equ    5
( 341)                  ; _R          .equ    3
( 342)                  ; ;
( 343)                  ; _imul       .proc
( 344) 03B7 A010        ;             ldy #16             ; y = bit count
( 345) 03B9 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 346) 03BB 0B          ;             dup a               ; A = { 0,  0,  x}
( 347) 03BC 0B          ;             dup a               ; A = { 0,  0,  0}
( 348) 03BD CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 349) 03C0 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 350) 03C2 AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 351) 03C6 18          ;             clc                 ; initialize Booth recoding bit
( 352) 03C7 2B          ;             rot a               ; A = {PH, PL, `R}
( 353)                  ; ;
( 354) 03C8 8003        ;             bra _imul_TstB
( 355)                  ; ;
( 356)                  ; _imul_Lp
( 357) 03CA AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 358) 03CC 2B          ;             rot a               ; A = {PH, PL, `R}
( 359)                  ; _imul_TstB
( 360) 03CD 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 361)                  ; ;
( 362)                  ; _imul_AddShft
( 363) 03CF 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 364)                  ; _imul_AddM
( 365) 03D1 18          ;             clc
( 366) 03D2 CB7505      ;             adc.w _M,S          ; PH += M
( 367) 03D5 8006        ;             bra _imul_ShftP
( 368)                  ; ;
( 369)                  ; _imul_SubShft
( 370) 03D7 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 371)                  ; _imul_SubM
( 372) 03D9 38          ;             sec
( 373) 03DA CBF505      ;             sbc.w _M,S          ; PH -= M
( 374)                  ; ;
( 375)                  ; _imul_ShftP
( 376) 03DD BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 377) 03DF 2B          ;             rot a               ; A = {PL, `R, PH}
( 378) 03E0 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 379) 03E2 2B          ;             rot a               ; A = {`R, PH, PL}
( 380)                  ; ;
( 381)                  ; _imul_Dec
( 382) 03E3 88          ;             dey
( 383) 03E4 D0E4        ;             bne _imul_Lp
( 384)                  ; ;
( 385)                  ; _imul_Exit
( 386) 03E6 2B          ;             rot a               ; A = {PH, PL, `R}
( 387) 03E7 1B          ;             swp a               ; A = {PL, PH, `R}
( 388)                  ; ;
( 389) 03E8 60          ;             rts
( 390)                  ; ;
( 392)                  ; 
( 393)                  ; ;
( 394)                  ; ; put <newLine> to output
( 395)                  ; ;
( 397)                  ; ;
( 398)                  ; _newLine    .equ    0x0A
( 399)                  ; _putChar    .equ    0xF001
( 400)                  ; ;
( 401)                  ; _writeln    .proc
( 402) 03E9 A90A        ;             lda #_newLine
( 403) 03EB 8D01F0      ;             sta _putChar
( 404)                  ; ;
( 405) 03EE 60          ;             rts
( 406)                  ; ;
( 408)                  ; ;
( 409)                  ; ; put string to output
( 410)                  ; ;
( 412)                  ; ;
( 413)                  ; _sPtrOff    .equ    7
( 414)                  ; _sLenOff    .equ    3
( 415)                  ; ;
( 416)                  ; _swrite     .proc
( 417) 03EF CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 418) 03F2 CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 419) 03F5 9B0B        ;             tai                     ; transfer sptr to IP
( 420)                  ; ;
( 421)                  ; _swrite_Lp
( 422) 03F7 A300        ;             lda 0,I++               ; load char from strig
( 423) 03F9 8D01F0      ;             sta _putChar            ; write char to output
( 424)                  ; ;
( 425) 03FC AB88        ;             dey.w                   ; loop while string length <> 0
( 426) 03FE D0F7        ;             bne _swrite_Lp
( 427)                  ; ;
( 428) 0400 60          ;             rts
( 429)                  ; ;
( 431)                  ; ;
( 432)                  ; ; put integer to output
( 433)                  ; ;
( 435)                  ; ;
( 436)                  ; _iValOff    .equ    7
( 437)                  ; _fLenOff    .equ    5
( 438)                  ; _iCntOff    .equ    -1
( 439)                  ; ;
( 440)                  ; _iwrite     .proc
( 441) 0401 ABDA        ;             phx.w                   ; save current base pointer
( 442) 0403 ABBA        ;             tsx.w                   ; assign new base pointer
( 443)                  ; ;
( 444) 0405 B505        ;             lda _fLenOff,X          ; load field width specifier
( 445) 0407 C905        ;             cmp #5                  ; compare against max integer digit count
( 446) 0409 AB3002      ;             ble _iwrite_SetCnt
( 447) 040C A905        ;             lda #5
( 448)                  ; ;
( 449)                  ; _iwrite_SetCnt
( 450) 040E AB48        ;             pha.w                   ; set iteration count to fld width
( 451) 0410 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 452)                  ; ;
( 453)                  ; _iwrite_Lp
( 454) 0413 AB48        ;             pha.w                   ; push dividend argument to _idiv
( 455) 0415 ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 456) 0419 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 457) 041D C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 458) 041F 1B          ;             swp a                   ; put the remainder into ATOS
( 459)                  ; ;
( 460) 0420 18          ;             clc                     ; convert remainder into ASCII character
( 461) 0421 6930        ;             adc #48
( 462) 0423 48          ;             pha                     ; push LS digit of integer onto stack
( 463)                  ; ;
( 464) 0424 2B          ;             rot a                   ; rotate quotient into ATOS position
( 465)                  ; ;
( 466) 0425 ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 467) 0428 D0E9        ;             bne _iwrite_Lp
( 468)                  ; ;-------------------------------------------------------------------------------
( 469) 042A 0B          ;             dup a                   ; save integer part of the conversion
( 470)                  ; ;-------------------------------------------------------------------------------
( 471)                  ; _iwrite_Fill
( 472) 042B B505        ;             lda _fLenOff,X          ; load field width specifier
( 473) 042D C905        ;             cmp #5                  ; compare against max integer digit count
( 474) 042F AB300A      ;             ble _iwrite_GenPtr
( 475) 0432 38          ;             sec                     ; subtract max integer length from fld len
( 476) 0433 E905        ;             sbc #5
( 477) 0435 A8          ;             tay                     ; set difference as loop counter
( 478) 0436 A930        ;             lda #48                 ; fill remaining field with '0'
( 479)                  ; ;
( 480)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
( 481) 0438 48          ;             pha
( 482) 0439 88          ;             dey
( 483) 043A D0FC        ;             bne _iwrite_Fill_Lp
( 484)                  ; ;-------------------------------------------------------------------------------
( 485)                  ; _iwrite_GenPtr
( 486) 043C EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 487) 043F AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 488) 0441 AB48        ;             pha.w                   ; push string pointer to stack
( 489)                  ; ;-------------------------------------------------------------------------------
( 490) 0443 2B          ;             rot a                   ; restore integer part of the conversion
( 491)                  ; ;-------------------------------------------------------------------------------
( 492) 0444 ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 493) 0448 F00F        ;             beq _iwrite_Sup0
( 494) 044A A000        ;             ldy #0
( 495)                  ; _iwrite_ErrLp
( 496) 044C A92A        ;             lda #0x2A               ; fill integer field with '*'
( 497) 044E 8B9101      ;             sta (1,S),Y
( 498) 0451 C8          ;             iny
( 499) 0452 FBD505      ;             cmp.y _fLenOff,X
( 500) 0455 D0F5        ;             bne _iwrite_ErrLp
( 501) 0457 8014        ;             bra _iwrite_Exit
( 502)                  ; ;-------------------------------------------------------------------------------
( 503)                  ; _iwrite_Sup0
( 504) 0459 A000        ;             ldy #0                  ; initialize string index
( 505)                  ; _iwrite_Sup0_Lp
( 506) 045B 8BB101      ;             lda (1,S),Y
( 507) 045E C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 508) 0460 D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 509) 0462 A920        ;             lda #32                 ; replace leading 0 with ' '
( 510) 0464 8B9101      ;             sta (1,S),Y
( 511) 0467 C8          ;             iny                     ; increment string index and compare to fLen
( 512) 0468 FBD505      ;             cmp.y _fLenOff,X
( 513) 046B D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 514)                  ; ;-------------------------------------------------------------------------------
( 515)                  ; _iwrite_Exit
( 516) 046D ABE20000    ;             psh.w #0                ; NULL argument
( 517) 0471 B505        ;             lda _fLenOff,X          ; push field width specifier
( 518) 0473 AB48        ;             pha.w
( 519) 0475 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
( 520) 0479 C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 521)                  ; ;
( 522) 047B AB9A        ;             txs.w                   ; deallocate stack variables
( 523) 047D ABFA        ;             plx.w                   ; restore previous base pointer
( 524) 047F 60          ;             rts
( 525)                  ; ;
( 527)                  ; 
( 528)                  ; 	.dat
( 529)                  ; 
( 530) 0480 202020      ; S_030 .str "   "
( 531) 0483 53696576    ; S_021 .str "Sieve of Eratosthenes"
       0487 65206F6620457261746F737468656E6573
( 532) 0498 55          ; _bss_start .byt 85
( 533) 0499 00000000    ; sieve_002 .byt 0[2000]
       049D 0000000000000000000000000000000000000000000000000000000000000000
       04BD 0000000000000000000000000000000000000000000000000000000000000000
       04DD 0000000000000000000000000000000000000000000000000000000000000000
       04FD 0000000000000000000000000000000000000000000000000000000000000000
       051D 0000000000000000000000000000000000000000000000000000000000000000
       053D 0000000000000000000000000000000000000000000000000000000000000000
       055D 0000000000000000000000000000000000000000000000000000000000000000
       057D 0000000000000000000000000000000000000000000000000000000000000000
       059D 0000000000000000000000000000000000000000000000000000000000000000
       05BD 0000000000000000000000000000000000000000000000000000000000000000
       05DD 0000000000000000000000000000000000000000000000000000000000000000
       05FD 0000000000000000000000000000000000000000000000000000000000000000
       061D 0000000000000000000000000000000000000000000000000000000000000000
       063D 0000000000000000000000000000000000000000000000000000000000000000
       065D 0000000000000000000000000000000000000000000000000000000000000000
       067D 0000000000000000000000000000000000000000000000000000000000000000
       069D 0000000000000000000000000000000000000000000000000000000000000000
       06BD 0000000000000000000000000000000000000000000000000000000000000000
       06DD 0000000000000000000000000000000000000000000000000000000000000000
       06FD 0000000000000000000000000000000000000000000000000000000000000000
       071D 0000000000000000000000000000000000000000000000000000000000000000
       073D 0000000000000000000000000000000000000000000000000000000000000000
       075D 0000000000000000000000000000000000000000000000000000000000000000
       077D 0000000000000000000000000000000000000000000000000000000000000000
       079D 0000000000000000000000000000000000000000000000000000000000000000
       07BD 0000000000000000000000000000000000000000000000000000000000000000
       07DD 0000000000000000000000000000000000000000000000000000000000000000
       07FD 0000000000000000000000000000000000000000000000000000000000000000
       081D 0000000000000000000000000000000000000000000000000000000000000000
       083D 0000000000000000000000000000000000000000000000000000000000000000
       085D 0000000000000000000000000000000000000000000000000000000000000000
       087D 0000000000000000000000000000000000000000000000000000000000000000
       089D 0000000000000000000000000000000000000000000000000000000000000000
       08BD 0000000000000000000000000000000000000000000000000000000000000000
       08DD 0000000000000000000000000000000000000000000000000000000000000000
       08FD 0000000000000000000000000000000000000000000000000000000000000000
       091D 0000000000000000000000000000000000000000000000000000000000000000
       093D 0000000000000000000000000000000000000000000000000000000000000000
       095D 0000000000000000000000000000000000000000000000000000000000000000
       097D 0000000000000000000000000000000000000000000000000000000000000000
       099D 0000000000000000000000000000000000000000000000000000000000000000
       09BD 0000000000000000000000000000000000000000000000000000000000000000
       09DD 0000000000000000000000000000000000000000000000000000000000000000
       09FD 0000000000000000000000000000000000000000000000000000000000000000
       0A1D 0000000000000000000000000000000000000000000000000000000000000000
       0A3D 0000000000000000000000000000000000000000000000000000000000000000
       0A5D 0000000000000000000000000000000000000000000000000000000000000000
       0A7D 0000000000000000000000000000000000000000000000000000000000000000
       0A9D 0000000000000000000000000000000000000000000000000000000000000000
       0ABD 0000000000000000000000000000000000000000000000000000000000000000
       0ADD 0000000000000000000000000000000000000000000000000000000000000000
       0AFD 0000000000000000000000000000000000000000000000000000000000000000
       0B1D 0000000000000000000000000000000000000000000000000000000000000000
       0B3D 0000000000000000000000000000000000000000000000000000000000000000
       0B5D 0000000000000000000000000000000000000000000000000000000000000000
       0B7D 0000000000000000000000000000000000000000000000000000000000000000
       0B9D 0000000000000000000000000000000000000000000000000000000000000000
       0BBD 0000000000000000000000000000000000000000000000000000000000000000
       0BDD 0000000000000000000000000000000000000000000000000000000000000000
       0BFD 0000000000000000000000000000000000000000000000000000000000000000
       0C1D 0000000000000000000000000000000000000000000000000000000000000000
       0C3D 0000000000000000000000000000000000000000000000000000000000000000
       0C5D 000000000000000000000000
( 534) 0C69 0000        ; i_003 .wrd 0
( 535) 0C6B 0000        ; j_004 .wrd 0
( 536) 0C6D 0000        ; limit_005 .wrd 0
( 537) 0C6F 0000        ; prime_006 .wrd 0
( 538) 0C71 0000        ; factor_007 .wrd 0
( 539) 0C73 55          ; _bss_end .byt 85
( 540) 0C74 00000000    ; _stk .byt 0[1023]
       0C78 0000000000000000000000000000000000000000000000000000000000000000
       0C98 0000000000000000000000000000000000000000000000000000000000000000
       0CB8 0000000000000000000000000000000000000000000000000000000000000000
       0CD8 0000000000000000000000000000000000000000000000000000000000000000
       0CF8 0000000000000000000000000000000000000000000000000000000000000000
       0D18 0000000000000000000000000000000000000000000000000000000000000000
       0D38 0000000000000000000000000000000000000000000000000000000000000000
       0D58 0000000000000000000000000000000000000000000000000000000000000000
       0D78 0000000000000000000000000000000000000000000000000000000000000000
       0D98 0000000000000000000000000000000000000000000000000000000000000000
       0DB8 0000000000000000000000000000000000000000000000000000000000000000
       0DD8 0000000000000000000000000000000000000000000000000000000000000000
       0DF8 0000000000000000000000000000000000000000000000000000000000000000
       0E18 0000000000000000000000000000000000000000000000000000000000000000
       0E38 0000000000000000000000000000000000000000000000000000000000000000
       0E58 0000000000000000000000000000000000000000000000000000000000000000
       0E78 0000000000000000000000000000000000000000000000000000000000000000
       0E98 0000000000000000000000000000000000000000000000000000000000000000
       0EB8 0000000000000000000000000000000000000000000000000000000000000000
       0ED8 0000000000000000000000000000000000000000000000000000000000000000
       0EF8 0000000000000000000000000000000000000000000000000000000000000000
       0F18 0000000000000000000000000000000000000000000000000000000000000000
       0F38 0000000000000000000000000000000000000000000000000000000000000000
       0F58 0000000000000000000000000000000000000000000000000000000000000000
       0F78 0000000000000000000000000000000000000000000000000000000000000000
       0F98 0000000000000000000000000000000000000000000000000000000000000000
       0FB8 0000000000000000000000000000000000000000000000000000000000000000
       0FD8 0000000000000000000000000000000000000000000000000000000000000000
       0FF8 0000000000000000000000000000000000000000000000000000000000000000
       1018 0000000000000000000000000000000000000000000000000000000000000000
       1038 0000000000000000000000000000000000000000000000000000000000000000
       1058 000000000000000000000000000000000000000000000000000000
( 541) 1073 00          ; _stk_top .byt 0
( 542)                  ; 
( 543)                  ; 	.end
