(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA23410    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  17) 0206 4C0902      ; 	jmp _pc65_main
(  28) 0209 ABDA        ; 	phx.w
(  29) 020B ABBA        ; 	tsx.w
(  36) 020D ABA9F401    ; 	lda.w #500
(  37) 0211 AB8D2E0C    ; 	sta.w limit_005
(  40) 0215 A901        ; 	lda #1
(  41) 0217 AB3A        ; 	dec.w a
(  42) 0219 AB0A        ; 	asl.w a
(  43) 021B ABA8        ; 	tay.w 
(  46) 021D A900        ; 	lda #0
(  48) 021F AB995A04    ; 	sta.w sieve_002,Y
(  54) 0223 A901        ; 	lda #1
(  55) 0225 AB8D300C    ; 	sta.w prime_006
(  66) 0229 ABEE300C    ; 	inc.w prime_006
(  70) 022D ABAD300C    ; 	lda.w prime_006
(  71) 0231 AB3A        ; 	dec.w a
(  72) 0233 AB0A        ; 	asl.w a
(  73) 0235 ABA8        ; 	tay.w 
(  77) 0237 ABB95A04    ; 	lda.w sieve_002,Y
(  78) 023B 4901        ; 	eor #1
(  80) 023D D003        ; 	bne L_011
(  81) 023F 4C4902      ; 	jmp L_012
(  90) 0242 ABEE300C    ; 	inc.w prime_006
(  91) 0246 4C2D02      ; 	jmp L_010
(  95) 0249 ABAD300C    ; 	lda.w prime_006
( 100) 024D AB0A        ; 	asl.w a
( 101) 024F AB8D320C    ; 	sta.w factor_007
( 105) 0253 ABAD320C    ; 	lda.w factor_007
( 109) 0257 ABC9E803    ; 	cmp.w #1000
( 111) 025B AB3004      ; 	ble L_016T
( 112) 025E A900        ; 	lda #0
( 113) 0260 8004        ; 	bra L_016
( 114) 0262 EAEA        ; L_016T .byt 234[2]
( 115) 0264 A901        ; 	lda #1
( 118) 0266 D003        ; 	bne L_014
( 119) 0268 4C8B02      ; 	jmp L_015
( 123) 026B ABAD320C    ; 	lda.w factor_007
( 124) 026F AB3A        ; 	dec.w a
( 125) 0271 AB0A        ; 	asl.w a
( 126) 0273 ABA8        ; 	tay.w 
( 129) 0275 A900        ; 	lda #0
( 131) 0277 AB995A04    ; 	sta.w sieve_002,Y
( 133) 027B ABAD320C    ; 	lda.w factor_007
( 136) 027F 18          ; 	clc
( 137) 0280 AB6D300C    ; 	adc.w prime_006
( 139) 0284 AB8D320C    ; 	sta.w factor_007
( 142) 0288 4C5302      ; 	jmp L_013
( 144) 028B ABAD300C    ; 	lda.w prime_006
( 148) 028F ABCD2E0C    ; 	cmp.w limit_005
( 150) 0293 AB1004      ; 	bgt L_017T
( 151) 0296 A900        ; 	lda #0
( 152) 0298 8004        ; 	bra L_017
( 153) 029A EAEA        ; L_017T .byt 234[2]
( 154) 029C A901        ; 	lda #1
( 157) 029E D003        ; 	bne L_009
( 158) 02A0 4C2902      ; 	jmp L_008
( 162) 02A3 ABE24404    ; 	psh.w #S_018
( 163) 02A7 ABE20000    ; 	psh.w #0
( 164) 02AB ABE21500    ; 	psh.w #21
( 165) 02AF 20B003      ; 	jsr _swrite
( 166) 02B2 C206        ; 	adj #6
( 167) 02B4 20AA03      ; 	jsr _writeln
( 169) 02B7 20AA03      ; 	jsr _writeln
( 172) 02BA A901        ; 	lda #1
( 173) 02BC AB8D2A0C    ; 	sta.w i_003
( 178) 02C0 AB9C2C0C    ; 	stz.w j_004
( 180) 02C4 A913        ; 	lda #19
( 181) 02C6 ABCD2C0C    ; 	cmp.w j_004
( 182) 02CA AB5003      ; 	bge L_022
( 183) 02CD 4C1A03      ; 	jmp L_023
( 186) 02D0 ABAD2A0C    ; 	lda.w i_003
( 189) 02D4 18          ; 	clc
( 190) 02D5 AB6D2C0C    ; 	adc.w j_004
( 192) 02D9 AB8D300C    ; 	sta.w prime_006
( 195) 02DD ABAD300C    ; 	lda.w prime_006
( 196) 02E1 AB3A        ; 	dec.w a
( 197) 02E3 AB0A        ; 	asl.w a
( 198) 02E5 ABA8        ; 	tay.w 
( 202) 02E7 ABB95A04    ; 	lda.w sieve_002,Y
( 204) 02EB D003        ; 	bne L_024
( 205) 02ED 4C0203      ; 	jmp L_025
( 208) 02F0 ABAD300C    ; 	lda.w prime_006
( 209) 02F4 AB48        ; 	pha.w
( 211) 02F6 ABE20300    ; 	psh.w #3
( 212) 02FA 20C203      ; 	jsr _iwrite
( 213) 02FD C204        ; 	adj #4
( 215) 02FF 4C1303      ; 	jmp L_026
( 218) 0302 ABE24104    ; 	psh.w #S_027
( 219) 0306 ABE20000    ; 	psh.w #0
( 220) 030A ABE20300    ; 	psh.w #3
( 221) 030E 20B003      ; 	jsr _swrite
( 222) 0311 C206        ; 	adj #6
( 225) 0313 ABEE2C0C    ; 	inc.w j_004
( 226) 0317 4CC402      ; 	jmp L_021
( 228) 031A ABCE2C0C    ; 	dec.w j_004
( 230) 031E 20AA03      ; 	jsr _writeln
( 232) 0321 ABAD2A0C    ; 	lda.w i_003
( 236) 0325 18          ; 	clc
( 237) 0326 AB691400    ; 	adc.w #20
( 239) 032A AB8D2A0C    ; 	sta.w i_003
( 240) 032E ABAD2A0C    ; 	lda.w i_003
( 245) 0332 ABC9E803    ; 	cmp.w #1000
( 247) 0336 AB1004      ; 	bgt L_028T
( 248) 0339 A900        ; 	lda #0
( 249) 033B 8004        ; 	bra L_028
( 250) 033D EAEA        ; L_028T .byt 234[2]
( 251) 033F A901        ; 	lda #1
( 254) 0341 D003        ; 	bne L_020
( 255) 0343 4CC002      ; 	jmp L_019
( 257) 0346 ABFA        ; 	plx.w
( 258) 0348 60          ; 	rts
( 270) 0349 A900        ;             lda #0          ; clear remainder (A)
( 271) 034B 0B          ;             dup a           ; push
( 272) 034C CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 273) 034F A010        ;             ldy #16         ; bit counter
( 276) 0351 18          ;             clc
( 277) 0352 AB0A        ;             asl.w a         ; shift AQ left
( 278) 0354 1B          ;             swp a
( 279) 0355 AB2A        ;             rol.w a
( 281) 0357 B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 284) 0359 38          ;             sec
( 285) 035A CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 287) 035D 8004        ;             bra _idiv_Next
( 290) 035F 18          ;             clc
( 291) 0360 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 294) 0363 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 295) 0364 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 296) 0366 AB1A        ;             inc.w a
( 299) 0368 88          ;             dey             ; loop until loop counter == 0
( 300) 0369 D0E6        ;             bne _idiv_Lp
( 303) 036B 1B          ;             swp a           ; Test remainder
( 304) 036C AB090000    ;             ora.w #0
( 305) 0370 1004        ;             bpl _idiv_Finish
( 306) 0372 18          ;             clc
( 307) 0373 CB7503      ;             adc.w 3,S
( 309) 0376 1B          ;             swp a
( 311) 0377 60          ;             rts
( 324) 0378 A010        ;             ldy #16             ; y = bit count
( 325) 037A A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 326) 037C 0B          ;             dup a               ; A = { 0,  0,  x}
( 327) 037D 0B          ;             dup a               ; A = { 0,  0,  0}
( 328) 037E CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 329) 0381 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 330) 0383 AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 331) 0387 18          ;             clc                 ; initialize Booth recoding bit
( 332) 0388 2B          ;             rot a               ; A = {PH, PL, `R}
( 334) 0389 8003        ;             bra _imul_TstB
( 337) 038B AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 338) 038D 2B          ;             rot a               ; A = {PH, PL, `R}
( 340) 038E 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 343) 0390 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 345) 0392 18          ;             clc
( 346) 0393 CB7505      ;             adc.w _M,S          ; PH += M
( 347) 0396 8006        ;             bra _imul_ShftP
( 350) 0398 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 352) 039A 38          ;             sec
( 353) 039B CBF505      ;             sbc.w _M,S          ; PH -= M
( 356) 039E BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 357) 03A0 2B          ;             rot a               ; A = {PL, `R, PH}
( 358) 03A1 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 359) 03A3 2B          ;             rot a               ; A = {`R, PH, PL}
( 362) 03A4 88          ;             dey
( 363) 03A5 D0E4        ;             bne _imul_Lp
( 366) 03A7 2B          ;             rot a               ; A = {PH, PL, `R}
( 367) 03A8 1B          ;             swp a               ; A = {PL, PH, `R}
( 369) 03A9 60          ;             rts
( 382) 03AA A90A        ;             lda #_newLine
( 383) 03AC 8D01F0      ;             sta _putChar
( 385) 03AF 60          ;             rts
( 397) 03B0 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 398) 03B3 CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 399) 03B6 9B0B        ;             tai                     ; transfer sptr to IP
( 402) 03B8 A300        ;             lda 0,I++               ; load char from strig
( 403) 03BA 8D01F0      ;             sta _putChar            ; write char to output
( 405) 03BD AB88        ;             dey.w                   ; loop while string length <> 0
( 406) 03BF D0F7        ;             bne _swrite_Lp
( 408) 03C1 60          ;             rts
( 421) 03C2 ABDA        ;             phx.w                   ; save current base pointer
( 422) 03C4 ABBA        ;             tsx.w                   ; assign new base pointer
( 424) 03C6 B505        ;             lda _fLenOff,X          ; load field width specifier
( 425) 03C8 C905        ;             cmp #5                  ; compare against max integer digit count
( 426) 03CA AB3002      ;             ble _iwrite_SetCnt
( 427) 03CD A905        ;             lda #5
( 430) 03CF AB48        ;             pha.w                   ; set iteration count to fld width
( 431) 03D1 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 434) 03D4 AB48        ;             pha.w                   ; push dividend argument to _idiv
( 435) 03D6 ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 436) 03DA 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 437) 03DE C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 438) 03E0 1B          ;             swp a                   ; put the remainder into ATOS
( 440) 03E1 18          ;             clc                     ; convert remainder into ASCII character
( 441) 03E2 6930        ;             adc #48
( 442) 03E4 48          ;             pha                     ; push LS digit of integer onto stack
( 444) 03E5 2B          ;             rot a                   ; rotate quotient into ATOS position
( 446) 03E6 ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 447) 03E9 D0E9        ;             bne _iwrite_Lp
( 449) 03EB 0B          ;             dup a                   ; save integer part of the conversion
( 452) 03EC B505        ;             lda _fLenOff,X          ; load field width specifier
( 453) 03EE C905        ;             cmp #5                  ; compare against max integer digit count
( 454) 03F0 AB300A      ;             ble _iwrite_GenPtr
( 455) 03F3 38          ;             sec                     ; subtract max integer length from fld len
( 456) 03F4 E905        ;             sbc #5
( 457) 03F6 A8          ;             tay                     ; set difference as loop counter
( 458) 03F7 A930        ;             lda #48                 ; fill remaining field with '0'
( 461) 03F9 48          ;             pha
( 462) 03FA 88          ;             dey
( 463) 03FB D0FC        ;             bne _iwrite_Fill_Lp
( 466) 03FD EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 467) 0400 AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 468) 0402 AB48        ;             pha.w                   ; push string pointer to stack
( 470) 0404 2B          ;             rot a                   ; restore integer part of the conversion
( 472) 0405 ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 473) 0409 F00F        ;             beq _iwrite_Sup0
( 474) 040B A000        ;             ldy #0
( 476) 040D A92A        ;             lda #0x2A               ; fill integer field with '*'
( 477) 040F 8B9101      ;             sta (1,S),Y
( 478) 0412 C8          ;             iny
( 479) 0413 FBD505      ;             cmp.y _fLenOff,X
( 480) 0416 D0F5        ;             bne _iwrite_ErrLp
( 481) 0418 8014        ;             bra _iwrite_Exit
( 484) 041A A000        ;             ldy #0                  ; initialize string index
( 486) 041C 8BB101      ;             lda (1,S),Y
( 487) 041F C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 488) 0421 D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 489) 0423 A920        ;             lda #32                 ; replace leading 0 with ' '
( 490) 0425 8B9101      ;             sta (1,S),Y
( 491) 0428 C8          ;             iny                     ; increment string index and compare to fLen
( 492) 0429 FBD505      ;             cmp.y _fLenOff,X
( 493) 042C D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 496) 042E ABE20000    ;             psh.w #0                ; NULL argument
( 497) 0432 B505        ;             lda _fLenOff,X          ; push field width specifier
( 498) 0434 AB48        ;             pha.w
( 499) 0436 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
( 500) 043A C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 502) 043C AB9A        ;             txs.w                   ; deallocate stack variables
( 503) 043E ABFA        ;             plx.w                   ; restore previous base pointer
( 504) 0440 60          ;             rts
( 510) 0441 202020      ; S_027 .str "   "
( 511) 0444 53696576    ; S_018 .str "Sieve of Eratosthenes"
       0448 65206F6620457261746F737468656E6573
( 512) 0459 00          ; _bss_start .byt 0
( 513) 045A 01000100    ; sieve_002 .wrd 1[1000]
       045E 0100010001000100010001000100010001000100010001000100010001000100
       047E 0100010001000100010001000100010001000100010001000100010001000100
       049E 0100010001000100010001000100010001000100010001000100010001000100
       04BE 0100010001000100010001000100010001000100010001000100010001000100
       04DE 0100010001000100010001000100010001000100010001000100010001000100
       04FE 0100010001000100010001000100010001000100010001000100010001000100
       051E 0100010001000100010001000100010001000100010001000100010001000100
       053E 0100010001000100010001000100010001000100010001000100010001000100
       055E 0100010001000100010001000100010001000100010001000100010001000100
       057E 0100010001000100010001000100010001000100010001000100010001000100
       059E 0100010001000100010001000100010001000100010001000100010001000100
       05BE 0100010001000100010001000100010001000100010001000100010001000100
       05DE 0100010001000100010001000100010001000100010001000100010001000100
       05FE 0100010001000100010001000100010001000100010001000100010001000100
       061E 0100010001000100010001000100010001000100010001000100010001000100
       063E 0100010001000100010001000100010001000100010001000100010001000100
       065E 0100010001000100010001000100010001000100010001000100010001000100
       067E 0100010001000100010001000100010001000100010001000100010001000100
       069E 0100010001000100010001000100010001000100010001000100010001000100
       06BE 0100010001000100010001000100010001000100010001000100010001000100
       06DE 0100010001000100010001000100010001000100010001000100010001000100
       06FE 0100010001000100010001000100010001000100010001000100010001000100
       071E 0100010001000100010001000100010001000100010001000100010001000100
       073E 0100010001000100010001000100010001000100010001000100010001000100
       075E 0100010001000100010001000100010001000100010001000100010001000100
       077E 0100010001000100010001000100010001000100010001000100010001000100
       079E 0100010001000100010001000100010001000100010001000100010001000100
       07BE 0100010001000100010001000100010001000100010001000100010001000100
       07DE 0100010001000100010001000100010001000100010001000100010001000100
       07FE 0100010001000100010001000100010001000100010001000100010001000100
       081E 0100010001000100010001000100010001000100010001000100010001000100
       083E 0100010001000100010001000100010001000100010001000100010001000100
       085E 0100010001000100010001000100010001000100010001000100010001000100
       087E 0100010001000100010001000100010001000100010001000100010001000100
       089E 0100010001000100010001000100010001000100010001000100010001000100
       08BE 0100010001000100010001000100010001000100010001000100010001000100
       08DE 0100010001000100010001000100010001000100010001000100010001000100
       08FE 0100010001000100010001000100010001000100010001000100010001000100
       091E 0100010001000100010001000100010001000100010001000100010001000100
       093E 0100010001000100010001000100010001000100010001000100010001000100
       095E 0100010001000100010001000100010001000100010001000100010001000100
       097E 0100010001000100010001000100010001000100010001000100010001000100
       099E 0100010001000100010001000100010001000100010001000100010001000100
       09BE 0100010001000100010001000100010001000100010001000100010001000100
       09DE 0100010001000100010001000100010001000100010001000100010001000100
       09FE 0100010001000100010001000100010001000100010001000100010001000100
       0A1E 0100010001000100010001000100010001000100010001000100010001000100
       0A3E 0100010001000100010001000100010001000100010001000100010001000100
       0A5E 0100010001000100010001000100010001000100010001000100010001000100
       0A7E 0100010001000100010001000100010001000100010001000100010001000100
       0A9E 0100010001000100010001000100010001000100010001000100010001000100
       0ABE 0100010001000100010001000100010001000100010001000100010001000100
       0ADE 0100010001000100010001000100010001000100010001000100010001000100
       0AFE 0100010001000100010001000100010001000100010001000100010001000100
       0B1E 0100010001000100010001000100010001000100010001000100010001000100
       0B3E 0100010001000100010001000100010001000100010001000100010001000100
       0B5E 0100010001000100010001000100010001000100010001000100010001000100
       0B7E 0100010001000100010001000100010001000100010001000100010001000100
       0B9E 0100010001000100010001000100010001000100010001000100010001000100
       0BBE 0100010001000100010001000100010001000100010001000100010001000100
       0BDE 0100010001000100010001000100010001000100010001000100010001000100
       0BFE 0100010001000100010001000100010001000100010001000100010001000100
       0C1E 010001000100010001000100
( 514) 0C2A 0000        ; i_003 .wrd 0
( 515) 0C2C 0000        ; j_004 .wrd 0
( 516) 0C2E 0000        ; limit_005 .wrd 0
( 517) 0C30 0000        ; prime_006 .wrd 0
( 518) 0C32 0000        ; factor_007 .wrd 0
( 519) 0C34 00          ; _bss_end .byt 0
( 520) 0C35 00000000    ; _stk .byt 0[1023]
       0C39 0000000000000000000000000000000000000000000000000000000000000000
       0C59 0000000000000000000000000000000000000000000000000000000000000000
       0C79 0000000000000000000000000000000000000000000000000000000000000000
       0C99 0000000000000000000000000000000000000000000000000000000000000000
       0CB9 0000000000000000000000000000000000000000000000000000000000000000
       0CD9 0000000000000000000000000000000000000000000000000000000000000000
       0CF9 0000000000000000000000000000000000000000000000000000000000000000
       0D19 0000000000000000000000000000000000000000000000000000000000000000
       0D39 0000000000000000000000000000000000000000000000000000000000000000
       0D59 0000000000000000000000000000000000000000000000000000000000000000
       0D79 0000000000000000000000000000000000000000000000000000000000000000
       0D99 0000000000000000000000000000000000000000000000000000000000000000
       0DB9 0000000000000000000000000000000000000000000000000000000000000000
       0DD9 0000000000000000000000000000000000000000000000000000000000000000
       0DF9 0000000000000000000000000000000000000000000000000000000000000000
       0E19 0000000000000000000000000000000000000000000000000000000000000000
       0E39 0000000000000000000000000000000000000000000000000000000000000000
       0E59 0000000000000000000000000000000000000000000000000000000000000000
       0E79 0000000000000000000000000000000000000000000000000000000000000000
       0E99 0000000000000000000000000000000000000000000000000000000000000000
       0EB9 0000000000000000000000000000000000000000000000000000000000000000
       0ED9 0000000000000000000000000000000000000000000000000000000000000000
       0EF9 0000000000000000000000000000000000000000000000000000000000000000
       0F19 0000000000000000000000000000000000000000000000000000000000000000
       0F39 0000000000000000000000000000000000000000000000000000000000000000
       0F59 0000000000000000000000000000000000000000000000000000000000000000
       0F79 0000000000000000000000000000000000000000000000000000000000000000
       0F99 0000000000000000000000000000000000000000000000000000000000000000
       0FB9 0000000000000000000000000000000000000000000000000000000000000000
       0FD9 0000000000000000000000000000000000000000000000000000000000000000
       0FF9 0000000000000000000000000000000000000000000000000000000000000000
       1019 000000000000000000000000000000000000000000000000000000
( 521) 1034 FF          ; _stk_top .byt -1
