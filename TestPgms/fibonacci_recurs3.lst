(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA2C708    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9C9204      ; 	stz _bss_start
(  11) 0209 ABA29204    ; 	ldx.w #_bss_start
(  12) 020D ABA09304    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9C708    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE99204    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4CD202      ; 	jmp _pc65_main
(  30) 021F ABDA        ; 	phx.w
(  31) 0221 ABBA        ; 	tsx.w
(  32) 0223 C2FC        ; 	adj #-4
(  34) 0225 ABE29704    ; 	psh.w #fn_004
(  35) 0229 ABB507      ; 	lda.w n_006,X
(  36) 022C AB0A        ; 	asl.w a
(  37) 022E 18          ; 	clc
(  38) 022F CB7501      ; 	adc.w 1,S
(  39) 0232 CB9501      ; 	sta.w 1,S
(  40) 0235 8B6B        ; 	pli.s
(  41) 0237 ABA300      ; 	lda.w 0,I++
(  42) 023A AB48        ; 	pha.w
(  43) 023C A900        ; 	lda #0
(  44) 023E CB4401      ; 	xma.w 1,S
(  45) 0241 CBD501      ; 	cmp.w 1,S
(  46) 0244 C202        ; 	adj #2
(  47) 0246 08          ; 	php
(  48) 0247 A901        ; 	lda #1
(  49) 0249 28          ; 	plp
(  50) 024A F002        ; 	beq L_009
(  51) 024C A900        ; 	lda #0
(  53) 024E ABC90100    ; 	cmp.w #1
(  54) 0252 F003        ; 	beq L_007
(  55) 0254 4CB202      ; 	jmp L_008
(  58) 0257 ABE29704    ; 	psh.w #fn_004
(  59) 025B ABB507      ; 	lda.w n_006,X
(  60) 025E AB0A        ; 	asl.w a
(  61) 0260 18          ; 	clc
(  62) 0261 CB7501      ; 	adc.w 1,S
(  63) 0264 CB9501      ; 	sta.w 1,S
(  64) 0267 ABB507      ; 	lda.w n_006,X
(  65) 026A AB48        ; 	pha.w
(  66) 026C A901        ; 	lda #1
(  67) 026E CB4401      ; 	xma.w 1,S
(  68) 0271 38          ; 	sec
(  69) 0272 CBF501      ; 	sbc.w 1,S
(  70) 0275 C202        ; 	adj #2
(  71) 0277 AB48        ; 	pha.w
(  72) 0279 ABB505      ; 	lda.w STATIC_LINK,X
(  73) 027C AB48        ; 	pha.w
(  74) 027E 201F02      ; 	jsr fib_005
(  75) 0281 C204        ; 	adj #4
(  76) 0283 AB48        ; 	pha.w
(  77) 0285 ABE29704    ; 	psh.w #fn_004
(  78) 0289 ABB507      ; 	lda.w n_006,X
(  79) 028C AB48        ; 	pha.w
(  80) 028E A902        ; 	lda #2
(  81) 0290 CB4401      ; 	xma.w 1,S
(  82) 0293 38          ; 	sec
(  83) 0294 CBF501      ; 	sbc.w 1,S
(  84) 0297 C202        ; 	adj #2
(  85) 0299 AB0A        ; 	asl.w a
(  86) 029B 18          ; 	clc
(  87) 029C CB7501      ; 	adc.w 1,S
(  88) 029F CB9501      ; 	sta.w 1,S
(  89) 02A2 8B6B        ; 	pli.s
(  90) 02A4 ABA300      ; 	lda.w 0,I++
(  91) 02A7 18          ; 	clc
(  92) 02A8 CB7501      ; 	adc.w 1,S
(  93) 02AB C202        ; 	adj #2
(  94) 02AD 8B6B        ; 	pli.s
(  95) 02AF AB8300      ; 	sta.w 0,I++
(  98) 02B2 ABE29704    ; 	psh.w #fn_004
(  99) 02B6 ABB507      ; 	lda.w n_006,X
( 100) 02B9 AB0A        ; 	asl.w a
( 101) 02BB 18          ; 	clc
( 102) 02BC CB7501      ; 	adc.w 1,S
( 103) 02BF CB9501      ; 	sta.w 1,S
( 104) 02C2 8B6B        ; 	pli.s
( 105) 02C4 ABA300      ; 	lda.w 0,I++
( 106) 02C7 AB95FD      ; 	sta.w RETURN_VALUE,X
( 108) 02CA ABB5FD      ; 	lda.w RETURN_VALUE,X
( 109) 02CD AB9A        ; 	txs.w
( 110) 02CF ABFA        ; 	plx.w
( 111) 02D1 60          ; 	rts
( 116) 02D2 ABDA        ; 	phx.w
( 117) 02D4 ABBA        ; 	tsx.w
( 119) 02D6 ABE29704    ; 	psh.w #fn_004
( 120) 02DA A900        ; 	lda #0
( 121) 02DC AB0A        ; 	asl.w a
( 122) 02DE 18          ; 	clc
( 123) 02DF CB7501      ; 	adc.w 1,S
( 124) 02E2 CB9501      ; 	sta.w 1,S
( 125) 02E5 A901        ; 	lda #1
( 126) 02E7 8B6B        ; 	pli.s
( 127) 02E9 AB8300      ; 	sta.w 0,I++
( 129) 02EC ABE29704    ; 	psh.w #fn_004
( 130) 02F0 A901        ; 	lda #1
( 131) 02F2 AB0A        ; 	asl.w a
( 132) 02F4 18          ; 	clc
( 133) 02F5 CB7501      ; 	adc.w 1,S
( 134) 02F8 CB9501      ; 	sta.w 1,S
( 135) 02FB A901        ; 	lda #1
( 136) 02FD 8B6B        ; 	pli.s
( 137) 02FF AB8300      ; 	sta.w 0,I++
( 139) 0302 A902        ; 	lda #2
( 140) 0304 AB8D9304    ; 	sta.w i_002
( 142) 0308 A917        ; 	lda #23
( 143) 030A ABCD9304    ; 	cmp.w i_002
( 144) 030E AB5003      ; 	bge L_011
( 145) 0311 4C3303      ; 	jmp L_012
( 147) 0314 ABE29704    ; 	psh.w #fn_004
( 148) 0318 ABAD9304    ; 	lda.w i_002
( 149) 031C AB0A        ; 	asl.w a
( 150) 031E 18          ; 	clc
( 151) 031F CB7501      ; 	adc.w 1,S
( 152) 0322 CB9501      ; 	sta.w 1,S
( 153) 0325 A900        ; 	lda #0
( 154) 0327 8B6B        ; 	pli.s
( 155) 0329 AB8300      ; 	sta.w 0,I++
( 156) 032C ABEE9304    ; 	inc.w i_002
( 157) 0330 4C0803      ; 	jmp L_010
( 159) 0333 ABCE9304    ; 	dec.w i_002
( 171) 0337 A917        ; 	lda #23
( 172) 0339 AB8D9304    ; 	sta.w i_002
( 174) 033D A916        ; 	lda #22
( 175) 033F AB48        ; 	pha.w
( 176) 0341 ABDA        ; 	phx.w
( 177) 0343 201F02      ; 	jsr fib_005
( 178) 0346 C204        ; 	adj #4
( 179) 0348 AB8D9504    ; 	sta.w j_003
( 181) 034C ABE28E04    ; 	psh.w #S_013
( 182) 0350 ABE20000    ; 	psh.w #0
( 183) 0354 ABE20400    ; 	psh.w #4
( 184) 0358 20F903      ; 	jsr _swrite
( 185) 035B C206        ; 	adj #6
( 187) 035D ABAD9304    ; 	lda.w i_002
( 188) 0361 AB48        ; 	pha.w
( 189) 0363 A902        ; 	lda #2
( 190) 0365 AB48        ; 	pha.w
( 191) 0367 200B04      ; 	jsr _iwrite
( 192) 036A C204        ; 	adj #4
( 194) 036C ABE28A04    ; 	psh.w #S_014
( 195) 0370 ABE20000    ; 	psh.w #0
( 196) 0374 ABE20400    ; 	psh.w #4
( 197) 0378 20F903      ; 	jsr _swrite
( 198) 037B C206        ; 	adj #6
( 200) 037D ABAD9504    ; 	lda.w j_003
( 201) 0381 AB48        ; 	pha.w
( 202) 0383 A905        ; 	lda #5
( 203) 0385 AB48        ; 	pha.w
( 204) 0387 200B04      ; 	jsr _iwrite
( 205) 038A C204        ; 	adj #4
( 209) 038C 20F303      ; 	jsr _writeln
( 210) 038F ABFA        ; 	plx.w
( 211) 0391 60          ; 	rts
( 223) 0392 A900        ;             lda #0          ; clear remainder (A)
( 224) 0394 0B          ;             dup a           ; push
( 225) 0395 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 226) 0398 A010        ;             ldy #16         ; bit counter
( 229) 039A 18          ;             clc
( 230) 039B AB0A        ;             asl.w a         ; shift AQ left
( 231) 039D 1B          ;             swp a
( 232) 039E AB2A        ;             rol.w a
( 234) 03A0 B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 237) 03A2 38          ;             sec
( 238) 03A3 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 240) 03A6 8004        ;             bra _idiv_Next
( 243) 03A8 18          ;             clc
( 244) 03A9 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 247) 03AC 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 248) 03AD 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 249) 03AF AB1A        ;             inc.w a
( 252) 03B1 88          ;             dey             ; loop until loop counter == 0
( 253) 03B2 D0E6        ;             bne _idiv_Lp
( 256) 03B4 1B          ;             swp a           ; Test remainder
( 257) 03B5 AB090000    ;             ora.w #0
( 258) 03B9 1004        ;             bpl _idiv_Finish
( 259) 03BB 18          ;             clc
( 260) 03BC CB7503      ;             adc.w 3,S
( 262) 03BF 1B          ;             swp a
( 264) 03C0 60          ;             rts
( 277) 03C1 A010        ;             ldy #16             ; y = bit count
( 278) 03C3 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 279) 03C5 0B          ;             dup a               ; A = { 0,  0,  x}
( 280) 03C6 0B          ;             dup a               ; A = { 0,  0,  0}
( 281) 03C7 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 282) 03CA 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 283) 03CC AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 284) 03D0 18          ;             clc                 ; initialize Booth recoding bit
( 285) 03D1 2B          ;             rot a               ; A = {PH, PL, `R}
( 287) 03D2 8003        ;             bra _imul_TstB
( 290) 03D4 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 291) 03D6 2B          ;             rot a               ; A = {PH, PL, `R}
( 293) 03D7 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 296) 03D9 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 298) 03DB 18          ;             clc
( 299) 03DC CB7505      ;             adc.w _M,S          ; PH += M
( 300) 03DF 8006        ;             bra _imul_ShftP
( 303) 03E1 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 305) 03E3 38          ;             sec
( 306) 03E4 CBF505      ;             sbc.w _M,S          ; PH -= M
( 309) 03E7 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 310) 03E9 2B          ;             rot a               ; A = {PL, `R, PH}
( 311) 03EA AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 312) 03EC 2B          ;             rot a               ; A = {`R, PH, PL}
( 315) 03ED 88          ;             dey
( 316) 03EE D0E4        ;             bne _imul_Lp
( 319) 03F0 2B          ;             rot a               ; A = {PH, PL, `R}
( 320) 03F1 1B          ;             swp a               ; A = {PL, PH, `R}
( 322) 03F2 60          ;             rts
( 335) 03F3 A90A        ;             lda #_newLine
( 336) 03F5 8D01F0      ;             sta _putChar
( 338) 03F8 60          ;             rts
( 350) 03F9 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 351) 03FC CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 352) 03FF 9B0B        ;             tai                     ; transfer sptr to IP
( 355) 0401 A300        ;             lda 0,I++               ; load char from strig
( 356) 0403 8D01F0      ;             sta _putChar            ; write char to output
( 358) 0406 AB88        ;             dey.w                   ; loop while string length <> 0
( 359) 0408 D0F7        ;             bne _swrite_Lp
( 361) 040A 60          ;             rts
( 374) 040B ABDA        ;             phx.w                   ; save current base pointer
( 375) 040D ABBA        ;             tsx.w                   ; assign new base pointer
( 377) 040F B505        ;             lda _fLenOff,X          ; load field width specifier
( 378) 0411 C905        ;             cmp #5                  ; compare against max integer digit count
( 379) 0413 AB3002      ;             ble _iwrite_SetCnt
( 380) 0416 A905        ;             lda #5
( 383) 0418 AB48        ;             pha.w                   ; set iteration count to fld width
( 384) 041A ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 387) 041D AB48        ;             pha.w                   ; push dividend argument to _idiv
( 388) 041F ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 389) 0423 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 390) 0427 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 391) 0429 1B          ;             swp a                   ; put the remainder into ATOS
( 393) 042A 18          ;             clc                     ; convert remainder into ASCII character
( 394) 042B 6930        ;             adc #48
( 395) 042D 48          ;             pha                     ; push LS digit of integer onto stack
( 397) 042E 2B          ;             rot a                   ; rotate quotient into ATOS position
( 399) 042F ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 400) 0432 D0E9        ;             bne _iwrite_Lp
( 402) 0434 0B          ;             dup a                   ; save integer part of the conversion
( 405) 0435 B505        ;             lda _fLenOff,X          ; load field width specifier
( 406) 0437 C905        ;             cmp #5                  ; compare against max integer digit count
( 407) 0439 AB300A      ;             ble _iwrite_GenPtr
( 408) 043C 38          ;             sec                     ; subtract max integer length from fld len
( 409) 043D E905        ;             sbc #5
( 410) 043F A8          ;             tay                     ; set difference as loop counter
( 411) 0440 A930        ;             lda #48                 ; fill remaining field with '0'
( 414) 0442 48          ;             pha
( 415) 0443 88          ;             dey
( 416) 0444 D0FC        ;             bne _iwrite_Fill_Lp
( 419) 0446 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 420) 0449 AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 421) 044B AB48        ;             pha.w                   ; push string pointer to stack
( 423) 044D 2B          ;             rot a                   ; restore integer part of the conversion
( 425) 044E ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 426) 0452 F00F        ;             beq _iwrite_Sup0
( 427) 0454 A000        ;             ldy #0
( 429) 0456 A92A        ;             lda #0x2A               ; fill integer field with '*'
( 430) 0458 8B9101      ;             sta (1,S),Y
( 431) 045B C8          ;             iny
( 432) 045C FBD505      ;             cmp.y _fLenOff,X
( 433) 045F D0F5        ;             bne _iwrite_ErrLp
( 434) 0461 8014        ;             bra _iwrite_Exit
( 437) 0463 A000        ;             ldy #0                  ; initialize string index
( 439) 0465 8BB101      ;             lda (1,S),Y
( 440) 0468 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 441) 046A D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 442) 046C A920        ;             lda #32                 ; replace leading 0 with ' '
( 443) 046E 8B9101      ;             sta (1,S),Y
( 444) 0471 C8          ;             iny                     ; increment string index and compare to fLen
( 445) 0472 FBD505      ;             cmp.y _fLenOff,X
( 446) 0475 D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 449) 0477 ABE20000    ;             psh.w #0                ; NULL argument
( 450) 047B B505        ;             lda _fLenOff,X          ; push field width specifier
( 451) 047D AB48        ;             pha.w
( 452) 047F 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
( 453) 0483 C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 455) 0485 AB9A        ;             txs.w                   ; deallocate stack variables
( 456) 0487 ABFA        ;             plx.w                   ; restore previous base pointer
( 457) 0489 60          ;             rts
( 463) 048A 5D203D20    ; S_014 .str "] = "
( 464) 048E 4669625B    ; S_013 .str "Fib["
( 465) 0492 00          ; _bss_start .byt 0
( 466) 0493 0000        ; i_002 .wrd 0
( 467) 0495 0000        ; j_003 .wrd 0
( 468) 0497 00000000    ; fn_004 .byt 0[48]
       049B 0000000000000000000000000000000000000000000000000000000000000000
       04BB 000000000000000000000000
( 469) 04C7 00          ; _bss_end .byt 0
( 470) 04C8 00000000    ; _stk .byt 0[1023]
       04CC 0000000000000000000000000000000000000000000000000000000000000000
       04EC 0000000000000000000000000000000000000000000000000000000000000000
       050C 0000000000000000000000000000000000000000000000000000000000000000
       052C 0000000000000000000000000000000000000000000000000000000000000000
       054C 0000000000000000000000000000000000000000000000000000000000000000
       056C 0000000000000000000000000000000000000000000000000000000000000000
       058C 0000000000000000000000000000000000000000000000000000000000000000
       05AC 0000000000000000000000000000000000000000000000000000000000000000
       05CC 0000000000000000000000000000000000000000000000000000000000000000
       05EC 0000000000000000000000000000000000000000000000000000000000000000
       060C 0000000000000000000000000000000000000000000000000000000000000000
       062C 0000000000000000000000000000000000000000000000000000000000000000
       064C 0000000000000000000000000000000000000000000000000000000000000000
       066C 0000000000000000000000000000000000000000000000000000000000000000
       068C 0000000000000000000000000000000000000000000000000000000000000000
       06AC 0000000000000000000000000000000000000000000000000000000000000000
       06CC 0000000000000000000000000000000000000000000000000000000000000000
       06EC 0000000000000000000000000000000000000000000000000000000000000000
       070C 0000000000000000000000000000000000000000000000000000000000000000
       072C 0000000000000000000000000000000000000000000000000000000000000000
       074C 0000000000000000000000000000000000000000000000000000000000000000
       076C 0000000000000000000000000000000000000000000000000000000000000000
       078C 0000000000000000000000000000000000000000000000000000000000000000
       07AC 0000000000000000000000000000000000000000000000000000000000000000
       07CC 0000000000000000000000000000000000000000000000000000000000000000
       07EC 0000000000000000000000000000000000000000000000000000000000000000
       080C 0000000000000000000000000000000000000000000000000000000000000000
       082C 0000000000000000000000000000000000000000000000000000000000000000
       084C 0000000000000000000000000000000000000000000000000000000000000000
       086C 0000000000000000000000000000000000000000000000000000000000000000
       088C 0000000000000000000000000000000000000000000000000000000000000000
       08AC 000000000000000000000000000000000000000000000000000000
( 471) 08C7 FF          ; _stk_top .byt -1
