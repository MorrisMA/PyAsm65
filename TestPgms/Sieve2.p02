[   0]    2 	.stk 1024
[   1]    3 	.cod 512
[   2]    4 STATIC_LINK .equ +5
[   3]    5 RETURN_VALUE .equ -3
[   4]    6 HIGH_RETURN_VALUE .equ -1
[   5]    7 _start
[   6]    8 	tsx.w		; Preserve original stack pointer
[   7]    9 	lds.w #_stk_top	; Initialize program stack pointer
[   8]   10 	stz _bss_start
[   9]   11 	ldx.w #_bss_start
[  10]   12 	ldy.w #_bss_start+1
[  11]   13 	lda.w #_stk_top
[  12]   14 	sec
[  13]   15 	sbc.w #_bss_start
[  14]   16 	mov #10
[  15]   17 	jmp _pc65_main
[  16]   27 _pc65_main .sub
[  17]   28 	phx.w
[  18]   29 	tsx.w
[  19]   36 	lda.w #500
[  20]   37 	sta.w limit_005
[  21]   40 	lda #1
[  22]   41 	dec.w a
[  23]   42 	asl.w a
[  24]   43 	tay.w 
[  25]   46 	lda #0
[  26]   48 	sta.w sieve_002,Y
[  27]   51 	lda #2
[  28]   52 	sta.w i_003
[  29]   53 L_008
[  30]   54 	lda.w #1000
[  31]   55 	cmp.w i_003
[  32]   56 	bge L_009
[  33]   57 	jmp L_010
[  34]   58 L_009
[  35]   61 	lda.w i_003
[  36]   62 	dec.w a
[  37]   63 	asl.w a
[  38]   64 	tay.w 
[  39]   67 	lda #1
[  40]   69 	sta.w sieve_002,Y
[  41]   70 	inc.w i_003
[  42]   71 	jmp L_008
[  43]   72 L_010
[  44]   73 	dec.w i_003
[  45]   76 	lda #1
[  46]   77 	sta.w prime_006
[  47]   80 L_011
[  48]   88 	inc.w prime_006
[  49]   90 L_013
[  50]   92 	lda.w prime_006
[  51]   93 	dec.w a
[  52]   94 	asl.w a
[  53]   95 	tay.w 
[  54]   99 	lda.w sieve_002,Y
[  55]  100 	eor #1
[  56]  102 	bne L_014
[  57]  103 	jmp L_015
[  58]  104 L_014
[  59]  112 	inc.w prime_006
[  60]  113 	jmp L_013
[  61]  114 L_015
[  62]  119 	lda.w prime_006
[  63]  122 	asl.w a
[  64]  123 	sta.w factor_007
[  65]  126 L_016
[  66]  127 	lda.w factor_007
[  67]  131 	cmp.w #1000
[  68]  133 	ble L_019-2
[  69]  134 	lda #0
[  70]  135 	bra L_019
[  71]  136 L_019T
[  72]  137 	lda #1
[  73]  138 L_019
[  74]  140 	bne L_017
[  75]  141 	jmp L_018
[  76]  142 L_017
[  77]  145 	lda.w factor_007
[  78]  146 	dec.w a
[  79]  147 	asl.w a
[  80]  148 	tay.w 
[  81]  151 	lda #0
[  82]  153 	sta.w sieve_002,Y
[  83]  155 	lda.w factor_007
[  84]  158 	clc
[  85]  159 	adc.w prime_006
[  86]  161 	sta.w factor_007
[  87]  164 	jmp L_016
[  88]  165 L_018
[  89]  166 	lda.w prime_006
[  90]  170 	cmp.w limit_005
[  91]  172 	bgt L_020-2
[  92]  173 	lda #0
[  93]  174 	bra L_020
[  94]  175 L_020T
[  95]  176 	lda #1
[  96]  177 L_020
[  97]  179 	bne L_012
[  98]  180 	jmp L_011
[  99]  181 L_012
[ 100]  184 	psh.w #S_021
[ 101]  185 	psh.w #0
[ 102]  186 	psh.w #21
[ 103]  187 	jsr _swrite
[ 104]  188 	adj #6
[ 105]  189 	jsr _writeln
[ 106]  191 	jsr _writeln
[ 107]  194 	lda #1
[ 108]  195 	sta.w i_003
[ 109]  197 L_022
[ 110]  200 	stz.w j_004
[ 111]  201 L_024
[ 112]  202 	lda #19
[ 113]  203 	cmp.w j_004
[ 114]  204 	bge L_025
[ 115]  205 	jmp L_026
[ 116]  206 L_025
[ 117]  208 	lda.w i_003
[ 118]  211 	clc
[ 119]  212 	adc.w j_004
[ 120]  214 	sta.w prime_006
[ 121]  217 	lda.w prime_006
[ 122]  218 	dec.w a
[ 123]  219 	asl.w a
[ 124]  220 	tay.w 
[ 125]  224 	lda.w sieve_002,Y
[ 126]  226 	bne L_027
[ 127]  227 	jmp L_028
[ 128]  228 L_027
[ 129]  230 	lda.w prime_006
[ 130]  231 	pha.w
[ 131]  233 	psh.w #3
[ 132]  234 	jsr _iwrite
[ 133]  235 	adj #4
[ 134]  237 	jmp L_029
[ 135]  238 L_028
[ 136]  240 	psh.w #S_030
[ 137]  241 	psh.w #0
[ 138]  242 	psh.w #3
[ 139]  243 	jsr _swrite
[ 140]  244 	adj #6
[ 141]  245 L_029
[ 142]  247 	inc.w j_004
[ 143]  248 	jmp L_024
[ 144]  249 L_026
[ 145]  250 	dec.w j_004
[ 146]  252 	jsr _writeln
[ 147]  254 	lda.w i_003
[ 148]  258 	clc
[ 149]  259 	adc.w #20
[ 150]  261 	sta.w i_003
[ 151]  262 	lda.w i_003
[ 152]  267 	cmp.w #1000
[ 153]  269 	bgt L_031-2
[ 154]  270 	lda #0
[ 155]  271 	bra L_031
[ 156]  272 L_031T
[ 157]  273 	lda #1
[ 158]  274 L_031
[ 159]  276 	bne L_023
[ 160]  277 	jmp L_022
[ 161]  278 L_023
[ 162]  279 	plx.w
[ 163]  280 	rts
[ 164]  281 	.end _pc65_main
[ 165]  285             .cod
[ 166]  287 _Q          .equ    5
[ 167]  288 _D          .equ    3
[ 168]  290 _idiv       .proc
[ 169]  291             lda #0          ; clear remainder (A)
[ 170]  292             dup a           ; push
[ 171]  293             lda.w _Q,S      ; load dividend (Q)
[ 172]  294             ldy #16         ; bit counter
[ 173]  296 _idiv_Lp
[ 174]  297             clc
[ 175]  298             asl.w a         ; shift AQ left
[ 176]  299             swp a
[ 177]  300             rol.w a
[ 178]  302             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
[ 179]  304 _idiv_Minus
[ 180]  305             sec
[ 181]  306             sbc.w _D,S      ; subtract divisor (D)
[ 182]  308             bra _idiv_Next
[ 183]  310 _idiv_Plus
[ 184]  311             clc
[ 185]  312             adc.w _D,S      ; add divisor (D)
[ 186]  314 _idiv_Next
[ 187]  315             swp a           ; restore order of Acc stack {Q, A, -}
[ 188]  316             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
[ 189]  317             inc.w a
[ 190]  319 _idiv_Dec
[ 191]  320             dey             ; loop until loop counter == 0
[ 192]  321             bne _idiv_Lp
[ 193]  323 _idiv_Exit
[ 194]  324             swp a           ; Test remainder
[ 195]  325             ora.w #0
[ 196]  326             bpl _idiv_Finish
[ 197]  327             clc
[ 198]  328             adc.w 3,S
[ 199]  329 _idiv_Finish
[ 200]  330             swp a
[ 201]  332             rts
[ 202]  334             .endp _idiv
[ 203]  338             .cod
[ 204]  340 _M          .equ    5
[ 205]  341 _R          .equ    3
[ 206]  343 _imul       .proc
[ 207]  344             ldy #16             ; y = bit count
[ 208]  345             lda #0              ; A = { 0,  x,  x} - clear product
[ 209]  346             dup a               ; A = { 0,  0,  x}
[ 210]  347             dup a               ; A = { 0,  0,  0}
[ 211]  348             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
[ 212]  349             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
[ 213]  350             ora.w #0            ; set N flag if msb ATOS == 1
[ 214]  351             clc                 ; initialize Booth recoding bit
[ 215]  352             rot a               ; A = {PH, PL, `R}
[ 216]  354             bra _imul_TstB
[ 217]  356 _imul_Lp
[ 218]  357             asl.w a             ; A = {`R << 1, PH, PL}
[ 219]  358             rot a               ; A = {PH, PL, `R}
[ 220]  359 _imul_TstB
[ 221]  360             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
[ 222]  362 _imul_AddShft
[ 223]  363             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
[ 224]  364 _imul_AddM
[ 225]  365             clc
[ 226]  366             adc.w _M,S          ; PH += M
[ 227]  367             bra _imul_ShftP
[ 228]  369 _imul_SubShft
[ 229]  370             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
[ 230]  371 _imul_SubM
[ 231]  372             sec
[ 232]  373             sbc.w _M,S          ; PH -= M
[ 233]  375 _imul_ShftP
[ 234]  376             asr.w a             ; A = {PH >> 1, PL, `R}
[ 235]  377             rot a               ; A = {PL, `R, PH}
[ 236]  378             ror.w a             ; A = {PL >> 2, `R, PH}
[ 237]  379             rot a               ; A = {`R, PH, PL}
[ 238]  381 _imul_Dec
[ 239]  382             dey
[ 240]  383             bne _imul_Lp
[ 241]  385 _imul_Exit
[ 242]  386             rot a               ; A = {PH, PL, `R}
[ 243]  387             swp a               ; A = {PL, PH, `R}
[ 244]  389             rts
[ 245]  391             .endp _imul
[ 246]  396             .cod
[ 247]  398 _newLine    .equ    0x0A
[ 248]  399 _putChar    .equ    0xF001
[ 249]  401 _writeln    .proc
[ 250]  402             lda #_newLine
[ 251]  403             sta _putChar
[ 252]  405             rts
[ 253]  407             .endp _writeln
[ 254]  411             .cod
[ 255]  413 _sPtrOff    .equ    7
[ 256]  414 _sLenOff    .equ    3
[ 257]  416 _swrite     .proc
[ 258]  417             ldy.w _sLenOff,S        ; load string length
[ 259]  418             lda.w _sPtrOff,S        ; load string pointer
[ 260]  419             tai                     ; transfer sptr to IP
[ 261]  421 _swrite_Lp
[ 262]  422             lda 0,I++               ; load char from strig
[ 263]  423             sta _putChar            ; write char to output
[ 264]  425             dey.w                   ; loop while string length <> 0
[ 265]  426             bne _swrite_Lp
[ 266]  428             rts
[ 267]  430             .endp _swrite
[ 268]  434             .cod
[ 269]  436 _iValOff    .equ    7
[ 270]  437 _fLenOff    .equ    5
[ 271]  438 _iCntOff    .equ    -1
[ 272]  440 _iwrite     .proc
[ 273]  441             phx.w                   ; save current base pointer
[ 274]  442             tsx.w                   ; assign new base pointer
[ 275]  444             lda _fLenOff,X          ; load field width specifier
[ 276]  445             cmp #5                  ; compare against max integer digit count
[ 277]  446             ble _iwrite_SetCnt
[ 278]  447             lda #5
[ 279]  449 _iwrite_SetCnt
[ 280]  450             pha.w                   ; set iteration count to fld width
[ 281]  451             lda.w _iValOff,X        ; load a with integer value
[ 282]  453 _iwrite_Lp
[ 283]  454             pha.w                   ; push dividend argument to _idiv
[ 284]  455             psh.w #10               ; push divisor argument to _idiv
[ 285]  456             csr _idiv               ; determine the remainder,
[ 286]  457             adj #4                  ; remove arguments passed to _idiv from stk
[ 287]  458             swp a                   ; put the remainder into ATOS
[ 288]  460             clc                     ; convert remainder into ASCII character
[ 289]  461             adc #48
[ 290]  462             pha                     ; push LS digit of integer onto stack
[ 291]  464             rot a                   ; rotate quotient into ATOS position
[ 292]  466             dec.w _iCntOff,X        ; decrement digit iteration count
[ 293]  467             bne _iwrite_Lp
[ 294]  469             dup a                   ; save integer part of the conversion
[ 295]  471 _iwrite_Fill
[ 296]  472             lda _fLenOff,X          ; load field width specifier
[ 297]  473             cmp #5                  ; compare against max integer digit count
[ 298]  474             ble _iwrite_GenPtr
[ 299]  475             sec                     ; subtract max integer length from fld len
[ 300]  476             sbc #5
[ 301]  477             tay                     ; set difference as loop counter
[ 302]  478             lda #48                 ; fill remaining field with '0'
[ 303]  480 _iwrite_Fill_Lp                     ; increase string on stack with fill data
[ 304]  481             pha
[ 305]  482             dey
[ 306]  483             bne _iwrite_Fill_Lp
[ 307]  485 _iwrite_GenPtr
[ 308]  486             tsa.w                   ; transfer current stk pointer to A
[ 309]  487             inc.w a                 ; remove stack pointer write bias
[ 310]  488             pha.w                   ; push string pointer to stack
[ 311]  490             rot a                   ; restore integer part of the conversion
[ 312]  492             cmp.w #0                ; test for 0. If not 0, int > 10^fld
[ 313]  493             beq _iwrite_Sup0
[ 314]  494             ldy #0
[ 315]  495 _iwrite_ErrLp
[ 316]  496             lda #0x2A               ; fill integer field with '*'
[ 317]  497             sta (1,S),Y
[ 318]  498             iny
[ 319]  499             cmp.y _fLenOff,X
[ 320]  500             bne _iwrite_ErrLp
[ 321]  501             bra _iwrite_Exit
[ 322]  503 _iwrite_Sup0
[ 323]  504             ldy #0                  ; initialize string index
[ 324]  505 _iwrite_Sup0_Lp
[ 325]  506             lda (1,S),Y
[ 326]  507             cmp #48                 ; if leading position == 0, replace with ' '
[ 327]  508             bne _iwrite_Exit        ; exit loop on first non-0 digit
[ 328]  509             lda #32                 ; replace leading 0 with ' '
[ 329]  510             sta (1,S),Y
[ 330]  511             iny                     ; increment string index and compare to fLen
[ 331]  512             cmp.y _fLenOff,X
[ 332]  513             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
[ 333]  515 _iwrite_Exit
[ 334]  516             psh.w #0                ; NULL argument
[ 335]  517             lda _fLenOff,X          ; push field width specifier
[ 336]  518             pha.w
[ 337]  519             csr _swrite             ; write integer value string using _swrite()
[ 338]  520             adj #6                  ; remove parameters to _swrite() from stack
[ 339]  522             txs.w                   ; deallocate stack variables
[ 340]  523             plx.w                   ; restore previous base pointer
[ 341]  524             rts
[ 342]  526             .endp _iwrite
[ 343]  528 	.dat
[ 344]  530 S_030 .str "   "
[ 345]  531 S_021 .str "Sieve of Eratosthenes"
[ 346]  532 _bss_start .byt 85
[ 347]  533 sieve_002 .byt 0[2000]
[ 348]  534 i_003 .wrd 0
[ 349]  535 j_004 .wrd 0
[ 350]  536 limit_005 .wrd 0
[ 351]  537 prime_006 .wrd 0
[ 352]  538 factor_007 .wrd 0
[ 353]  539 _bss_end .byt 85
[ 354]  540 _stk .byt 0[1023]
[ 355]  541 _stk_top .byt 0
[ 356]  543 	.end
