   2 	.stk 1024
   3 	.cod 512
   4 STATIC_LINK .equ +5
   5 RETURN_VALUE .equ -3
   6 HIGH_RETURN_VALUE .equ -1
   7 _start
   8 	tsx.w		; Preserve original stack pointer
   9 	lds.w #_stk_top	; Initialize program stack pointer
  10 	stz _bss_start
  11 	ldx.w #_bss_start
  12 	ldy.w #_bss_start+1
  13 	lda.w #_stk_top
  14 	sec
  15 	sbc.w #_bss_start
  16 	mov #10
  17 	jmp _pc65_main
  29 n_005 .equ +7
  30 i_006 .equ -5
  31 tmp_007 .equ -7
  32 fn1_008 .equ -9
  33 fn2_009 .equ -11
  34 fib_004 .sub
  35 	phx.w
  36 	tsx.w
  37 	adj #-4
  38 	adj #-8
  40 	lda #1
  41 	sta.w fn1_008,X
  43 	lda #0
  44 	sta.w fn2_009,X
  47 	lda.w n_005,X
  48 	pha.w
  49 	lda #1
  50 	xma.w 1,S
  51 	cmp.w 1,S
  52 	adj #2
  53 	php
  54 	lda #1
  55 	plp
  56 	blt L_012
  57 	lda #0
  58 L_012
  59 	cmp.w #1
  60 	beq L_010
  61 	jmp L_011
  62 L_010
  65 	lda.w fn2_009,X
  66 	sta.w RETURN_VALUE,X
  67 	jmp L_013
  68 L_011
  70 	lda #1
  71 	sta.w i_006,X
  73 L_014
  75 	lda.w fn1_008,X
  76 	pha.w
  77 	lda.w fn2_009,X
  78 	clc
  79 	adc.w 1,S
  80 	adj #2
  81 	sta.w tmp_007,X
  83 	lda.w fn1_008,X
  84 	sta.w fn2_009,X
  86 	lda.w tmp_007,X
  87 	sta.w fn1_008,X
  90 	lda.w i_006,X
  91 	pha.w
  92 	lda #1
  94 	clc
  95 	adc.w 1,S
  96 	adj #2
  97 	sta.w i_006,X
  98 	lda.w i_006,X
  99 	pha.w
 100 	lda.w n_005,X
 101 	xma.w 1,S
 102 	cmp.w 1,S
 103 	adj #2
 104 	php
 105 	lda #1
 106 	plp
 107 	bge L_016
 108 	lda #0
 109 L_016
 110 	cmp.w #1
 111 	beq L_015
 112 	jmp L_014
 113 L_015
 117 	lda.w fn1_008,X
 118 	sta.w RETURN_VALUE,X
 120 L_013
 121 	lda.w RETURN_VALUE,X
 122 	txs.w
 123 	plx.w
 124 	rts
 125 	.end fib_004
 128 _pc65_main .sub
 129 	phx.w
 130 	tsx.w
 137 	lda #23
 138 	sta.w i_002
 140 	lda.w i_002
 141 	pha.w
 142 	phx.w
 143 	jsr fib_004
 144 	adj #4
 145 	sta.w j_003
 147 	psh.w #S_017
 148 	psh.w #0
 149 	psh.w #4
 150 	jsr _swrite
 151 	adj #6
 153 	lda.w i_002
 154 	pha.w
 155 	lda #2
 156 	pha.w
 157 	jsr _iwrite
 158 	adj #4
 160 	psh.w #S_018
 161 	psh.w #0
 162 	psh.w #4
 163 	jsr _swrite
 164 	adj #6
 166 	lda.w j_003
 167 	pha.w
 168 	lda #5
 169 	pha.w
 170 	jsr _iwrite
 171 	adj #4
 174 	jsr _writeln
 175 	plx.w
 176 	rts
 177 	.end _pc65_main
 182             .cod
 184 _Q          .equ    5
 185 _D          .equ    3
 187 _idiv       .proc
 188             lda #0          ; clear remainder (A)
 189             dup a           ; push
 190             lda.w _Q,S      ; load dividend (Q)
 191             ldy #16         ; bit counter
 193 _idiv_Lp
 194             clc
 195             asl.w a         ; shift AQ left
 196             swp a
 197             rol.w a
 199             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
 201 _idiv_Minus
 202             sec
 203             sbc.w _D,S      ; subtract divisor (D)
 205             bra _idiv_Next
 207 _idiv_Plus
 208             clc
 209             adc.w _D,S      ; add divisor (D)
 211 _idiv_Next
 212             swp a           ; restore order of Acc stack {Q, A, -}
 213             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
 214             inc.w a
 216 _idiv_Dec
 217             dey             ; loop until loop counter == 0
 218             bne _idiv_Lp
 220 _idiv_Exit
 221             swp a           ; Test remainder
 222             ora.w #0
 223             bpl _idiv_Finish
 224             clc
 225             adc.w 3,S
 226 _idiv_Finish
 227             swp a
 229             rts
 231             .endp _idiv
 236             .cod
 238 _M          .equ    5
 239 _R          .equ    3
 241 _imul       .proc
 242             ldy #16             ; y = bit count
 243             lda #0              ; A = { 0,  x,  x} - clear product
 244             dup a               ; A = { 0,  0,  x}
 245             dup a               ; A = { 0,  0,  0}
 246             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
 247             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
 248             ora.w #0            ; set N flag if msb ATOS == 1
 249             clc                 ; initialize Booth recoding bit
 250             rot a               ; A = {PH, PL, `R}
 252             bra _imul_TstB
 254 _imul_Lp
 255             asl.w a             ; A = {`R << 1, PH, PL}
 256             rot a               ; A = {PH, PL, `R}
 257 _imul_TstB
 258             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
 260 _imul_AddShft
 261             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
 262 _imul_AddM
 263             clc
 264             adc.w _M,S          ; PH += M
 265             bra _imul_ShftP
 267 _imul_SubShft
 268             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
 269 _imul_SubM
 270             sec
 271             sbc.w _M,S          ; PH -= M
 273 _imul_ShftP
 274             asr.w a             ; A = {PH >> 1, PL, `R}
 275             rot a               ; A = {PL, `R, PH}
 276             ror.w a             ; A = {PL >> 2, `R, PH}
 277             rot a               ; A = {`R, PH, PL}
 279 _imul_Dec
 280             dey
 281             bne _imul_Lp
 283 _imul_Exit
 284             rot a               ; A = {PH, PL, `R}
 285             swp a               ; A = {PL, PH, `R}
 287             rts
 289             .endp _imul
 294             .cod
 296 _newLine    .equ    0x0A
 297 _putChar    .equ    0xF001
 299 _writeln    .proc
 300             lda #_newLine
 301             sta _putChar
 303             rts
 305             .endp _writeln
 309             .cod
 311 _sPtrOff    .equ    7
 312 _sLenOff    .equ    3
 314 _swrite     .proc
 315             ldy.w _sLenOff,S        ; load string length
 316             lda.w _sPtrOff,S        ; load string pointer
 317             tai                     ; transfer sptr to IP
 319 _swrite_Lp
 320             lda 0,I++               ; load char from strig
 321             sta _putChar            ; write char to output
 323             dey.w                   ; loop while string length <> 0
 324             bne _swrite_Lp
 326             rts
 328             .endp _swrite
 332             .cod
 334 _iValOff    .equ    7
 335 _fLenOff    .equ    5
 336 _iCntOff    .equ    -1
 338 _iwrite     .proc
 339             phx.w                   ; save current base pointer
 340             tsx.w                   ; assign new base pointer
 342             lda _fLenOff,X          ; load field width specifier
 343             cmp #5                  ; compare against max integer digit count
 344             ble _iwrite_SetCnt
 345             lda #5
 347 _iwrite_SetCnt
 348             pha.w                   ; set iteration count to fld width
 349             lda.w _iValOff,X        ; load a with integer value
 351 _iwrite_Lp
 352             pha.w                   ; push dividend argument to _idiv
 353             psh.w #10               ; push divisor argument to _idiv
 354             csr _idiv               ; determine the remainder,
 355             adj #4                  ; remove arguments passed to _idiv from stk
 356             swp a                   ; put the remainder into ATOS
 358             clc                     ; convert remainder into ASCII character
 359             adc #48
 360             pha                     ; push LS digit of integer onto stack
 362             rot a                   ; rotate quotient into ATOS position
 364             dec.w _iCntOff,X        ; decrement digit iteration count
 365             bne _iwrite_Lp
 367             dup a                   ; save integer part of the conversion
 369 _iwrite_Fill
 370             lda _fLenOff,X          ; load field width specifier
 371             cmp #5                  ; compare against max integer digit count
 372             ble _iwrite_GenPtr
 373             sec                     ; subtract max integer length from fld len
 374             sbc #5
 375             tay                     ; set difference as loop counter
 376             lda #48                 ; fill remaining field with '0'
 378 _iwrite_Fill_Lp                     ; increase string on stack with fill data
 379             pha
 380             dey
 381             bne _iwrite_Fill_Lp
 383 _iwrite_GenPtr
 384             tsa.w                   ; transfer current stk pointer to A
 385             inc.w a                 ; remove stack pointer write bias
 386             pha.w                   ; push string pointer to stack
 388             rot a                   ; restore integer part of the conversion
 390             cmp.w #0                ; test for 0. If not 0, int > 10^fld
 391             beq _iwrite_Sup0
 392             ldy #0
 393 _iwrite_ErrLp
 394             lda #0x2A               ; fill integer field with '*'
 395             sta (1,S),Y
 396             iny
 397             cmp.y _fLenOff,X
 398             bne _iwrite_ErrLp
 399             bra _iwrite_Exit
 401 _iwrite_Sup0
 402             ldy #0                  ; initialize string index
 403 _iwrite_Sup0_Lp
 404             lda (1,S),Y
 405             cmp #48                 ; if leading position == 0, replace with ' '
 406             bne _iwrite_Exit        ; exit loop on first non-0 digit
 407             lda #32                 ; replace leading 0 with ' '
 408             sta (1,S),Y
 409             iny                     ; increment string index and compare to fLen
 410             cmp.y _fLenOff,X
 411             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
 413 _iwrite_Exit
 414             psh.w #0                ; NULL argument
 415             lda _fLenOff,X          ; push field width specifier
 416             pha.w
 417             csr _swrite             ; write integer value string using _swrite()
 418             adj #6                  ; remove parameters to _swrite() from stack
 420             txs.w                   ; deallocate stack variables
 421             plx.w                   ; restore previous base pointer
 422             rts
 424             .endp _iwrite
 426 	.dat
 428 S_018 .str "] = "
 429 S_017 .str "Fib["
 430 _bss_start .byt 0
 431 i_002 .wrd 0
 432 j_003 .wrd 0
 433 _bss_end .byt 0
 434 _stk .byt 0[1023]
 435 _stk_top .byt -1
 437 	.end
