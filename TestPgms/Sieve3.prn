(   1)                  ; ;    1: PROGRAM eratosthenes(output);
(   2)                  ; 	.stk 256
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w
(   9) 0202 CBA20409    ; 	lds.w #_stk_top
(  10) 0206 9C0E04      ; 	stz _bss_start
(  11) 0209 ABA20E04    ; 	ldx.w #_bss_start
(  12) 020D ABA00F04    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA90409    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE90E04    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4C1F02      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: CONST
(  20)                  ; ;    4:     max = 1000;
(  21)                  ; ;    5: 
(  22)                  ; ;    6: VAR
(  23)                  ; ;    7:     sieve : ARRAY [1..max] OF BOOLEAN;
(  24)                  ; ;    8:     i, j, limit, prime, factor : INTEGER;
(  25)                  ; ;    9: 
(  26)                  ; ;   10: BEGIN
(  27)                  ; _pc65_main .sub
(  28) 021F ABDA        ; 	phx.w
(  29) 0221 ABBA        ; 	tsx.w
(  30)                  ; ;   11:     limit := max DIV 2;
(  31) 0223 ABA9F401    ; 	lda.w #500
(  32) 0227 AB8DFC07    ; 	sta.w limit_005
(  33)                  ; ;   12:     sieve[1] := FALSE;
(  34) 022B A900        ; 	lda #0
(  35) 022D 8D1004      ; 	sta sieve_002
(  36)                  ; ;   13: 
(  37)                  ; ;   14:     FOR i := 2 TO max DO
(  38)                  ; L_008
(  39)                  ; L_009
(  40)                  ; ;   15:         sieve[i] := TRUE;
(  41) 0230 A9FF        ;     lda #0xFF
(  42) 0232 8D1104      ;     sta sieve_002+1
(  43) 0235 EB0B        ;     dup x
(  44) 0237 ABA21104    ;     ldx.w #sieve_002+1
(  45) 023B ABA01204    ;     ldy.w #sieve_002+2
(  46) 023F ABA9E703    ;     lda.w #999
(  47) 0243 540A        ;     mov #10
(  48) 0245 EB2B        ;     rot x
(  49)                  ; L_010
(  50)                  ; ;   16: 
(  51)                  ; ;   17:     prime := 1;
(  52) 0247 A901        ; 	lda #1
(  53) 0249 AB8DFE07    ; 	sta.w prime_006
(  54)                  ; ;   18: 
(  55)                  ; ;   19:     REPEAT
(  56)                  ; L_011
(  57)                  ; ;   20:         prime := prime + 1;
(  58) 024D ABEEFE07    ; 	inc.w prime_006
(  59)                  ; ;   21:         WHILE NOT sieve[prime] DO
(  60)                  ; L_013
(  61) 0251 ABE21004    ; 	psh.w #sieve_002
(  62) 0255 ABACFE07    ; 	ldy.w prime_006
(  63) 0259 AB88        ; 	dey.w
(  64) 025B 8BB101      ;     lda (1,S),Y
(  65) 025E C202        ;     adj #2
(  66) 0260 D006        ; 	bne L_015
(  67)                  ; L_014
(  68)                  ; ;   22:             prime := prime + 1;
(  69) 0262 ABEEFE07    ; 	inc.w prime_006
(  70) 0266 80E9        ; 	bra L_013
(  71)                  ; L_015
(  72)                  ; ;   23: 
(  73)                  ; ;   24:         factor := 2*prime;
(  74) 0268 ABADFE07    ; 	lda.w prime_006
(  75) 026C AB0A        ; 	asl.w a
(  76) 026E AB8D0008    ; 	sta.w factor_007
(  77)                  ; ;   25: 
(  78)                  ; ;   26:         WHILE factor <= max DO BEGIN
(  79)                  ; L_016
(  80) 0272 ABAD0008    ; 	lda.w factor_007
(  81) 0276 ABC9E803    ; 	cmp.w #1000
(  82)                  ; L_019
(  83) 027A AB1020      ; 	bgt L_018
(  84)                  ; L_017
(  85)                  ; ;   27:             sieve[factor] := FALSE;
(  86) 027D ABE21004    ; 	psh.w #sieve_002
(  87) 0281 ABAC0008    ; 	ldy.w factor_007
(  88) 0285 AB88        ; 	dey.w
(  89) 0287 A900        ; 	lda #0
(  90) 0289 8B9101      ; 	sta (1,S),Y
(  91) 028C C202        ;     adj #2
(  92)                  ; ;   28:             factor := factor + prime;
(  93) 028E ABAD0008    ; 	lda.w factor_007
(  94) 0292 18          ; 	clc
(  95) 0293 AB6DFE07    ; 	adc.w prime_006
(  96) 0297 AB8D0008    ; 	sta.w factor_007
(  97)                  ; ;   29:         END
(  98) 029B 80D5        ; 	bra L_016
(  99)                  ; ;   30:     UNTIL prime > limit;
( 100)                  ; L_018
( 101) 029D ABADFE07    ; 	lda.w prime_006
( 102) 02A1 ABCDFC07    ; 	cmp.w limit_005
( 103)                  ; L_020
( 104) 02A5 AB1003      ; 	bgt L_012
( 105) 02A8 4C4D02      ; 	jmp L_011
( 106)                  ; L_012
( 107)                  ; ;   31: 
( 108)                  ; ;   32:     writeln('Sieve of Eratosthenes');
( 109) 02AB ABE2F903    ; 	psh.w #S_021
( 110) 02AF ABE20000    ; 	psh.w #0
( 111) 02B3 ABE21500    ; 	psh.w #21
( 112) 02B7 20A903      ; 	jsr _swrite
( 113) 02BA C206        ; 	adj #6
( 114) 02BC 20A303      ; 	jsr _writeln
( 115)                  ; ;   33:     writeln;
( 116) 02BF 20A303      ; 	jsr _writeln
( 117)                  ; ;   34: 
( 118)                  ; ;   35:     i := 1;
( 119) 02C2 A901        ; 	lda #1
( 120) 02C4 AB8DF807    ; 	sta.w i_003
( 121)                  ; ;   36:     REPEAT
( 122)                  ; L_022
( 123)                  ; ;   37:         FOR j := 0 TO 19 DO BEGIN
( 124) 02C8 A900        ; 	lda #0
( 125) 02CA AB8DFA07    ; 	sta.w j_004
( 126)                  ; L_024
( 127) 02CE A913        ; 	lda #19
( 128) 02D0 ABCDFA07    ; 	cmp.w j_004
( 129) 02D4 AB5003      ; 	bge L_025
( 130) 02D7 4C2503      ; 	jmp L_026
( 131)                  ; L_025
( 132)                  ; ;   38:             prime := i + j;
( 133) 02DA ABADF807    ; 	lda.w i_003
( 134) 02DE 18          ; 	clc
( 135) 02DF AB6DFA07    ;     adc.w j_004
( 136) 02E3 AB8DFE07    ; 	sta.w prime_006
( 137)                  ; ;   39:             IF sieve[prime] THEN
( 138) 02E7 ABE21004    ; 	psh.w #sieve_002
( 139) 02EB ABACFE07    ; 	ldy.w prime_006
( 140) 02EF AB88        ; 	dey.w
( 141) 02F1 8BB101      ; 	lda (1,S),Y
( 142) 02F4 C202        ;     adj #2
( 143) 02F6 D003        ; 	bne L_027
( 144) 02F8 4C0D03      ; 	jmp L_028
( 145)                  ; L_027
( 146)                  ; ;   40:                 write(prime:3)
( 147) 02FB ABADFE07    ; 	lda.w prime_006
( 148) 02FF AB48        ; 	pha.w
( 149) 0301 ABE20300    ; 	psh.w #3
( 150)                  ; 	pha.w
( 151) 0305 20BB03      ; 	jsr _iwrite
( 152) 0308 C204        ; 	adj #4
( 153)                  ; ;   41:             ELSE
( 154) 030A 4C1E03      ; 	jmp L_029
( 155)                  ; L_028
( 156)                  ; ;   42:                 write('   ');
( 157) 030D ABE2F603    ; 	psh.w #S_030
( 158) 0311 ABE20000    ; 	psh.w #0
( 159) 0315 ABE20300    ; 	psh.w #3
( 160) 0319 20A903      ; 	jsr _swrite
( 161) 031C C206        ; 	adj #6
( 162)                  ; L_029
( 163)                  ; ;   43:         END;
( 164) 031E ABEEFA07    ; 	inc.w j_004
( 165) 0322 4CCE02      ; 	jmp L_024
( 166)                  ; L_026
( 167)                  ; ;   44:         writeln;
( 168) 0325 20A303      ; 	jsr _writeln
( 169)                  ; ;   45:         i := i + 20
( 170) 0328 ABADF807    ; 	lda.w i_003
( 171) 032C 18          ; 	clc
( 172) 032D AB691400    ; 	adc.w #20
( 173)                  ; ;   46:     UNTIL i > max
( 174) 0331 AB8DF807    ; 	sta.w i_003
( 175)                  ; ;   47: END.
( 176) 0335 ABC9E803    ; 	cmp.w #1000
( 177)                  ; L_031
( 178) 0339 AB1003      ; 	bgt L_023
( 179) 033C 4CC802      ; 	jmp L_022
( 180)                  ; L_023
( 181) 033F ABFA        ; 	plx.w
( 182) 0341 60          ; 	rts
( 183)                  ; 	.end _pc65_main
( 184)                  ; ;
( 185)                  ; ;   unsigned division 16 x 16
( 186)                  ; ;
( 187)                  ;             .cod
( 188)                  ; ;
( 189)                  ; _Q          .equ    5
( 190)                  ; _D          .equ    3
( 191)                  ; ;
( 192)                  ; _idiv       .proc
( 193) 0342 A900        ;             lda #0
( 194) 0344 0B          ;             dup a
( 195) 0345 CBB505      ;             lda.w _Q,S
( 196) 0348 A010        ;             ldy #16
( 197)                  ; ;
( 198)                  ; _idiv_Lp    
( 199) 034A 18          ;             clc
( 200) 034B AB0A        ;             asl.w a
( 201) 034D 1B          ;             swp a
( 202) 034E AB2A        ;             rol.w a
( 203)                  ; ;
( 204) 0350 B006        ;             bcs _idiv_Plus
( 205)                  ; ;
( 206)                  ; _idiv_Minus
( 207) 0352 38          ;             sec
( 208) 0353 CBF503      ;             sbc.w _D,S
( 209)                  ; ;
( 210) 0356 8004        ;             bra _idiv_Next
( 211)                  ; ;
( 212)                  ; _idiv_Plus
( 213) 0358 18          ;             clc
( 214) 0359 CB7503      ;             adc.w _D,S
( 215)                  ; ;
( 216)                  ; _idiv_Next    
( 217) 035C 1B          ;             swp a
( 218) 035D 3002        ;             bmi _idiv_Dec
( 219) 035F AB1A        ;             inc.w a
( 220)                  ; ;
( 221)                  ; _idiv_Dec
( 222) 0361 88          ;             dey
( 223) 0362 D0E6        ;             bne _idiv_Lp
( 224)                  ; ;
( 225)                  ; _idiv_Exit
( 226) 0364 1B          ;             swp a
( 227) 0365 AB090000    ;             ora.w #0
( 228) 0369 1004        ;             bpl _idiv_Finish
( 229) 036B 18          ;             clc
( 230) 036C CB7503      ;             adc.w 3,S
( 231)                  ; _idiv_Finish
( 232) 036F 1B          ;             swp a
( 233)                  ; ;
( 234) 0370 60          ;             rts
( 235)                  ; ;
( 236)                  ;             .endp _idiv
( 237)                  ; ;
( 238)                  ; ; signed multiplication: 16 x 16 => 32
( 239)                  ; ;
( 240)                  ;             .cod
( 241)                  ; ;
( 242)                  ; _M          .equ    5
( 243)                  ; _R          .equ    3
( 244)                  ; ;
( 245)                  ; _imul       .proc
( 246) 0371 A010        ;             ldy #16
( 247) 0373 A900        ;             lda #0
( 248) 0375 0B          ;             dup a
( 249) 0376 0B          ;             dup a
( 250) 0377 CBB503      ;             lda.w _R,S
( 251) 037A 9B2B        ;             rev
( 252) 037C AB090000    ;             ora.w #0
( 253) 0380 18          ;             clc
( 254) 0381 2B          ;             rot a
( 255)                  ; ;
( 256) 0382 8003        ;             bra _imul_TstB
( 257)                  ; ;
( 258)                  ; _imul_Lp
( 259) 0384 AB0A        ;             asl.w a
( 260) 0386 2B          ;             rot a
( 261)                  ; _imul_TstB
( 262) 0387 9008        ;             bcc _imul_SubShft
( 263)                  ; ;
( 264)                  ; _imul_AddShft
( 265) 0389 300C        ;             bmi _imul_ShftP
( 266)                  ; _imul_AddM
( 267) 038B 18          ;             clc
( 268) 038C CB7505      ;             adc.w _M,S
( 269) 038F 8006        ;             bra _imul_ShftP
( 270)                  ; ;
( 271)                  ; _imul_SubShft
( 272) 0391 1004        ;             bpl _imul_ShftP
( 273)                  ; _imul_SubM
( 274) 0393 38          ;             sec
( 275) 0394 CBF505      ;             sbc.w _M,S
( 276)                  ; ;
( 277)                  ; _imul_ShftP
( 278) 0397 BB4A        ;             asr.w a
( 279) 0399 2B          ;             rot a
( 280) 039A AB6A        ;             ror.w a
( 281) 039C 2B          ;             rot a
( 282)                  ; ;
( 283)                  ; _imul_Dec
( 284) 039D 88          ;             dey
( 285) 039E D0E4        ;             bne _imul_Lp
( 286)                  ; ;
( 287)                  ; _imul_Exit
( 288) 03A0 2B          ;             rot a
( 289) 03A1 1B          ;             swp a
( 290)                  ; ;
( 291) 03A2 60          ;             rts
( 292)                  ; ;
( 293)                  ;             .endp _imul
( 294)                  ; 
( 295)                  ; ;
( 296)                  ; ; put <newLine> to output
( 297)                  ; ;
( 298)                  ;             .cod
( 299)                  ; ;
( 300)                  ; _newLine    .equ    0x0A
( 301)                  ; _putChar    .equ    0xF001
( 302)                  ; ;
( 303)                  ; _writeln    .proc
( 304) 03A3 A90A        ;             lda #_newLine
( 305) 03A5 8D01F0      ;             sta _putChar
( 306)                  ; ;
( 307) 03A8 60          ;             rts
( 308)                  ; ;
( 309)                  ;             .endp _writeln
( 310)                  ; ;
( 311)                  ; ; put string to output
( 312)                  ; ;
( 313)                  ;             .cod
( 314)                  ; ;
( 315)                  ; _sPtrOff    .equ    7
( 316)                  ; _sLenOff    .equ    3
( 317)                  ; ;
( 318)                  ; _swrite     .proc
( 319) 03A9 CBB403      ;             ldy.w _sLenOff,S
( 320) 03AC CBB507      ;             lda.w _sPtrOff,S
( 321) 03AF 9B0B        ;             tai
( 322)                  ; ;
( 323)                  ; _swrite_Lp
( 324) 03B1 A300        ;             lda 0,I++
( 325) 03B3 8D01F0      ;             sta _putChar
( 326)                  ; ;
( 327) 03B6 AB88        ;             dey.w
( 328) 03B8 D0F7        ;             bne _swrite_Lp
( 329)                  ; ;
( 330) 03BA 60          ;             rts
( 331)                  ; ;
( 332)                  ;             .endp _swrite
( 333)                  ; ; put integer to output
( 334)                  ;             .cod
( 335)                  ; ;
( 336)                  ; _iValOff    .equ    7
( 337)                  ; _fLenOff    .equ    5
( 338)                  ; _iCntOff    .equ    -1
( 339)                  ; ;
( 340)                  ; _iwrite     .proc
( 341) 03BB ABDA        ;             phx.w
( 342) 03BD ABBA        ;             tsx.w
( 343)                  ; ;
( 344) 03BF ABE20500    ;             psh.w #5
( 345) 03C3 ABB507      ;             lda.w _iValOff,X
( 346)                  ; ; 
( 347)                  ; _iwrite_Lp
( 348) 03C6 AB48        ;             pha.w
( 349) 03C8 ABE20A00    ;             psh.w #10
( 350) 03CC 9B5C72FF    ;             csr _idiv
( 351) 03D0 C204        ;             adj #4
( 352) 03D2 1B          ;             swp a
( 353)                  ; ;
( 354) 03D3 18          ;             clc
( 355) 03D4 6930        ;             adc #48
( 356) 03D6 48          ;             pha
( 357)                  ; ;
( 358) 03D7 2B          ;             rot a
( 359)                  ; ;
( 360) 03D8 ABD6FF      ;             dec.w _iCntOff,X
( 361) 03DB D0E9        ;             bne _iwrite_Lp
( 362)                  ; ;
( 363) 03DD CB8A        ;             tsa.w
( 364) 03DF AB1A        ;             inc.w a
( 365)                  ; ;
( 366) 03E1 AB48        ;             pha.w
( 367) 03E3 ABE20000    ;             psh.w #0
( 368) 03E7 ABE20500    ;             psh.w #5
( 369) 03EB 9B5CBAFF    ;             csr _swrite
( 370) 03EF C206        ;             adj #6
( 371)                  ; ;
( 372) 03F1 AB9A        ;             txs.w
( 373) 03F3 ABFA        ;             plx.w
( 374) 03F5 60          ;             rts
( 375)                  ; ;
( 376)                  ;             .endp _iwrite
( 377)                  ; 
( 378)                  ; 	.dat
( 379)                  ; 
( 380) 03F6 202020      ; S_030 .str "   "
( 381) 03F9 53696576    ; S_021 .str "Sieve of Eratosthenes"
       03FD 65206F6620457261746F737468656E6573
( 382) 040E 0000        ; _bss_start .byt 2
( 383) 0410 00000000    ; sieve_002 .byt 1000
       0414 0000000000000000000000000000000000000000000000000000000000000000
       0434 0000000000000000000000000000000000000000000000000000000000000000
       0454 0000000000000000000000000000000000000000000000000000000000000000
       0474 0000000000000000000000000000000000000000000000000000000000000000
       0494 0000000000000000000000000000000000000000000000000000000000000000
       04B4 0000000000000000000000000000000000000000000000000000000000000000
       04D4 0000000000000000000000000000000000000000000000000000000000000000
       04F4 0000000000000000000000000000000000000000000000000000000000000000
       0514 0000000000000000000000000000000000000000000000000000000000000000
       0534 0000000000000000000000000000000000000000000000000000000000000000
       0554 0000000000000000000000000000000000000000000000000000000000000000
       0574 0000000000000000000000000000000000000000000000000000000000000000
       0594 0000000000000000000000000000000000000000000000000000000000000000
       05B4 0000000000000000000000000000000000000000000000000000000000000000
       05D4 0000000000000000000000000000000000000000000000000000000000000000
       05F4 0000000000000000000000000000000000000000000000000000000000000000
       0614 0000000000000000000000000000000000000000000000000000000000000000
       0634 0000000000000000000000000000000000000000000000000000000000000000
       0654 0000000000000000000000000000000000000000000000000000000000000000
       0674 0000000000000000000000000000000000000000000000000000000000000000
       0694 0000000000000000000000000000000000000000000000000000000000000000
       06B4 0000000000000000000000000000000000000000000000000000000000000000
       06D4 0000000000000000000000000000000000000000000000000000000000000000
       06F4 0000000000000000000000000000000000000000000000000000000000000000
       0714 0000000000000000000000000000000000000000000000000000000000000000
       0734 0000000000000000000000000000000000000000000000000000000000000000
       0754 0000000000000000000000000000000000000000000000000000000000000000
       0774 0000000000000000000000000000000000000000000000000000000000000000
       0794 0000000000000000000000000000000000000000000000000000000000000000
       07B4 0000000000000000000000000000000000000000000000000000000000000000
       07D4 0000000000000000000000000000000000000000000000000000000000000000
       07F4 00000000
( 384) 07F8 0000        ; i_003 .wrd 1
( 385) 07FA 0000        ; j_004 .wrd 1
( 386) 07FC 0000        ; limit_005 .wrd 1
( 387) 07FE 0000        ; prime_006 .wrd 1
( 388) 0800 0000        ; factor_007 .wrd 1
( 389) 0802 0000        ; _bss_end .byt 2
( 390) 0804 00000000    ; _stk .byt 256
       0808 0000000000000000000000000000000000000000000000000000000000000000
       0828 0000000000000000000000000000000000000000000000000000000000000000
       0848 0000000000000000000000000000000000000000000000000000000000000000
       0868 0000000000000000000000000000000000000000000000000000000000000000
       0888 0000000000000000000000000000000000000000000000000000000000000000
       08A8 0000000000000000000000000000000000000000000000000000000000000000
       08C8 0000000000000000000000000000000000000000000000000000000000000000
       08E8 00000000000000000000000000000000000000000000000000000000
( 391) 0904 00          ; _stk_top .byt 1
( 392)                  ; 
( 393)                  ; 	.end
