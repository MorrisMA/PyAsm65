(   1)                  ; ;    1: PROGRAM eratosthenes(output);
(   2)                  ;     .stk 256
(   3)                  ;     .cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ;     tsx.w       ; Preserve original stack pointer
(   9) 0202 CBA24509    ;     lds.w #_stk_top ; Initialize program stack pointer
(  10) 0206 9C5204      ;     stz _bss_start
(  11) 0209 ABA25204    ;     ldx.w #_bss_start
(  12) 020D ABA05304    ;     ldy.w #_bss_start+1
(  13) 0211 ABA94509    ;     lda.w #_stk_top
(  14) 0215 38          ;     sec
(  15) 0216 ABE95204    ;     sbc.w #_bss_start
(  16) 021A 540A        ;     mov #10
(  17) 021C 4C1F02      ;     jmp _pc65_main
(  18)                  ; ;    2:
(  19)                  ; ;    3: CONST
(  20)                  ; ;    4:     max = 1000;
(  21)                  ; ;    5:
(  22)                  ; ;    6: VAR
(  23)                  ; ;    7:     sieve : ARRAY [1..max] OF BOOLEAN;
(  24)                  ; ;    8:     i, j, limit, prime, factor : INTEGER;
(  25)                  ; ;    9:
(  26)                  ; ;   10: BEGIN
(  27)                  ; _pc65_main .sub
(  28) 021F ABDA        ;     phx.w
(  29) 0221 ABBA        ;     tsx.w
(  30)                  ; ;   11:     limit := max DIV 2;
(  31) 0223 ABA9F401    ;     lda.w #500
(  32) 0227 AB8D3F08    ;     sta.w limit_005
(  33)                  ; ;   12:     sieve[1] := FALSE;
(  34) 022B A900        ;     lda #0
(  35) 022D 8D5304      ;     sta sieve_002
(  36)                  ; ;   13:
(  37)                  ; ;   14:     FOR i := 2 TO max DO
(  38)                  ; L_008
(  39)                  ; L_009
(  40)                  ; ;   15:         sieve[i] := TRUE;
(  41) 0230 A9FF        ;     lda #0xFF
(  42) 0232 8D5404      ;     sta sieve_002+1
(  43) 0235 EB0B        ;     dup x
(  44) 0237 ABA25404    ;     ldx.w #sieve_002+1
(  45) 023B ABA05504    ;     ldy.w #sieve_002+2
(  46) 023F ABA9E703    ;     lda.w #1000-1
(  47) 0243 540A        ;     mov #10
(  48) 0245 EB2B        ;     rot x
(  49)                  ; L_010
(  50)                  ; ;   16:
(  51)                  ; ;   17:     prime := 1;
(  52) 0247 A901        ;     lda #1
(  53) 0249 AB8D4108    ;     sta.w prime_006
(  54)                  ; ;   18:
(  55)                  ; ;   19:     REPEAT
(  56)                  ; L_011
(  57)                  ; ;   20:         prime := prime + 1;
(  58) 024D ABEE4108    ;     inc.w prime_006
(  59)                  ; ;   21:         WHILE NOT sieve[prime] DO
(  60)                  ; L_013
(  61) 0251 ABE25304    ;     psh.w #sieve_002
(  62) 0255 ABAC4108    ;     ldy.w prime_006
(  63) 0259 AB88        ;     dey.w
(  64) 025B 8BB101      ;     lda (1,S),Y
(  65) 025E C202        ;     adj #2
(  66) 0260 F002        ;     beq L_014
(  67) 0262 8006        ;     bra L_015
(  68)                  ; L_014
(  69)                  ; ;   22:             prime := prime + 1;
(  70) 0264 ABEE4108    ;     inc.w prime_006
(  71) 0268 80E7        ;     bra L_013
(  72)                  ; L_015
(  73)                  ; ;   23:
(  74)                  ; ;   24:         factor := 2*prime;
(  75) 026A ABAD4108    ;     lda.w prime_006
(  76) 026E AB0A        ;     asl.w a
(  77) 0270 AB8D4308    ;     sta.w factor_007
(  78)                  ; ;   25:
(  79)                  ; ;   26:         WHILE factor <= max DO BEGIN
(  80)                  ; L_016
(  81) 0274 ABAD4308    ;     lda.w factor_007
(  82) 0278 ABC9E803    ;     cmp.w #1000
(  83) 027C AB3002      ;     ble L_017
(  84) 027F 8020        ;     bra L_018
(  85)                  ; L_017
(  86)                  ; ;   27:             sieve[factor] := FALSE;
(  87) 0281 ABE25304    ;     psh.w #sieve_002
(  88) 0285 ABAC4308    ;     ldy.w factor_007
(  89) 0289 AB88        ;     dey.w
(  90) 028B A900        ;     lda #0
(  91) 028D 8B9101      ;     sta (1,S),Y
(  92) 0290 C202        ;     adj #2
(  93)                  ; ;   28:             factor := factor + prime;
(  94) 0292 ABAD4308    ;     lda.w factor_007
(  95) 0296 18          ;     clc
(  96) 0297 AB6D4108    ;     adc.w prime_006
(  97) 029B AB8D4308    ;     sta.w factor_007
(  98)                  ; ;   29:         END
(  99) 029F 80D3        ;     bra L_016
( 100)                  ; ;   30:     UNTIL prime > limit;
( 101)                  ; L_018
( 102) 02A1 ABAD4108    ;     lda.w prime_006
( 103) 02A5 ABCD3F08    ;     cmp.w limit_005
( 104) 02A9 AB1003      ;     bgt L_012
( 105) 02AC 4C4D02      ;     jmp L_011
( 106)                  ; L_012
( 107)                  ; ;   31:
( 108)                  ; ;   32:     writeln('Sieve of Eratosthenes');
( 109) 02AF ABE23D04    ;     psh.w #S_021
( 110) 02B3 ABE20000    ;     psh.w #0
( 111) 02B7 ABE21500    ;     psh.w #21
( 112) 02BB 20A803      ;     jsr _swrite
( 113) 02BE C206        ;     adj #6
( 114) 02C0 20A203      ;     jsr _writeln
( 115)                  ; ;   33:     writeln;
( 116) 02C3 20A203      ;     jsr _writeln
( 117)                  ; ;   34:
( 118)                  ; ;   35:     i := 1;
( 119) 02C6 A901        ;     lda #1
( 120) 02C8 AB8D3B08    ;     sta.w i_003
( 121)                  ; ;   36:     REPEAT
( 122)                  ; L_022
( 123)                  ; ;   37:         FOR j := 0 TO 19 DO BEGIN
( 124) 02CC A900        ;     lda #0
( 125) 02CE AB8D3D08    ;     sta.w j_004
( 126)                  ; L_024
( 127) 02D2 A913        ;     lda #19
( 128) 02D4 ABCD3D08    ;     cmp.w j_004
( 129) 02D8 AB5002      ;     bge L_025
( 130) 02DB 8048        ;     bra L_026
( 131)                  ; L_025
( 132)                  ; ;   38:             prime := i + j;
( 133) 02DD ABAD3B08    ;     lda.w i_003
( 134) 02E1 18          ;     clc
( 135) 02E2 AB6D3D08    ;     adc.w j_004
( 136) 02E6 AB8D4108    ;     sta.w prime_006
( 137)                  ; ;   39:             IF sieve[prime] THEN
( 138) 02EA ABE25304    ;     psh.w #sieve_002
( 139) 02EE ABAC4108    ;     ldy.w prime_006
( 140) 02F2 AB88        ;     dey.w
( 141) 02F4 8BB101      ;     lda (1,S),Y
( 142) 02F7 C202        ;     adj #2
( 143) 02F9 D002        ;     bne L_027
( 144) 02FB 8011        ;     bra L_028
( 145)                  ; L_027
( 146)                  ; ;   40:                 write(prime:3)
( 147) 02FD ABAD4108    ;     lda.w prime_006
( 148) 0301 AB48        ;     pha.w
( 149) 0303 A903        ;     lda #3
( 150) 0305 AB48        ;     pha.w
( 151) 0307 20BA03      ;     jsr _iwrite
( 152) 030A C204        ;     adj #4
( 153)                  ; ;   41:             ELSE
( 154) 030C 8011        ;     bra L_029
( 155)                  ; L_028
( 156)                  ; ;   42:                 write('   ');
( 157) 030E ABE23A04    ;     psh.w #S_030
( 158) 0312 ABE20000    ;     psh.w #0
( 159) 0316 ABE20300    ;     psh.w #3
( 160) 031A 20A803      ;     jsr _swrite
( 161) 031D C206        ;     adj #6
( 162)                  ; L_029
( 163)                  ; ;   43:         END;
( 164) 031F ABEE3D08    ;     inc.w j_004
( 165) 0323 80AD        ;     bra L_024
( 166)                  ; L_026
( 167)                  ; ;   44:         writeln;
( 168) 0325 20A203      ;     jsr _writeln
( 169)                  ; ;   45:         i := i + 20
( 170) 0328 ABAD3B08    ;     lda.w i_003
( 171) 032C 18          ;     clc
( 172) 032D AB691400    ;     adc.w #20
( 173) 0331 AB8D3B08    ;     sta.w i_003
( 174)                  ; ;   46:     UNTIL i > max
( 175) 0335 ABC9E803    ;     cmp.w #1000
( 176) 0339 AB1002      ;     bgt L_023
( 177) 033C 808E        ;     bra L_022
( 178)                  ; ;   47: END.
( 179)                  ; L_023
( 180) 033E ABFA        ;     plx.w
( 181) 0340 60          ;     rts
( 182)                  ;     .end _pc65_main
( 183)                  ; ;
( 184)                  ; ;   unsigned division 16 x 16
( 185)                  ; ;
( 186)                  ;             .cod
( 187)                  ; ;
( 188)                  ; _Q          .equ    5
( 189)                  ; _D          .equ    3
( 190)                  ; ;
( 191)                  ; _idiv       .proc
( 192) 0341 A900        ;             lda #0          ; clear remainder (A)
( 193) 0343 0B          ;             dup a           ; push
( 194) 0344 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 195) 0347 A010        ;             ldy #16         ; bit counter
( 196)                  ; ;
( 197)                  ; _idiv_Lp
( 198) 0349 18          ;             clc
( 199) 034A AB0A        ;             asl.w a         ; shift AQ left
( 200) 034C 1B          ;             swp a
( 201) 034D AB2A        ;             rol.w a
( 202)                  ; ;
( 203) 034F B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 204)                  ; ;
( 205)                  ; _idiv_Minus
( 206) 0351 38          ;             sec
( 207) 0352 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 208)                  ; ;
( 209) 0355 8004        ;             bra _idiv_Next
( 210)                  ; ;
( 211)                  ; _idiv_Plus
( 212) 0357 18          ;             clc
( 213) 0358 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 214)                  ; ;
( 215)                  ; _idiv_Next
( 216) 035B 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 217) 035C 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 218) 035E AB1A        ;             inc.w a
( 219)                  ; ;
( 220)                  ; _idiv_Dec
( 221) 0360 88          ;             dey             ; loop until loop counter == 0
( 222) 0361 D0E6        ;             bne _idiv_Lp
( 223)                  ; ;
( 224)                  ; _idiv_Exit
( 225) 0363 1B          ;             swp a           ; Test remainder
( 226) 0364 AB090000    ;             ora.w #0
( 227) 0368 1004        ;             bpl _idiv_Finish
( 228) 036A 18          ;             clc
( 229) 036B CB7503      ;             adc.w 3,S
( 230)                  ; _idiv_Finish
( 231) 036E 1B          ;             swp a
( 232)                  ; ;
( 233) 036F 60          ;             rts
( 234)                  ; ;
( 235)                  ;             .endp _idiv
( 236)                  ; ;
( 237)                  ; ; signed multiplication: 16 x 16 => 32
( 238)                  ; ;
( 239)                  ;             .cod
( 240)                  ; ;
( 241)                  ; _M          .equ    5
( 242)                  ; _R          .equ    3
( 243)                  ; ;
( 244)                  ; _imul       .proc
( 245) 0370 A010        ;             ldy #16             ; y = bit count
( 246) 0372 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 247) 0374 0B          ;             dup a               ; A = { 0,  0,  x}
( 248) 0375 0B          ;             dup a               ; A = { 0,  0,  0}
( 249) 0376 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 250) 0379 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 251) 037B AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 252) 037F 18          ;             clc                 ; initialize Booth recoding bit
( 253) 0380 2B          ;             rot a               ; A = {PH, PL, `R}
( 254)                  ; ;
( 255) 0381 8003        ;             bra _imul_TstB
( 256)                  ; ;
( 257)                  ; _imul_Lp
( 258) 0383 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 259) 0385 2B          ;             rot a               ; A = {PH, PL, `R}
( 260)                  ; _imul_TstB
( 261) 0386 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 262)                  ; ;
( 263)                  ; _imul_AddShft
( 264) 0388 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 265)                  ; _imul_AddM
( 266) 038A 18          ;             clc
( 267) 038B CB7505      ;             adc.w _M,S          ; PH += M
( 268) 038E 8006        ;             bra _imul_ShftP
( 269)                  ; ;
( 270)                  ; _imul_SubShft
( 271) 0390 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 272)                  ; _imul_SubM
( 273) 0392 38          ;             sec
( 274) 0393 CBF505      ;             sbc.w _M,S          ; PH -= M
( 275)                  ; ;
( 276)                  ; _imul_ShftP
( 277) 0396 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 278) 0398 2B          ;             rot a               ; A = {PL, `R, PH}
( 279) 0399 AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 280) 039B 2B          ;             rot a               ; A = {`R, PH, PL}
( 281)                  ; ;
( 282)                  ; _imul_Dec
( 283) 039C 88          ;             dey
( 284) 039D D0E4        ;             bne _imul_Lp
( 285)                  ; ;
( 286)                  ; _imul_Exit
( 287) 039F 2B          ;             rot a               ; A = {PH, PL, `R}
( 288) 03A0 1B          ;             swp a               ; A = {PL, PH, `R}
( 289)                  ; ;
( 290) 03A1 60          ;             rts
( 291)                  ; ;
( 292)                  ;             .endp _imul
( 293)                  ; 
( 294)                  ; ;
( 295)                  ; ; put <newLine> to output
( 296)                  ; ;
( 297)                  ;             .cod
( 298)                  ; ;
( 299)                  ; _newLine    .equ    0x0A
( 300)                  ; _putChar    .equ    0xF001
( 301)                  ; ;
( 302)                  ; _writeln    .proc
( 303) 03A2 A90A        ;             lda #_newLine
( 304) 03A4 8D01F0      ;             sta _putChar
( 305)                  ; ;
( 306) 03A7 60          ;             rts
( 307)                  ; ;
( 308)                  ;             .endp _writeln
( 309)                  ; ;
( 310)                  ; ; put string to output
( 311)                  ; ;
( 312)                  ;             .cod
( 313)                  ; ;
( 314)                  ; _sPtrOff    .equ    7
( 315)                  ; _sLenOff    .equ    3
( 316)                  ; ;
( 317)                  ; _swrite     .proc
( 318) 03A8 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 319) 03AB CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 320) 03AE 9B0B        ;             tai                     ; transfer sptr to IP
( 321)                  ; ;
( 322)                  ; _swrite_Lp
( 323) 03B0 A300        ;             lda 0,I++               ; load char from strig
( 324) 03B2 8D01F0      ;             sta _putChar            ; write char to output
( 325)                  ; ;
( 326) 03B5 AB88        ;             dey.w                   ; loop while string length <> 0
( 327) 03B7 D0F7        ;             bne _swrite_Lp
( 328)                  ; ;
( 329) 03B9 60          ;             rts
( 330)                  ; ;
( 331)                  ;             .endp _swrite
( 332)                  ; ;
( 333)                  ; ; put integer to output
( 334)                  ; ;
( 335)                  ;             .cod
( 336)                  ; ;
( 337)                  ; _iValOff    .equ    7
( 338)                  ; _fLenOff    .equ    5
( 339)                  ; _iCntOff    .equ    -1
( 340)                  ; ;
( 341)                  ; _iwrite     .proc
( 342) 03BA ABDA        ;             phx.w                   ; save current base pointer
( 343) 03BC ABBA        ;             tsx.w                   ; assign new base pointer
( 344)                  ; ;
( 345) 03BE B505        ;             lda _fLenOff,X          ; load field width specifier
( 346) 03C0 C905        ;             cmp #5                  ; compare against max integer digit count
( 347) 03C2 AB3002      ;             ble _iwrite_SetCnt
( 348) 03C5 A905        ;             lda #5
( 349)                  ; ;
( 350)                  ; _iwrite_SetCnt
( 351) 03C7 AB48        ;             pha.w                   ; set iteration count to fld width
( 352) 03C9 ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 353)                  ; ;
( 354)                  ; _iwrite_Lp
( 355) 03CC AB48        ;             pha.w                   ; push dividend argument to _idiv
( 356) 03CE ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 357) 03D2 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 358) 03D6 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 359) 03D8 1B          ;             swp a                   ; put the remainder into ATOS
( 360)                  ; ;
( 361) 03D9 18          ;             clc                     ; convert remainder into ASCII character
( 362) 03DA 6930        ;             adc #48
( 363) 03DC 48          ;             pha                     ; push LS digit of integer onto stack
( 364)                  ; ;
( 365) 03DD 2B          ;             rot a                   ; rotate quotient into ATOS position
( 366)                  ; ;
( 367) 03DE ABDEFFFF    ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 368) 03E2 D0E8        ;             bne _iwrite_Lp
( 369)                  ; ;-------------------------------------------------------------------------------
( 370) 03E4 0B          ;             dup a                   ; save integer part of the conversion
( 371)                  ; ;-------------------------------------------------------------------------------
( 372)                  ; _iwrite_Fill
( 373) 03E5 B505        ;             lda _fLenOff,X          ; load field width specifier
( 374) 03E7 C905        ;             cmp #5                  ; compare against max integer digit count
( 375) 03E9 AB300A      ;             ble _iwrite_GenPtr
( 376) 03EC 38          ;             sec                     ; subtract max integer length from fld len
( 377) 03ED E905        ;             sbc #5
( 378) 03EF A8          ;             tay                     ; set difference as loop counter
( 379) 03F0 A930        ;             lda #48                 ; fill remaining field with '0'
( 380)                  ; ;
( 381)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
( 382) 03F2 48          ;             pha
( 383) 03F3 88          ;             dey
( 384) 03F4 D0FC        ;             bne _iwrite_Fill_Lp
( 385)                  ; ;-------------------------------------------------------------------------------
( 386)                  ; _iwrite_GenPtr
( 387) 03F6 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 388) 03F9 AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 389) 03FB AB48        ;             pha.w                   ; push string pointer to stack
( 390)                  ; ;-------------------------------------------------------------------------------
( 391) 03FD 2B          ;             rot a                   ; restore integer part of the conversion
( 392)                  ; ;-------------------------------------------------------------------------------
( 393) 03FE ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 394) 0402 F00F        ;             beq _iwrite_Sup0
( 395) 0404 A000        ;             ldy #0
( 396)                  ; _iwrite_ErrLp
( 397) 0406 A92A        ;             lda #0x2A               ; fill integer field with '*'
( 398) 0408 8B9101      ;             sta (1,S),Y
( 399) 040B C8          ;             iny
( 400) 040C FBD505      ;             cmp.y _fLenOff,X
( 401) 040F D0F5        ;             bne _iwrite_ErrLp
( 402) 0411 8014        ;             bra _iwrite_Exit
( 403)                  ; ;-------------------------------------------------------------------------------
( 404)                  ; _iwrite_Sup0
( 405) 0413 A000        ;             ldy #0                  ; initialize string index
( 406)                  ; _iwrite_Sup0_Lp
( 407) 0415 8BB101      ;             lda (1,S),Y
( 408) 0418 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 409) 041A D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 410) 041C A920        ;             lda #32                 ; replace leading 0 with ' '
( 411) 041E 8B9101      ;             sta (1,S),Y
( 412) 0421 C8          ;             iny                     ; increment string index and compare to fLen
( 413) 0422 FBD505      ;             cmp.y _fLenOff,X
( 414) 0425 D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 415)                  ; ;-------------------------------------------------------------------------------
( 416)                  ; _iwrite_Exit
( 417) 0427 ABE20000    ;             psh.w #0                ; NULL argument
( 418) 042B B505        ;             lda _fLenOff,X          ; push field width specifier
( 419) 042D AB48        ;             pha.w
( 420) 042F 9B5C75FF    ;             csr _swrite             ; write integer value string using _swrite()
( 421) 0433 C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 422)                  ; ;
( 423) 0435 AB9A        ;             txs.w                   ; deallocate stack variables
( 424) 0437 ABFA        ;             plx.w                   ; restore previous base pointer
( 425) 0439 60          ;             rts
( 426)                  ; ;
( 427)                  ;             .endp _iwrite
( 428)                  ; 
( 429)                  ;     .dat
( 430)                  ; 
( 431) 043A 202020      ; S_030 .str "   "
( 432) 043D 53696576    ; S_021 .str "Sieve of Eratosthenes"
       0441 65206F6620457261746F737468656E6573
( 433) 0452 55          ; _bss_start .byt 85
( 434) 0453 00000000    ; sieve_002 .byt 0[1000]
       0457 0000000000000000000000000000000000000000000000000000000000000000
       0477 0000000000000000000000000000000000000000000000000000000000000000
       0497 0000000000000000000000000000000000000000000000000000000000000000
       04B7 0000000000000000000000000000000000000000000000000000000000000000
       04D7 0000000000000000000000000000000000000000000000000000000000000000
       04F7 0000000000000000000000000000000000000000000000000000000000000000
       0517 0000000000000000000000000000000000000000000000000000000000000000
       0537 0000000000000000000000000000000000000000000000000000000000000000
       0557 0000000000000000000000000000000000000000000000000000000000000000
       0577 0000000000000000000000000000000000000000000000000000000000000000
       0597 0000000000000000000000000000000000000000000000000000000000000000
       05B7 0000000000000000000000000000000000000000000000000000000000000000
       05D7 0000000000000000000000000000000000000000000000000000000000000000
       05F7 0000000000000000000000000000000000000000000000000000000000000000
       0617 0000000000000000000000000000000000000000000000000000000000000000
       0637 0000000000000000000000000000000000000000000000000000000000000000
       0657 0000000000000000000000000000000000000000000000000000000000000000
       0677 0000000000000000000000000000000000000000000000000000000000000000
       0697 0000000000000000000000000000000000000000000000000000000000000000
       06B7 0000000000000000000000000000000000000000000000000000000000000000
       06D7 0000000000000000000000000000000000000000000000000000000000000000
       06F7 0000000000000000000000000000000000000000000000000000000000000000
       0717 0000000000000000000000000000000000000000000000000000000000000000
       0737 0000000000000000000000000000000000000000000000000000000000000000
       0757 0000000000000000000000000000000000000000000000000000000000000000
       0777 0000000000000000000000000000000000000000000000000000000000000000
       0797 0000000000000000000000000000000000000000000000000000000000000000
       07B7 0000000000000000000000000000000000000000000000000000000000000000
       07D7 0000000000000000000000000000000000000000000000000000000000000000
       07F7 0000000000000000000000000000000000000000000000000000000000000000
       0817 0000000000000000000000000000000000000000000000000000000000000000
       0837 00000000
( 435) 083B 0000        ; i_003 .wrd 0
( 436) 083D 0000        ; j_004 .wrd 0
( 437) 083F 0000        ; limit_005 .wrd 0
( 438) 0841 0000        ; prime_006 .wrd 0
( 439) 0843 0000        ; factor_007 .wrd 0
( 440) 0845 AA          ; _bss_end .byt 170
( 441) 0846 00000000    ; _stk .byt 0[255]
       084A 0000000000000000000000000000000000000000000000000000000000000000
       086A 0000000000000000000000000000000000000000000000000000000000000000
       088A 0000000000000000000000000000000000000000000000000000000000000000
       08AA 0000000000000000000000000000000000000000000000000000000000000000
       08CA 0000000000000000000000000000000000000000000000000000000000000000
       08EA 0000000000000000000000000000000000000000000000000000000000000000
       090A 0000000000000000000000000000000000000000000000000000000000000000
       092A 000000000000000000000000000000000000000000000000000000
( 442) 0945 00          ; _stk_top .byt 0
( 443)                  ; 
( 444)                  ;     .end
