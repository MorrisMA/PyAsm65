(   1)                  ; ;    1: PROGRAM Fibonacci (output);
(   2)                  ; 	.stk 1024
(   3)                  ; 	.cod 512
(   4)                  ; STATIC_LINK .equ +5
(   5)                  ; RETURN_VALUE .equ -3
(   6)                  ; HIGH_RETURN_VALUE .equ -1
(   7)                  ; _start
(   8) 0200 ABBA        ; 	tsx.w		; Preserve original stack pointer
(   9) 0202 CBA2F707    ; 	lds.w #_stk_top	; Initialize program stack pointer
(  10) 0206 9CF203      ; 	stz _bss_start
(  11) 0209 ABA2F203    ; 	ldx.w #_bss_start
(  12) 020D ABA0F303    ; 	ldy.w #_bss_start+1
(  13) 0211 ABA9F707    ; 	lda.w #_stk_top
(  14) 0215 38          ; 	sec
(  15) 0216 ABE9F203    ; 	sbc.w #_bss_start
(  16) 021A 540A        ; 	mov #10
(  17) 021C 4C9102      ; 	jmp _pc65_main
(  18)                  ; ;    2: 
(  19)                  ; ;    3: CONST
(  20)                  ; ;    4:     max = 23;
(  21)                  ; ;    5: 
(  22)                  ; ;    6: VAR
(  23)                  ; ;    7:     i, j : INTEGER;
(  24)                  ; ;    8:     
(  25)                  ; ;    9: FUNCTION FIB(n : INTEGER) : INTEGER;
(  26)                  ; ;   10:     VAR i, tmp, fn1, fn2 : INTEGER;
(  27)                  ; ;   11:     
(  28)                  ; ;   12:     BEGIN
(  29)                  ; n_005 .equ +7
(  30)                  ; i_006 .equ -5
(  31)                  ; tmp_007 .equ -7
(  32)                  ; fn1_008 .equ -9
(  33)                  ; fn2_009 .equ -11
(  34)                  ; fib_004 .sub
(  35) 021F ABDA        ; 	phx.w
(  36) 0221 ABBA        ; 	tsx.w
(  37) 0223 C2FC        ; 	adj #-4
(  38) 0225 C2F8        ; 	adj #-8
(  39)                  ; ;   13:         fn1 := 1;
(  40) 0227 A901        ; 	lda #1
(  41) 0229 AB95F7      ; 	sta.w fn1_008,X
(  42)                  ; ;   14:         fn2 := 0;
(  44) 022C AB74F5      ; 	stz.w fn2_009,X
(  45)                  ; ;   15:         
(  46)                  ; ;   16:         IF n < 1 THEN
(  47) 022F ABB507      ; 	lda.w n_005,X
(  51) 0232 ABC90100    ; 	cmp.w #1
(  53) 0236 AB7004      ; 	blt L_012T
(  54) 0239 A900        ; 	lda #0
(  55) 023B 8004        ; 	bra L_012
(  56) 023D EAEA        ; L_012T .byt 234[2]
(  57) 023F A901        ; 	lda #1
(  58)                  ; L_012
(  60) 0241 D003        ; 	bne L_010
(  61) 0243 4C4F02      ; 	jmp L_011
(  62)                  ; L_010
(  63)                  ; ;   17:             FIB := fn2
(  64)                  ; ;   18:         ELSE BEGIN
(  65) 0246 ABB5F5      ; 	lda.w fn2_009,X
(  66) 0249 AB95FD      ; 	sta.w RETURN_VALUE,X
(  67) 024C 4C8902      ; 	jmp L_013
(  68)                  ; L_011
(  69)                  ; ;   19:             i := 1;
(  70) 024F A901        ; 	lda #1
(  71) 0251 AB95FB      ; 	sta.w i_006,X
(  72)                  ; ;   20:             REPEAT
(  73)                  ; L_014
(  74)                  ; ;   21:                 tmp := fn1 + fn2;
(  75) 0254 ABB5F7      ; 	lda.w fn1_008,X
(  78) 0257 18          ; 	clc
(  79) 0258 AB75F5      ; 	adc.w fn2_009,X
(  81) 025B AB95F9      ; 	sta.w tmp_007,X
(  82)                  ; ;   22:                 fn2 := fn1;
(  83) 025E ABB5F7      ; 	lda.w fn1_008,X
(  84) 0261 AB95F5      ; 	sta.w fn2_009,X
(  85)                  ; ;   23:                 fn1 := tmp;
(  86) 0264 ABB5F9      ; 	lda.w tmp_007,X
(  87) 0267 AB95F7      ; 	sta.w fn1_008,X
(  88)                  ; ;   24:                 
(  89)                  ; ;   25:                 i := i + 1
(  93)                  ; ;   26:             UNTIL (i >= n);
(  97) 026A ABF6FB      ; 	inc.w i_006,X
(  98) 026D ABB5FB      ; 	lda.w i_006,X
( 102) 0270 ABD507      ; 	cmp.w n_005,X
( 104) 0273 AB5004      ; 	bge L_016T
( 105) 0276 A900        ; 	lda #0
( 106) 0278 8004        ; 	bra L_016
( 107) 027A EAEA        ; L_016T .byt 234[2]
( 108) 027C A901        ; 	lda #1
( 109)                  ; L_016
( 111) 027E D003        ; 	bne L_015
( 112) 0280 4C5402      ; 	jmp L_014
( 113)                  ; L_015
( 114)                  ; ;   27:             
( 115)                  ; ;   28:             FIB := fn1
( 116)                  ; ;   29:         END
( 117) 0283 ABB5F7      ; 	lda.w fn1_008,X
( 118) 0286 AB95FD      ; 	sta.w RETURN_VALUE,X
( 119)                  ; ;   30:     END;
( 120)                  ; L_013
( 121) 0289 ABB5FD      ; 	lda.w RETURN_VALUE,X
( 122) 028C AB9A        ; 	txs.w
( 123) 028E ABFA        ; 	plx.w
( 124) 0290 60          ; 	rts
( 125)                  ; 	.end fib_004
( 126)                  ; ;   31:     
( 127)                  ; ;   32: BEGIN
( 128)                  ; _pc65_main .sub
( 129) 0291 ABDA        ; 	phx.w
( 130) 0293 ABBA        ; 	tsx.w
( 131)                  ; ;   33: {
( 132)                  ; ;   34:     FOR i := 1 to max DO BEGIN
( 133)                  ; ;   35:         j := FIB(i);
( 134)                  ; ;   36:     END;
( 135)                  ; ;   37: }
( 136)                  ; ;   38:     i := max;
( 137) 0295 A917        ; 	lda #23
( 138) 0297 AB8DF303    ; 	sta.w i_002
( 139)                  ; ;   39:     j := FIB(i);
( 140) 029B ABADF303    ; 	lda.w i_002
( 141) 029F AB48        ; 	pha.w
( 142) 02A1 ABDA        ; 	phx.w
( 143) 02A3 201F02      ; 	jsr fib_004
( 144) 02A6 C204        ; 	adj #4
( 145) 02A8 AB8DF503    ; 	sta.w j_003
( 146)                  ; ;   40:     write('Fib[');
( 147) 02AC ABE2EE03    ; 	psh.w #S_017
( 148) 02B0 ABE20000    ; 	psh.w #0
( 149) 02B4 ABE20400    ; 	psh.w #4
( 150) 02B8 205903      ; 	jsr _swrite
( 151) 02BB C206        ; 	adj #6
( 152)                  ; ;   41:     write(i:2);
( 153) 02BD ABADF303    ; 	lda.w i_002
( 154) 02C1 AB48        ; 	pha.w
( 156) 02C3 ABE20200    ; 	psh.w #2
( 157) 02C7 206B03      ; 	jsr _iwrite
( 158) 02CA C204        ; 	adj #4
( 159)                  ; ;   42:     write('] = ');
( 160) 02CC ABE2EA03    ; 	psh.w #S_018
( 161) 02D0 ABE20000    ; 	psh.w #0
( 162) 02D4 ABE20400    ; 	psh.w #4
( 163) 02D8 205903      ; 	jsr _swrite
( 164) 02DB C206        ; 	adj #6
( 165)                  ; ;   43:     write(j:5);
( 166) 02DD ABADF503    ; 	lda.w j_003
( 167) 02E1 AB48        ; 	pha.w
( 169) 02E3 ABE20500    ; 	psh.w #5
( 170) 02E7 206B03      ; 	jsr _iwrite
( 171) 02EA C204        ; 	adj #4
( 172)                  ; ;   44:     writeln
( 173)                  ; ;   45: END.
( 174) 02EC 205303      ; 	jsr _writeln
( 175) 02EF ABFA        ; 	plx.w
( 176) 02F1 60          ; 	rts
( 177)                  ; 	.end _pc65_main
( 178)                  ; ;
( 179)                  ; ;
( 180)                  ; ;   unsigned division 16 x 16
( 181)                  ; ;
( 183)                  ; ;
( 184)                  ; _Q          .equ    5
( 185)                  ; _D          .equ    3
( 186)                  ; ;
( 187)                  ; _idiv       .proc
( 188) 02F2 A900        ;             lda #0          ; clear remainder (A)
( 189) 02F4 0B          ;             dup a           ; push
( 190) 02F5 CBB505      ;             lda.w _Q,S      ; load dividend (Q)
( 191) 02F8 A010        ;             ldy #16         ; bit counter
( 192)                  ; ;
( 193)                  ; _idiv_Lp    
( 194) 02FA 18          ;             clc
( 195) 02FB AB0A        ;             asl.w a         ; shift AQ left
( 196) 02FD 1B          ;             swp a
( 197) 02FE AB2A        ;             rol.w a
( 198)                  ; ;
( 199) 0300 B006        ;             bcs _idiv_Plus  ; if A < 0 then A = A + D else A = A - D
( 200)                  ; ;
( 201)                  ; _idiv_Minus
( 202) 0302 38          ;             sec
( 203) 0303 CBF503      ;             sbc.w _D,S      ; subtract divisor (D)
( 204)                  ; ;
( 205) 0306 8004        ;             bra _idiv_Next
( 206)                  ; ;
( 207)                  ; _idiv_Plus
( 208) 0308 18          ;             clc
( 209) 0309 CB7503      ;             adc.w _D,S      ; add divisor (D)
( 210)                  ; ;
( 211)                  ; _idiv_Next    
( 212) 030C 1B          ;             swp a           ; restore order of Acc stack {Q, A, -}
( 213) 030D 3002        ;             bmi _idiv_Dec   ; if A < 0 then Q[0] = 0 else Q[0] = 1
( 214) 030F AB1A        ;             inc.w a
( 215)                  ; ;
( 216)                  ; _idiv_Dec
( 217) 0311 88          ;             dey             ; loop until loop counter == 0
( 218) 0312 D0E6        ;             bne _idiv_Lp
( 219)                  ; ;
( 220)                  ; _idiv_Exit
( 221) 0314 1B          ;             swp a           ; Test remainder
( 222) 0315 AB090000    ;             ora.w #0
( 223) 0319 1004        ;             bpl _idiv_Finish
( 224) 031B 18          ;             clc
( 225) 031C CB7503      ;             adc.w 3,S
( 226)                  ; _idiv_Finish
( 227) 031F 1B          ;             swp a
( 228)                  ; ;
( 229) 0320 60          ;             rts
( 230)                  ; ;
( 232)                  ; 
( 233)                  ; ;
( 234)                  ; ; signed multiplication: 16 x 16 => 32
( 235)                  ; ;
( 237)                  ; ;
( 238)                  ; _M          .equ    5
( 239)                  ; _R          .equ    3
( 240)                  ; ;
( 241)                  ; _imul       .proc
( 242) 0321 A010        ;             ldy #16             ; y = bit count
( 243) 0323 A900        ;             lda #0              ; A = { 0,  x,  x} - clear product
( 244) 0325 0B          ;             dup a               ; A = { 0,  0,  x}
( 245) 0326 0B          ;             dup a               ; A = { 0,  0,  0}
( 246) 0327 CBB503      ;             lda.w _R,S          ; A = { R,  0,  0} - load multiplier (R)
( 247) 032A 9B2B        ;             rev                 ; A = {`R,  0,  0} - reverse multiplier (`R)
( 248) 032C AB090000    ;             ora.w #0            ; set N flag if msb ATOS == 1
( 249) 0330 18          ;             clc                 ; initialize Booth recoding bit
( 250) 0331 2B          ;             rot a               ; A = {PH, PL, `R}
( 251)                  ; ;
( 252) 0332 8003        ;             bra _imul_TstB
( 253)                  ; ;
( 254)                  ; _imul_Lp
( 255) 0334 AB0A        ;             asl.w a             ; A = {`R << 1, PH, PL}
( 256) 0336 2B          ;             rot a               ; A = {PH, PL, `R}
( 257)                  ; _imul_TstB
( 258) 0337 9008        ;             bcc _imul_SubShft   ; (C, x) ? Add_Shift : Sub_Shift
( 259)                  ; ;
( 260)                  ; _imul_AddShft
( 261) 0339 300C        ;             bmi _imul_ShftP     ; (1, N) ? P >> 1 : (P += M) >> 1
( 262)                  ; _imul_AddM
( 263) 033B 18          ;             clc
( 264) 033C CB7505      ;             adc.w _M,S          ; PH += M
( 265) 033F 8006        ;             bra _imul_ShftP
( 266)                  ; ;
( 267)                  ; _imul_SubShft
( 268) 0341 1004        ;             bpl _imul_ShftP     ; (0, N) ? (P -= M) >> 1 : P >> 1
( 269)                  ; _imul_SubM
( 270) 0343 38          ;             sec
( 271) 0344 CBF505      ;             sbc.w _M,S          ; PH -= M
( 272)                  ; ;
( 273)                  ; _imul_ShftP
( 274) 0347 BB4A        ;             asr.w a             ; A = {PH >> 1, PL, `R}
( 275) 0349 2B          ;             rot a               ; A = {PL, `R, PH}
( 276) 034A AB6A        ;             ror.w a             ; A = {PL >> 2, `R, PH}
( 277) 034C 2B          ;             rot a               ; A = {`R, PH, PL}
( 278)                  ; ;
( 279)                  ; _imul_Dec
( 280) 034D 88          ;             dey
( 281) 034E D0E4        ;             bne _imul_Lp
( 282)                  ; ;
( 283)                  ; _imul_Exit
( 284) 0350 2B          ;             rot a               ; A = {PH, PL, `R}
( 285) 0351 1B          ;             swp a               ; A = {PL, PH, `R}
( 286)                  ; ;
( 287) 0352 60          ;             rts
( 288)                  ; ;
( 290)                  ; 
( 291)                  ; ;
( 292)                  ; ; put <newLine> to output
( 293)                  ; ;
( 295)                  ; ;
( 296)                  ; _newLine    .equ    0x0A
( 297)                  ; _putChar    .equ    0xF001
( 298)                  ; ;
( 299)                  ; _writeln    .proc
( 300) 0353 A90A        ;             lda #_newLine
( 301) 0355 8D01F0      ;             sta _putChar
( 302)                  ; ;
( 303) 0358 60          ;             rts
( 304)                  ; ;
( 306)                  ; ;
( 307)                  ; ; put string to output
( 308)                  ; ;
( 310)                  ; ;
( 311)                  ; _sPtrOff    .equ    7
( 312)                  ; _sLenOff    .equ    3
( 313)                  ; ;
( 314)                  ; _swrite     .proc
( 315) 0359 CBB403      ;             ldy.w _sLenOff,S        ; load string length
( 316) 035C CBB507      ;             lda.w _sPtrOff,S        ; load string pointer
( 317) 035F 9B0B        ;             tai                     ; transfer sptr to IP
( 318)                  ; ;
( 319)                  ; _swrite_Lp
( 320) 0361 A300        ;             lda 0,I++               ; load char from strig
( 321) 0363 8D01F0      ;             sta _putChar            ; write char to output
( 322)                  ; ;
( 323) 0366 AB88        ;             dey.w                   ; loop while string length <> 0
( 324) 0368 D0F7        ;             bne _swrite_Lp
( 325)                  ; ;
( 326) 036A 60          ;             rts
( 327)                  ; ;
( 329)                  ; ;
( 330)                  ; ; put integer to output
( 331)                  ; ;
( 333)                  ; ;
( 334)                  ; _iValOff    .equ    7
( 335)                  ; _fLenOff    .equ    5
( 336)                  ; _iCntOff    .equ    -1
( 337)                  ; ;
( 338)                  ; _iwrite     .proc
( 339) 036B ABDA        ;             phx.w                   ; save current base pointer
( 340) 036D ABBA        ;             tsx.w                   ; assign new base pointer
( 341)                  ; ;
( 342) 036F B505        ;             lda _fLenOff,X          ; load field width specifier
( 343) 0371 C905        ;             cmp #5                  ; compare against max integer digit count
( 344) 0373 AB3002      ;             ble _iwrite_SetCnt
( 345) 0376 A905        ;             lda #5
( 346)                  ; ;
( 347)                  ; _iwrite_SetCnt
( 348) 0378 AB48        ;             pha.w                   ; set iteration count to fld width
( 349) 037A ABB507      ;             lda.w _iValOff,X        ; load a with integer value
( 350)                  ; ;
( 351)                  ; _iwrite_Lp
( 352) 037D AB48        ;             pha.w                   ; push dividend argument to _idiv
( 353) 037F ABE20A00    ;             psh.w #10               ; push divisor argument to _idiv
( 354) 0383 9B5C6BFF    ;             csr _idiv               ; determine the remainder,
( 355) 0387 C204        ;             adj #4                  ; remove arguments passed to _idiv from stk
( 356) 0389 1B          ;             swp a                   ; put the remainder into ATOS
( 357)                  ; ;
( 358) 038A 18          ;             clc                     ; convert remainder into ASCII character
( 359) 038B 6930        ;             adc #48
( 360) 038D 48          ;             pha                     ; push LS digit of integer onto stack
( 361)                  ; ;
( 362) 038E 2B          ;             rot a                   ; rotate quotient into ATOS position
( 363)                  ; ;
( 364) 038F ABD6FF      ;             dec.w _iCntOff,X        ; decrement digit iteration count
( 365) 0392 D0E9        ;             bne _iwrite_Lp
( 366)                  ; ;-------------------------------------------------------------------------------
( 367) 0394 0B          ;             dup a                   ; save integer part of the conversion
( 368)                  ; ;-------------------------------------------------------------------------------
( 369)                  ; _iwrite_Fill
( 370) 0395 B505        ;             lda _fLenOff,X          ; load field width specifier
( 371) 0397 C905        ;             cmp #5                  ; compare against max integer digit count
( 372) 0399 AB300A      ;             ble _iwrite_GenPtr
( 373) 039C 38          ;             sec                     ; subtract max integer length from fld len
( 374) 039D E905        ;             sbc #5
( 375) 039F A8          ;             tay                     ; set difference as loop counter
( 376) 03A0 A930        ;             lda #48                 ; fill remaining field with '0'
( 377)                  ; ;
( 378)                  ; _iwrite_Fill_Lp                     ; increase string on stack with fill data
( 379) 03A2 48          ;             pha
( 380) 03A3 88          ;             dey
( 381) 03A4 D0FC        ;             bne _iwrite_Fill_Lp
( 382)                  ; ;-------------------------------------------------------------------------------
( 383)                  ; _iwrite_GenPtr
( 384) 03A6 EBABBA      ;             tsa.w                   ; transfer current stk pointer to A
( 385) 03A9 AB1A        ;             inc.w a                 ; remove stack pointer write bias
( 386) 03AB AB48        ;             pha.w                   ; push string pointer to stack
( 387)                  ; ;-------------------------------------------------------------------------------
( 388) 03AD 2B          ;             rot a                   ; restore integer part of the conversion
( 389)                  ; ;-------------------------------------------------------------------------------
( 390) 03AE ABC90000    ;             cmp.w #0                ; test for 0. If not 0, int > 10^fld
( 391) 03B2 F00F        ;             beq _iwrite_Sup0
( 392) 03B4 A000        ;             ldy #0
( 393)                  ; _iwrite_ErrLp
( 394) 03B6 A92A        ;             lda #0x2A               ; fill integer field with '*'
( 395) 03B8 8B9101      ;             sta (1,S),Y
( 396) 03BB C8          ;             iny
( 397) 03BC FBD505      ;             cmp.y _fLenOff,X
( 398) 03BF D0F5        ;             bne _iwrite_ErrLp
( 399) 03C1 8014        ;             bra _iwrite_Exit
( 400)                  ; ;-------------------------------------------------------------------------------
( 401)                  ; _iwrite_Sup0
( 402) 03C3 A000        ;             ldy #0                  ; initialize string index
( 403)                  ; _iwrite_Sup0_Lp
( 404) 03C5 8BB101      ;             lda (1,S),Y
( 405) 03C8 C930        ;             cmp #48                 ; if leading position == 0, replace with ' '
( 406) 03CA D00B        ;             bne _iwrite_Exit        ; exit loop on first non-0 digit
( 407) 03CC A920        ;             lda #32                 ; replace leading 0 with ' '
( 408) 03CE 8B9101      ;             sta (1,S),Y
( 409) 03D1 C8          ;             iny                     ; increment string index and compare to fLen
( 410) 03D2 FBD505      ;             cmp.y _fLenOff,X
( 411) 03D5 D0EE        ;             bne _iwrite_Sup0_Lp     ; loop until Y == fLen
( 412)                  ; ;-------------------------------------------------------------------------------
( 413)                  ; _iwrite_Exit
( 414) 03D7 ABE20000    ;             psh.w #0                ; NULL argument
( 415) 03DB B505        ;             lda _fLenOff,X          ; push field width specifier
( 416) 03DD AB48        ;             pha.w
( 417) 03DF 9B5C76FF    ;             csr _swrite             ; write integer value string using _swrite()
( 418) 03E3 C206        ;             adj #6                  ; remove parameters to _swrite() from stack
( 419)                  ; ;
( 420) 03E5 AB9A        ;             txs.w                   ; deallocate stack variables
( 421) 03E7 ABFA        ;             plx.w                   ; restore previous base pointer
( 422) 03E9 60          ;             rts
( 423)                  ; ;
( 425)                  ; ;
( 426)                  ; 	.dat
( 427)                  ; 
( 428) 03EA 5D203D20    ; S_018 .str "] = "
( 429) 03EE 4669625B    ; S_017 .str "Fib["
( 430) 03F2 00          ; _bss_start .byt 0
( 431) 03F3 0000        ; i_002 .wrd 0
( 432) 03F5 0000        ; j_003 .wrd 0
( 433) 03F7 00          ; _bss_end .byt 0
( 434) 03F8 00000000    ; _stk .byt 0[1023]
       03FC 0000000000000000000000000000000000000000000000000000000000000000
       041C 0000000000000000000000000000000000000000000000000000000000000000
       043C 0000000000000000000000000000000000000000000000000000000000000000
       045C 0000000000000000000000000000000000000000000000000000000000000000
       047C 0000000000000000000000000000000000000000000000000000000000000000
       049C 0000000000000000000000000000000000000000000000000000000000000000
       04BC 0000000000000000000000000000000000000000000000000000000000000000
       04DC 0000000000000000000000000000000000000000000000000000000000000000
       04FC 0000000000000000000000000000000000000000000000000000000000000000
       051C 0000000000000000000000000000000000000000000000000000000000000000
       053C 0000000000000000000000000000000000000000000000000000000000000000
       055C 0000000000000000000000000000000000000000000000000000000000000000
       057C 0000000000000000000000000000000000000000000000000000000000000000
       059C 0000000000000000000000000000000000000000000000000000000000000000
       05BC 0000000000000000000000000000000000000000000000000000000000000000
       05DC 0000000000000000000000000000000000000000000000000000000000000000
       05FC 0000000000000000000000000000000000000000000000000000000000000000
       061C 0000000000000000000000000000000000000000000000000000000000000000
       063C 0000000000000000000000000000000000000000000000000000000000000000
       065C 0000000000000000000000000000000000000000000000000000000000000000
       067C 0000000000000000000000000000000000000000000000000000000000000000
       069C 0000000000000000000000000000000000000000000000000000000000000000
       06BC 0000000000000000000000000000000000000000000000000000000000000000
       06DC 0000000000000000000000000000000000000000000000000000000000000000
       06FC 0000000000000000000000000000000000000000000000000000000000000000
       071C 0000000000000000000000000000000000000000000000000000000000000000
       073C 0000000000000000000000000000000000000000000000000000000000000000
       075C 0000000000000000000000000000000000000000000000000000000000000000
       077C 0000000000000000000000000000000000000000000000000000000000000000
       079C 0000000000000000000000000000000000000000000000000000000000000000
       07BC 0000000000000000000000000000000000000000000000000000000000000000
       07DC 000000000000000000000000000000000000000000000000000000
( 435) 07F7 FF          ; _stk_top .byt -1
( 436)                  ; 
( 437)                  ; 	.end
